// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VCenter VCenter
//
// swagger:model VCenter
type VCenter struct {

	// content libraries
	ContentLibraries []*VCContentLibrary `json:"contentLibraries"`

	// data collection status
	DataCollectionStatus string `json:"dataCollectionStatus,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// template custom specs
	TemplateCustomSpecs []*VirtualMachineTemplateSpec `json:"templateCustomSpecs"`

	// type
	Type int32 `json:"type,omitempty"`

	// v c data centeres
	VCDataCenteres []*VCDataCenter `json:"vCDataCenteres"`

	// v center host
	VCenterHost string `json:"vCenterHost,omitempty"`

	// v center name
	VCenterName string `json:"vCenterName,omitempty"`

	// vc password
	VcPassword string `json:"vcPassword,omitempty"`

	// vc username
	VcUsername string `json:"vcUsername,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this v center
func (m *VCenter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentLibraries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateCustomSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVCDataCenteres(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VCenter) validateContentLibraries(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentLibraries) { // not required
		return nil
	}

	for i := 0; i < len(m.ContentLibraries); i++ {
		if swag.IsZero(m.ContentLibraries[i]) { // not required
			continue
		}

		if m.ContentLibraries[i] != nil {
			if err := m.ContentLibraries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contentLibraries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VCenter) validateTemplateCustomSpecs(formats strfmt.Registry) error {

	if swag.IsZero(m.TemplateCustomSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.TemplateCustomSpecs); i++ {
		if swag.IsZero(m.TemplateCustomSpecs[i]) { // not required
			continue
		}

		if m.TemplateCustomSpecs[i] != nil {
			if err := m.TemplateCustomSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("templateCustomSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VCenter) validateVCDataCenteres(formats strfmt.Registry) error {

	if swag.IsZero(m.VCDataCenteres) { // not required
		return nil
	}

	for i := 0; i < len(m.VCDataCenteres); i++ {
		if swag.IsZero(m.VCDataCenteres[i]) { // not required
			continue
		}

		if m.VCDataCenteres[i] != nil {
			if err := m.VCDataCenteres[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vCDataCenteres" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VCenter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VCenter) UnmarshalBinary(b []byte) error {
	var res VCenter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
