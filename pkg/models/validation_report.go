// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValidationReport ValidationReport
//
// swagger:model ValidationReport
type ValidationReport struct {

	// last update time millis
	LastUpdateTimeMillis int64 `json:"lastUpdateTimeMillis,omitempty"`

	// manual validations
	ManualValidations []*ManualValidationElement `json:"manualValidations"`

	// overall status
	OverallStatus bool `json:"overallStatus,omitempty"`

	// request Id
	RequestID string `json:"requestId,omitempty"`

	// request state
	RequestState string `json:"requestState,omitempty"`

	// root validations
	RootValidations []*ValidationElement `json:"rootValidations"`

	// start time millis
	StartTimeMillis int64 `json:"startTimeMillis,omitempty"`
}

// Validate validates this validation report
func (m *ValidationReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManualValidations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootValidations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidationReport) validateManualValidations(formats strfmt.Registry) error {

	if swag.IsZero(m.ManualValidations) { // not required
		return nil
	}

	for i := 0; i < len(m.ManualValidations); i++ {
		if swag.IsZero(m.ManualValidations[i]) { // not required
			continue
		}

		if m.ManualValidations[i] != nil {
			if err := m.ManualValidations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("manualValidations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ValidationReport) validateRootValidations(formats strfmt.Registry) error {

	if swag.IsZero(m.RootValidations) { // not required
		return nil
	}

	for i := 0; i < len(m.RootValidations); i++ {
		if swag.IsZero(m.RootValidations[i]) { // not required
			continue
		}

		if m.RootValidations[i] != nil {
			if err := m.RootValidations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rootValidations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidationReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidationReport) UnmarshalBinary(b []byte) error {
	var res ValidationReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
