// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LicenseAttributeDTO LicenseAttributeDTO
//
// swagger:model LicenseAttributeDTO
type LicenseAttributeDTO struct {

	// account
	Account string `json:"account,omitempty"`

	// alias
	Alias string `json:"alias,omitempty"`

	// cas Id
	CasID string `json:"casId,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end date
	EndDate int64 `json:"endDate,omitempty"`

	// expired
	Expired bool `json:"expired,omitempty"`

	// expiry
	Expiry int64 `json:"expiry,omitempty"`

	// falcon Id
	FalconID string `json:"falconId,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// lint Id
	LintID string `json:"lintId,omitempty"`

	// on prem allocation
	OnPremAllocation string `json:"onPremAllocation,omitempty"`

	// product version map
	ProductVersionMap map[string][]string `json:"productVersionMap,omitempty"`

	// quantity
	Quantity int32 `json:"quantity,omitempty"`

	// refresh status
	RefreshStatus string `json:"refreshStatus,omitempty"`

	// start date
	StartDate int64 `json:"startDate,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// transaction Id
	TransactionID string `json:"transactionId,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// unit
	Unit string `json:"unit,omitempty"`

	// vmid
	Vmid string `json:"vmid,omitempty"`
}

// Validate validates this license attribute d t o
func (m *LicenseAttributeDTO) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LicenseAttributeDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicenseAttributeDTO) UnmarshalBinary(b []byte) error {
	var res LicenseAttributeDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
