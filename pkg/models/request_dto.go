// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RequestDTO RequestDTO
//
// swagger:model RequestDTO
type RequestDTO struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// error cause
	ErrorCause string `json:"errorCause,omitempty"`

	// execution Id
	ExecutionID string `json:"executionId,omitempty"`

	// execution path
	ExecutionPath string `json:"executionPath,omitempty"`

	// execution status
	ExecutionStatus string `json:"executionStatus,omitempty"`

	// input map
	InputMap map[string]interface{} `json:"inputMap,omitempty"`

	// is cancel enabled
	IsCancelEnabled string `json:"isCancelEnabled,omitempty"`

	// last updated on
	LastUpdatedOn int64 `json:"lastUpdatedOn,omitempty"`

	// output map
	OutputMap map[string]interface{} `json:"outputMap,omitempty"`

	// request name
	RequestName string `json:"requestName,omitempty"`

	// request reason
	RequestReason string `json:"requestReason,omitempty"`

	// request source
	RequestSource string `json:"requestSource,omitempty"`

	// request source type
	RequestSourceType string `json:"requestSourceType,omitempty"`

	// request type
	RequestType string `json:"requestType,omitempty"`

	// result set
	ResultSet string `json:"resultSet,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// transaction Id
	TransactionID string `json:"transactionId,omitempty"`

	// vmid
	Vmid string `json:"vmid,omitempty"`
}

// Validate validates this request d t o
func (m *RequestDTO) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestDTO) UnmarshalBinary(b []byte) error {
	var res RequestDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
