// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CertificateResponseDTO CertificateResponseDTO
//
// swagger:model CertificateResponseDTO
type CertificateResponseDTO struct {

	// alias
	Alias string `json:"alias,omitempty"`

	// cert chain
	CertChain string `json:"certChain,omitempty"`

	// cert info
	CertInfo *CertInfo `json:"certInfo,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// leaf cert
	LeafCert string `json:"leafCert,omitempty"`

	// transaction Id
	TransactionID string `json:"transactionId,omitempty"`

	// validations
	Validations []*ValidationResultDTO `json:"validations"`

	// validity
	Validity *Validity `json:"validity,omitempty"`

	// vmid
	Vmid string `json:"vmid,omitempty"`
}

// Validate validates this certificate response d t o
func (m *CertificateResponseDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateResponseDTO) validateCertInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CertInfo) { // not required
		return nil
	}

	if m.CertInfo != nil {
		if err := m.CertInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateResponseDTO) validateValidations(formats strfmt.Registry) error {

	if swag.IsZero(m.Validations) { // not required
		return nil
	}

	for i := 0; i < len(m.Validations); i++ {
		if swag.IsZero(m.Validations[i]) { // not required
			continue
		}

		if m.Validations[i] != nil {
			if err := m.Validations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateResponseDTO) validateValidity(formats strfmt.Registry) error {

	if swag.IsZero(m.Validity) { // not required
		return nil
	}

	if m.Validity != nil {
		if err := m.Validity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateResponseDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateResponseDTO) UnmarshalBinary(b []byte) error {
	var res CertificateResponseDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
