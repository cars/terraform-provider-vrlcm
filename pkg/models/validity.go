// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Validity Validity
//
// swagger:model Validity
type Validity struct {

	// expires on
	// Format: date-time
	ExpiresOn strfmt.DateTime `json:"expiresOn,omitempty"`

	// healthy
	Healthy bool `json:"healthy,omitempty"`

	// issued on
	// Format: date-time
	IssuedOn strfmt.DateTime `json:"issuedOn,omitempty"`

	// period
	Period string `json:"period,omitempty"`
}

// Validate validates this validity
func (m *Validity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiresOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Validity) validateExpiresOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiresOn) { // not required
		return nil
	}

	if err := validate.FormatOf("expiresOn", "body", "date-time", m.ExpiresOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Validity) validateIssuedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.IssuedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("issuedOn", "body", "date-time", m.IssuedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Validity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Validity) UnmarshalBinary(b []byte) error {
	var res Validity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
