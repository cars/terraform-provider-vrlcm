// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ManualValidationElement ManualValidationElement
//
// swagger:model ManualValidationElement
type ManualValidationElement struct {

	// check name
	CheckName string `json:"checkName,omitempty"`

	// check type
	CheckType string `json:"checkType,omitempty"`

	// child elements
	ChildElements []*ManualValidationElement `json:"childElements"`

	// group name
	GroupName string `json:"groupName,omitempty"`

	// is scriptable
	IsScriptable string `json:"isScriptable,omitempty"`

	// recommendations
	Recommendations []string `json:"recommendations"`

	// script path
	ScriptPath string `json:"scriptPath,omitempty"`
}

// Validate validates this manual validation element
func (m *ManualValidationElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildElements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManualValidationElement) validateChildElements(formats strfmt.Registry) error {

	if swag.IsZero(m.ChildElements) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildElements); i++ {
		if swag.IsZero(m.ChildElements[i]) { // not required
			continue
		}

		if m.ChildElements[i] != nil {
			if err := m.ChildElements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childElements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ManualValidationElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManualValidationElement) UnmarshalBinary(b []byte) error {
	var res ManualValidationElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
