// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VCCluster VCCluster
//
// swagger:model VCCluster
type VCCluster struct {

	// cluster name
	ClusterName string `json:"clusterName,omitempty"`

	// cpu
	CPU int32 `json:"cpu,omitempty"`

	// hosts
	Hosts []*Host `json:"hosts"`

	// is managed
	IsManaged bool `json:"isManaged,omitempty"`

	// memory
	Memory float64 `json:"memory,omitempty"`

	// networks
	Networks []*Network `json:"networks"`

	// resource pools
	ResourcePools []*ResourcePool `json:"resourcePools"`

	// storages
	Storages []*Storage `json:"storages"`

	// virtual machine templates
	VirtualMachineTemplates []*VirtualMachineTemplate `json:"virtualMachineTemplates"`
}

// Validate validates this v c cluster
func (m *VCCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachineTemplates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VCCluster) validateHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VCCluster) validateNetworks(formats strfmt.Registry) error {

	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	for i := 0; i < len(m.Networks); i++ {
		if swag.IsZero(m.Networks[i]) { // not required
			continue
		}

		if m.Networks[i] != nil {
			if err := m.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VCCluster) validateResourcePools(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourcePools) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourcePools); i++ {
		if swag.IsZero(m.ResourcePools[i]) { // not required
			continue
		}

		if m.ResourcePools[i] != nil {
			if err := m.ResourcePools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourcePools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VCCluster) validateStorages(formats strfmt.Registry) error {

	if swag.IsZero(m.Storages) { // not required
		return nil
	}

	for i := 0; i < len(m.Storages); i++ {
		if swag.IsZero(m.Storages[i]) { // not required
			continue
		}

		if m.Storages[i] != nil {
			if err := m.Storages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VCCluster) validateVirtualMachineTemplates(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualMachineTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualMachineTemplates); i++ {
		if swag.IsZero(m.VirtualMachineTemplates[i]) { // not required
			continue
		}

		if m.VirtualMachineTemplates[i] != nil {
			if err := m.VirtualMachineTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualMachineTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VCCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VCCluster) UnmarshalBinary(b []byte) error {
	var res VCCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
