// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpgradeEnvironmentUIRequest UpgradeEnvironmentUiRequest
//
// swagger:model UpgradeEnvironmentUiRequest
type UpgradeEnvironmentUIRequest struct {

	// last updated on
	LastUpdatedOn int64 `json:"lastUpdatedOn,omitempty"`

	// request Id
	RequestID string `json:"requestId,omitempty"`

	// request state
	RequestState string `json:"requestState,omitempty"`

	// request type
	RequestType string `json:"requestType,omitempty"`

	// result data
	ResultData string `json:"resultData,omitempty"`

	// ui data
	UIData string `json:"uiData,omitempty"`

	// upgrade product request d t o
	UpgradeProductRequestDTO *UpgradeProductRequestDTO `json:"upgradeProductRequestDTO,omitempty"`
}

// Validate validates this upgrade environment Ui request
func (m *UpgradeEnvironmentUIRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpgradeProductRequestDTO(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeEnvironmentUIRequest) validateUpgradeProductRequestDTO(formats strfmt.Registry) error {

	if swag.IsZero(m.UpgradeProductRequestDTO) { // not required
		return nil
	}

	if m.UpgradeProductRequestDTO != nil {
		if err := m.UpgradeProductRequestDTO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeProductRequestDTO")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeEnvironmentUIRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeEnvironmentUIRequest) UnmarshalBinary(b []byte) error {
	var res UpgradeEnvironmentUIRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
