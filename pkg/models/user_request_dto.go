// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserRequestDTO UserRequestDTO
//
// swagger:model UserRequestDTO
type UserRequestDTO struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// domain
	Domain string `json:"domain,omitempty"`

	// is disabled
	IsDisabled bool `json:"isDisabled,omitempty"`

	// mapped roles
	MappedRoles []string `json:"mappedRoles"`

	// password
	Password string `json:"password,omitempty"`

	// provider identifier
	ProviderIdentifier string `json:"providerIdentifier,omitempty"`

	// user metadata
	UserMetadata *UserMetadataDTO `json:"userMetadata,omitempty"`

	// user principal name
	UserPrincipalName string `json:"userPrincipalName,omitempty"`

	// user type
	UserType string `json:"userType,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this user request d t o
func (m *UserRequestDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserRequestDTO) validateUserMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.UserMetadata) { // not required
		return nil
	}

	if m.UserMetadata != nil {
		if err := m.UserMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserRequestDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserRequestDTO) UnmarshalBinary(b []byte) error {
	var res UserRequestDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
