// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VidmTenantOnboardingRequestDTO VidmTenantOnboardingRequestDTO
//
// swagger:model VidmTenantOnboardingRequestDTO
type VidmTenantOnboardingRequestDTO struct {

	// associate products list
	AssociateProductsList []*EnvironmentProductMetadata `json:"associateProductsList"`

	// base tenant hostname
	BaseTenantHostname string `json:"baseTenantHostname,omitempty"`

	// is tenant configured by path
	IsTenantConfiguredByPath bool `json:"isTenantConfiguredByPath,omitempty"`

	// migrate directories
	MigrateDirectories *VidmDirectoryConfigListDTO `json:"migrateDirectories,omitempty"`

	// migrate prelude o auth clients
	MigratePreludeOAuthClients bool `json:"migratePreludeOAuthClients,omitempty"`

	// onboarding tenant name
	OnboardingTenantName string `json:"onboardingTenantName,omitempty"`

	// perform complete prechecks
	PerformCompletePrechecks bool `json:"performCompletePrechecks,omitempty"`

	// request Id
	RequestID string `json:"requestId,omitempty"`

	// tenant admin info
	TenantAdminInfo *VidmCreateLocalUserDefnDTO `json:"tenantAdminInfo,omitempty"`

	// use service client
	UseServiceClient bool `json:"useServiceClient,omitempty"`

	// vidm admin password
	VidmAdminPassword string `json:"vidmAdminPassword,omitempty"`

	// vidm admin user
	VidmAdminUser string `json:"vidmAdminUser,omitempty"`

	// vidm domain name
	VidmDomainName string `json:"vidmDomainName,omitempty"`

	// vidm host
	VidmHost string `json:"vidmHost,omitempty"`

	// vidm o auth service client Id
	VidmOAuthServiceClientID string `json:"vidmOAuthServiceClientId,omitempty"`

	// vidm o auth service client secret
	VidmOAuthServiceClientSecret string `json:"vidmOAuthServiceClientSecret,omitempty"`

	// vidm tenant
	VidmTenant string `json:"vidmTenant,omitempty"`
}

// Validate validates this vidm tenant onboarding request d t o
func (m *VidmTenantOnboardingRequestDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssociateProductsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMigrateDirectories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantAdminInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VidmTenantOnboardingRequestDTO) validateAssociateProductsList(formats strfmt.Registry) error {

	if swag.IsZero(m.AssociateProductsList) { // not required
		return nil
	}

	for i := 0; i < len(m.AssociateProductsList); i++ {
		if swag.IsZero(m.AssociateProductsList[i]) { // not required
			continue
		}

		if m.AssociateProductsList[i] != nil {
			if err := m.AssociateProductsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associateProductsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VidmTenantOnboardingRequestDTO) validateMigrateDirectories(formats strfmt.Registry) error {

	if swag.IsZero(m.MigrateDirectories) { // not required
		return nil
	}

	if m.MigrateDirectories != nil {
		if err := m.MigrateDirectories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("migrateDirectories")
			}
			return err
		}
	}

	return nil
}

func (m *VidmTenantOnboardingRequestDTO) validateTenantAdminInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantAdminInfo) { // not required
		return nil
	}

	if m.TenantAdminInfo != nil {
		if err := m.TenantAdminInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenantAdminInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VidmTenantOnboardingRequestDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VidmTenantOnboardingRequestDTO) UnmarshalBinary(b []byte) error {
	var res VidmTenantOnboardingRequestDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
