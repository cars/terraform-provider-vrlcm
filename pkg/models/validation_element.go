// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidationElement ValidationElement
//
// swagger:model ValidationElement
type ValidationElement struct {

	// check name
	CheckName string `json:"checkName,omitempty"`

	// check type
	// Enum: [ERROR WARNING RECOMMENDATION]
	CheckType string `json:"checkType,omitempty"`

	// child elements
	ChildElements []*ValidationElement `json:"childElements"`

	// element type
	// Enum: [CHECK RESOURCE GROUP]
	ElementType string `json:"elementType,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// recommendations
	Recommendations []string `json:"recommendations"`

	// result description
	ResultDescription string `json:"resultDescription,omitempty"`

	// status
	// Enum: [PASSED FAILED FIXED]
	Status string `json:"status,omitempty"`
}

// Validate validates this validation element
func (m *ValidationElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildElements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElementType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var validationElementTypeCheckTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ERROR","WARNING","RECOMMENDATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		validationElementTypeCheckTypePropEnum = append(validationElementTypeCheckTypePropEnum, v)
	}
}

const (

	// ValidationElementCheckTypeERROR captures enum value "ERROR"
	ValidationElementCheckTypeERROR string = "ERROR"

	// ValidationElementCheckTypeWARNING captures enum value "WARNING"
	ValidationElementCheckTypeWARNING string = "WARNING"

	// ValidationElementCheckTypeRECOMMENDATION captures enum value "RECOMMENDATION"
	ValidationElementCheckTypeRECOMMENDATION string = "RECOMMENDATION"
)

// prop value enum
func (m *ValidationElement) validateCheckTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, validationElementTypeCheckTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ValidationElement) validateCheckType(formats strfmt.Registry) error {

	if swag.IsZero(m.CheckType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCheckTypeEnum("checkType", "body", m.CheckType); err != nil {
		return err
	}

	return nil
}

func (m *ValidationElement) validateChildElements(formats strfmt.Registry) error {

	if swag.IsZero(m.ChildElements) { // not required
		return nil
	}

	for i := 0; i < len(m.ChildElements); i++ {
		if swag.IsZero(m.ChildElements[i]) { // not required
			continue
		}

		if m.ChildElements[i] != nil {
			if err := m.ChildElements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("childElements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var validationElementTypeElementTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CHECK","RESOURCE","GROUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		validationElementTypeElementTypePropEnum = append(validationElementTypeElementTypePropEnum, v)
	}
}

const (

	// ValidationElementElementTypeCHECK captures enum value "CHECK"
	ValidationElementElementTypeCHECK string = "CHECK"

	// ValidationElementElementTypeRESOURCE captures enum value "RESOURCE"
	ValidationElementElementTypeRESOURCE string = "RESOURCE"

	// ValidationElementElementTypeGROUP captures enum value "GROUP"
	ValidationElementElementTypeGROUP string = "GROUP"
)

// prop value enum
func (m *ValidationElement) validateElementTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, validationElementTypeElementTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ValidationElement) validateElementType(formats strfmt.Registry) error {

	if swag.IsZero(m.ElementType) { // not required
		return nil
	}

	// value enum
	if err := m.validateElementTypeEnum("elementType", "body", m.ElementType); err != nil {
		return err
	}

	return nil
}

var validationElementTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PASSED","FAILED","FIXED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		validationElementTypeStatusPropEnum = append(validationElementTypeStatusPropEnum, v)
	}
}

const (

	// ValidationElementStatusPASSED captures enum value "PASSED"
	ValidationElementStatusPASSED string = "PASSED"

	// ValidationElementStatusFAILED captures enum value "FAILED"
	ValidationElementStatusFAILED string = "FAILED"

	// ValidationElementStatusFIXED captures enum value "FIXED"
	ValidationElementStatusFIXED string = "FIXED"
)

// prop value enum
func (m *ValidationElement) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, validationElementTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ValidationElement) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidationElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidationElement) UnmarshalBinary(b []byte) error {
	var res ValidationElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
