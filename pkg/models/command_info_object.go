// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommandInfoObject CommandInfoObject
//
// swagger:model CommandInfoObject
type CommandInfoObject struct {

	// cmd Id
	CmdID string `json:"cmdId,omitempty"`

	// cmd status
	// Enum: [QUEUED PROCESSING REJECTED REQUEUED COMPLETED FAILED]
	CmdStatus string `json:"cmdStatus,omitempty"`

	// cmd type
	CmdType string `json:"cmdType,omitempty"`

	// command source
	CommandSource string `json:"commandSource,omitempty"`

	// errors
	Errors map[string][]interface{} `json:"errors,omitempty"`

	// input
	Input map[string]string `json:"input,omitempty"`

	// node Id
	NodeID string `json:"nodeId,omitempty"`

	// output
	Output map[string]string `json:"output,omitempty"`

	// parent Id
	ParentID string `json:"parentId,omitempty"`

	// result descr
	ResultDescr string `json:"resultDescr,omitempty"`

	// result msg
	ResultMsg string `json:"resultMsg,omitempty"`
}

// Validate validates this command info object
func (m *CommandInfoObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCmdStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var commandInfoObjectTypeCmdStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["QUEUED","PROCESSING","REJECTED","REQUEUED","COMPLETED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commandInfoObjectTypeCmdStatusPropEnum = append(commandInfoObjectTypeCmdStatusPropEnum, v)
	}
}

const (

	// CommandInfoObjectCmdStatusQUEUED captures enum value "QUEUED"
	CommandInfoObjectCmdStatusQUEUED string = "QUEUED"

	// CommandInfoObjectCmdStatusPROCESSING captures enum value "PROCESSING"
	CommandInfoObjectCmdStatusPROCESSING string = "PROCESSING"

	// CommandInfoObjectCmdStatusREJECTED captures enum value "REJECTED"
	CommandInfoObjectCmdStatusREJECTED string = "REJECTED"

	// CommandInfoObjectCmdStatusREQUEUED captures enum value "REQUEUED"
	CommandInfoObjectCmdStatusREQUEUED string = "REQUEUED"

	// CommandInfoObjectCmdStatusCOMPLETED captures enum value "COMPLETED"
	CommandInfoObjectCmdStatusCOMPLETED string = "COMPLETED"

	// CommandInfoObjectCmdStatusFAILED captures enum value "FAILED"
	CommandInfoObjectCmdStatusFAILED string = "FAILED"
)

// prop value enum
func (m *CommandInfoObject) validateCmdStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commandInfoObjectTypeCmdStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommandInfoObject) validateCmdStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.CmdStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateCmdStatusEnum("cmdStatus", "body", m.CmdStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommandInfoObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommandInfoObject) UnmarshalBinary(b []byte) error {
	var res CommandInfoObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
