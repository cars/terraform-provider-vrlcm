// Code generated by go-swagger; DO NOT EDIT.

package deployments_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deployments controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deployments controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddroductDataSourcesUsingPOST(params *AddroductDataSourcesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*AddroductDataSourcesUsingPOSTOK, *AddroductDataSourcesUsingPOSTCreated, error)

	ApplyProductPatchUsingPOST(params *ApplyProductPatchUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ApplyProductPatchUsingPOSTOK, *ApplyProductPatchUsingPOSTCreated, error)

	CheckProductHealthUsingPOST(params *CheckProductHealthUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CheckProductHealthUsingPOSTOK, *CheckProductHealthUsingPOSTCreated, error)

	CheckProductUpgradeVersionRequestUsingPOST(params *CheckProductUpgradeVersionRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CheckProductUpgradeVersionRequestUsingPOSTOK, *CheckProductUpgradeVersionRequestUsingPOSTCreated, error)

	CreateProductReplaceLicenseRequestUsingPOST(params *CreateProductReplaceLicenseRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProductReplaceLicenseRequestUsingPOSTOK, *CreateProductReplaceLicenseRequestUsingPOSTCreated, error)

	CreateProductSnapshotRequestUsingPOST(params *CreateProductSnapshotRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProductSnapshotRequestUsingPOSTOK, *CreateProductSnapshotRequestUsingPOSTCreated, error)

	CreateProductUpdateCertificateRequestUsingPOST(params *CreateProductUpdateCertificateRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProductUpdateCertificateRequestUsingPOSTOK, *CreateProductUpdateCertificateRequestUsingPOSTCreated, error)

	CreateProductUpgradeRequestUsingPOST(params *CreateProductUpgradeRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProductUpgradeRequestUsingPOSTOK, *CreateProductUpgradeRequestUsingPOSTCreated, error)

	DeleteProductSnapshotRequestUsingPOST(params *DeleteProductSnapshotRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductSnapshotRequestUsingPOSTOK, *DeleteProductSnapshotRequestUsingPOSTCreated, error)

	DeleteProductUsingDELETE(params *DeleteProductUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductUsingDELETEOK, *DeleteProductUsingDELETENoContent, error)

	DeleteProductUsingGET(params *DeleteProductUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductUsingGETOK, error)

	DownloadProductLogsUsingPOST(params *DownloadProductLogsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadProductLogsUsingPOSTOK, *DownloadProductLogsUsingPOSTCreated, error)

	ExportProductUsingGET(params *ExportProductUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ExportProductUsingGETOK, error)

	GetCompatablityMatrixUsingGET(params *GetCompatablityMatrixUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompatablityMatrixUsingGETOK, error)

	GetCompatablityMatrixUsingPOST(params *GetCompatablityMatrixUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompatablityMatrixUsingPOSTOK, *GetCompatablityMatrixUsingPOSTCreated, error)

	GetProductCertificateUsingGET(params *GetProductCertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductCertificateUsingGETOK, error)

	GetProductDetailsUsingGET(params *GetProductDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductDetailsUsingGETOK, error)

	GetProductIntegrationsUsingGET(params *GetProductIntegrationsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductIntegrationsUsingGETOK, error)

	GetProductPatchUsingGET(params *GetProductPatchUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductPatchUsingGETOK, error)

	GetProductUpgradeURLUsingGET(params *GetProductUpgradeURLUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductUpgradeURLUsingGETOK, error)

	GetUIUpgradeEnvironmentRequestUsingGET(params *GetUIUpgradeEnvironmentRequestUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUIUpgradeEnvironmentRequestUsingGETOK, error)

	GetvropsApuatReportUsingGET(params *GetvropsApuatReportUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetvropsApuatReportUsingGETOK, error)

	PowerOnProductVidmUsingPOST(params *PowerOnProductVidmUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*PowerOnProductVidmUsingPOSTOK, *PowerOnProductVidmUsingPOSTCreated, error)

	PrevalidateProductUpgradeRequestUsingPOST(params *PrevalidateProductUpgradeRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*PrevalidateProductUpgradeRequestUsingPOSTOK, *PrevalidateProductUpgradeRequestUsingPOSTCreated, error)

	ReRegisterVidmWithProductUsingPOST(params *ReRegisterVidmWithProductUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ReRegisterVidmWithProductUsingPOSTOK, *ReRegisterVidmWithProductUsingPOSTCreated, error)

	RetrustLBCertificateUsingPOST(params *RetrustLBCertificateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RetrustLBCertificateUsingPOSTOK, *RetrustLBCertificateUsingPOSTCreated, error)

	RetrustVidmWithProductUsingPOST(params *RetrustVidmWithProductUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RetrustVidmWithProductUsingPOSTOK, *RetrustVidmWithProductUsingPOSTCreated, error)

	RevertProductSnapshotRequestUsingPOST(params *RevertProductSnapshotRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RevertProductSnapshotRequestUsingPOSTOK, *RevertProductSnapshotRequestUsingPOSTCreated, error)

	ShutDownProductVidmUsingPOST(params *ShutDownProductVidmUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ShutDownProductVidmUsingPOSTOK, *ShutDownProductVidmUsingPOSTCreated, error)

	SyncProductIntegrationsUsingPOST(params *SyncProductIntegrationsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SyncProductIntegrationsUsingPOSTOK, *SyncProductIntegrationsUsingPOSTCreated, error)

	UpdateAllowedRedirectsUsingPOST(params *UpdateAllowedRedirectsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAllowedRedirectsUsingPOSTOK, *UpdateAllowedRedirectsUsingPOSTCreated, error)

	UpdateNodePasswordRequestUsingPOST(params *UpdateNodePasswordRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNodePasswordRequestUsingPOSTOK, *UpdateNodePasswordRequestUsingPOSTCreated, error)

	UpdateProductAdminPasswordRequestUsingPOST(params *UpdateProductAdminPasswordRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProductAdminPasswordRequestUsingPOSTOK, *UpdateProductAdminPasswordRequestUsingPOSTCreated, error)

	UpdateProductLBConfigRequestUsingPOST(params *UpdateProductLBConfigRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProductLBConfigRequestUsingPOSTOK, *UpdateProductLBConfigRequestUsingPOSTCreated, error)

	UpdateVidmSSHUserPasswordUsingPOST(params *UpdateVidmSSHUserPasswordUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVidmSSHUserPasswordUsingPOSTOK, *UpdateVidmSSHUserPasswordUsingPOSTCreated, error)

	UpdateVidmSystemAdminPasswordUsingPOST(params *UpdateVidmSystemAdminPasswordUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVidmSystemAdminPasswordUsingPOSTOK, *UpdateVidmSystemAdminPasswordUsingPOSTCreated, error)

	ValidateProductScaleoutOvaMappedRequestUsingPOST(params *ValidateProductScaleoutOvaMappedRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateProductScaleoutOvaMappedRequestUsingPOSTOK, *ValidateProductScaleoutOvaMappedRequestUsingPOSTCreated, error)

	ValidateProductUpdateCertificateRequestUsingPOST(params *ValidateProductUpdateCertificateRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateProductUpdateCertificateRequestUsingPOSTOK, *ValidateProductUpdateCertificateRequestUsingPOSTCreated, error)

	VcfSourceMappingRequestUsingPOST(params *VcfSourceMappingRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*VcfSourceMappingRequestUsingPOSTOK, *VcfSourceMappingRequestUsingPOSTCreated, error)

	VropsApuatIntegrationsUsingPOST(params *VropsApuatIntegrationsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*VropsApuatIntegrationsUsingPOSTOK, *VropsApuatIntegrationsUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddroductDataSourcesUsingPOST addroducts data sources
*/
func (a *Client) AddroductDataSourcesUsingPOST(params *AddroductDataSourcesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*AddroductDataSourcesUsingPOSTOK, *AddroductDataSourcesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddroductDataSourcesUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addroductDataSourcesUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/adddatasource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddroductDataSourcesUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddroductDataSourcesUsingPOSTOK:
		return value, nil, nil
	case *AddroductDataSourcesUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ApplyProductPatchUsingPOST applies product patch
*/
func (a *Client) ApplyProductPatchUsingPOST(params *ApplyProductPatchUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ApplyProductPatchUsingPOSTOK, *ApplyProductPatchUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyProductPatchUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "applyProductPatchUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/patch/{patchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ApplyProductPatchUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ApplyProductPatchUsingPOSTOK:
		return value, nil, nil
	case *ApplyProductPatchUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckProductHealthUsingPOST checks product health
*/
func (a *Client) CheckProductHealthUsingPOST(params *CheckProductHealthUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CheckProductHealthUsingPOSTOK, *CheckProductHealthUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckProductHealthUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkProductHealthUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/productHealthCheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckProductHealthUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CheckProductHealthUsingPOSTOK:
		return value, nil, nil
	case *CheckProductHealthUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckProductUpgradeVersionRequestUsingPOST checks product upgrade version request
*/
func (a *Client) CheckProductUpgradeVersionRequestUsingPOST(params *CheckProductUpgradeVersionRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CheckProductUpgradeVersionRequestUsingPOSTOK, *CheckProductUpgradeVersionRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckProductUpgradeVersionRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkProductUpgradeVersionRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/upgrade/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckProductUpgradeVersionRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CheckProductUpgradeVersionRequestUsingPOSTOK:
		return value, nil, nil
	case *CheckProductUpgradeVersionRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProductReplaceLicenseRequestUsingPOST creates product replace license request
*/
func (a *Client) CreateProductReplaceLicenseRequestUsingPOST(params *CreateProductReplaceLicenseRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProductReplaceLicenseRequestUsingPOSTOK, *CreateProductReplaceLicenseRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProductReplaceLicenseRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProductReplaceLicenseRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/replacelicense",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProductReplaceLicenseRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateProductReplaceLicenseRequestUsingPOSTOK:
		return value, nil, nil
	case *CreateProductReplaceLicenseRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProductSnapshotRequestUsingPOST creates product snapshot request
*/
func (a *Client) CreateProductSnapshotRequestUsingPOST(params *CreateProductSnapshotRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProductSnapshotRequestUsingPOSTOK, *CreateProductSnapshotRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProductSnapshotRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProductSnapshotRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProductSnapshotRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateProductSnapshotRequestUsingPOSTOK:
		return value, nil, nil
	case *CreateProductSnapshotRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProductUpdateCertificateRequestUsingPOST creates product update certificate request
*/
func (a *Client) CreateProductUpdateCertificateRequestUsingPOST(params *CreateProductUpdateCertificateRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProductUpdateCertificateRequestUsingPOSTOK, *CreateProductUpdateCertificateRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProductUpdateCertificateRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProductUpdateCertificateRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/updatecertificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProductUpdateCertificateRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateProductUpdateCertificateRequestUsingPOSTOK:
		return value, nil, nil
	case *CreateProductUpdateCertificateRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProductUpgradeRequestUsingPOST creates product upgrade request
*/
func (a *Client) CreateProductUpgradeRequestUsingPOST(params *CreateProductUpgradeRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProductUpgradeRequestUsingPOSTOK, *CreateProductUpgradeRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProductUpgradeRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProductUpgradeRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProductUpgradeRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateProductUpgradeRequestUsingPOSTOK:
		return value, nil, nil
	case *CreateProductUpgradeRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProductSnapshotRequestUsingPOST deletes product snapshot request
*/
func (a *Client) DeleteProductSnapshotRequestUsingPOST(params *DeleteProductSnapshotRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductSnapshotRequestUsingPOSTOK, *DeleteProductSnapshotRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductSnapshotRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProductSnapshotRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/deletesnapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductSnapshotRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteProductSnapshotRequestUsingPOSTOK:
		return value, nil, nil
	case *DeleteProductSnapshotRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProductUsingDELETE deletes product
*/
func (a *Client) DeleteProductUsingDELETE(params *DeleteProductUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductUsingDELETEOK, *DeleteProductUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProductUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteProductUsingDELETEOK:
		return value, nil, nil
	case *DeleteProductUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProductUsingGET deletes product
*/
func (a *Client) DeleteProductUsingGET(params *DeleteProductUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProductUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProductUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProductUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DownloadProductLogsUsingPOST downloads product logs
*/
func (a *Client) DownloadProductLogsUsingPOST(params *DownloadProductLogsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadProductLogsUsingPOSTOK, *DownloadProductLogsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadProductLogsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadProductLogsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadProductLogsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DownloadProductLogsUsingPOSTOK:
		return value, nil, nil
	case *DownloadProductLogsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportProductUsingGET exports product
*/
func (a *Client) ExportProductUsingGET(params *ExportProductUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ExportProductUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportProductUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportProductUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportProductUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportProductUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportProductUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCompatablityMatrixUsingGET gets compatablity matrix
*/
func (a *Client) GetCompatablityMatrixUsingGET(params *GetCompatablityMatrixUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompatablityMatrixUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatablityMatrixUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCompatablityMatrixUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/products/{product}/version/{version}/interop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompatablityMatrixUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompatablityMatrixUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCompatablityMatrixUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCompatablityMatrixUsingPOST gets compatablity matrix
*/
func (a *Client) GetCompatablityMatrixUsingPOST(params *GetCompatablityMatrixUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompatablityMatrixUsingPOSTOK, *GetCompatablityMatrixUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatablityMatrixUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCompatablityMatrixUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/products/interop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompatablityMatrixUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetCompatablityMatrixUsingPOSTOK:
		return value, nil, nil
	case *GetCompatablityMatrixUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProductCertificateUsingGET gets product certificate
*/
func (a *Client) GetProductCertificateUsingGET(params *GetProductCertificateUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductCertificateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductCertificateUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductCertificateUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductCertificateUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductCertificateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProductCertificateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProductDetailsUsingGET gets product details
*/
func (a *Client) GetProductDetailsUsingGET(params *GetProductDetailsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductDetailsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductDetailsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductDetailsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductDetailsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductDetailsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProductDetailsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProductIntegrationsUsingGET gets product integrations
*/
func (a *Client) GetProductIntegrationsUsingGET(params *GetProductIntegrationsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductIntegrationsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductIntegrationsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductIntegrationsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/integration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductIntegrationsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductIntegrationsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProductIntegrationsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProductPatchUsingGET gets product patch
*/
func (a *Client) GetProductPatchUsingGET(params *GetProductPatchUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductPatchUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductPatchUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductPatchUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/patch/{patchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductPatchUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductPatchUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProductPatchUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProductUpgradeURLUsingGET gets product upgrade Url
*/
func (a *Client) GetProductUpgradeURLUsingGET(params *GetProductUpgradeURLUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductUpgradeURLUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductUpgradeURLUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductUpgradeUrlUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/products/{productId}/version/{version}/lcmrepositoryurl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductUpgradeURLUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductUpgradeURLUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProductUpgradeUrlUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUIUpgradeEnvironmentRequestUsingGET gets Ui upgrade environment request
*/
func (a *Client) GetUIUpgradeEnvironmentRequestUsingGET(params *GetUIUpgradeEnvironmentRequestUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUIUpgradeEnvironmentRequestUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUIUpgradeEnvironmentRequestUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUiUpgradeEnvironmentRequestUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/upgrade/{requestId}/ui",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUIUpgradeEnvironmentRequestUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUIUpgradeEnvironmentRequestUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUiUpgradeEnvironmentRequestUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetvropsApuatReportUsingGET getvrops apuat report
*/
func (a *Client) GetvropsApuatReportUsingGET(params *GetvropsApuatReportUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetvropsApuatReportUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetvropsApuatReportUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getvropsApuatReportUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/upgradeVersion/{upgradeVersion}/vropsapuat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetvropsApuatReportUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetvropsApuatReportUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getvropsApuatReportUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PowerOnProductVidmUsingPOST powers on product vidm
*/
func (a *Client) PowerOnProductVidmUsingPOST(params *PowerOnProductVidmUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*PowerOnProductVidmUsingPOSTOK, *PowerOnProductVidmUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPowerOnProductVidmUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "powerOnProductVidmUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/vidm/powerOn",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PowerOnProductVidmUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PowerOnProductVidmUsingPOSTOK:
		return value, nil, nil
	case *PowerOnProductVidmUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PrevalidateProductUpgradeRequestUsingPOST prevalidates product upgrade request
*/
func (a *Client) PrevalidateProductUpgradeRequestUsingPOST(params *PrevalidateProductUpgradeRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*PrevalidateProductUpgradeRequestUsingPOSTOK, *PrevalidateProductUpgradeRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrevalidateProductUpgradeRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "prevalidateProductUpgradeRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/upgrade/prevalidate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PrevalidateProductUpgradeRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PrevalidateProductUpgradeRequestUsingPOSTOK:
		return value, nil, nil
	case *PrevalidateProductUpgradeRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReRegisterVidmWithProductUsingPOST res register vidm with product
*/
func (a *Client) ReRegisterVidmWithProductUsingPOST(params *ReRegisterVidmWithProductUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ReRegisterVidmWithProductUsingPOSTOK, *ReRegisterVidmWithProductUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReRegisterVidmWithProductUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reRegisterVidmWithProductUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/productVidmReregister",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReRegisterVidmWithProductUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReRegisterVidmWithProductUsingPOSTOK:
		return value, nil, nil
	case *ReRegisterVidmWithProductUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrustLBCertificateUsingPOST retrusts l b certificate
*/
func (a *Client) RetrustLBCertificateUsingPOST(params *RetrustLBCertificateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RetrustLBCertificateUsingPOSTOK, *RetrustLBCertificateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrustLBCertificateUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retrustLBCertificateUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/retrustLoadBalancerCertificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrustLBCertificateUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RetrustLBCertificateUsingPOSTOK:
		return value, nil, nil
	case *RetrustLBCertificateUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrustVidmWithProductUsingPOST retrusts vidm with product
*/
func (a *Client) RetrustVidmWithProductUsingPOST(params *RetrustVidmWithProductUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RetrustVidmWithProductUsingPOSTOK, *RetrustVidmWithProductUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrustVidmWithProductUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retrustVidmWithProductUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/productVidmRetrust",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrustVidmWithProductUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RetrustVidmWithProductUsingPOSTOK:
		return value, nil, nil
	case *RetrustVidmWithProductUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevertProductSnapshotRequestUsingPOST reverts product snapshot request
*/
func (a *Client) RevertProductSnapshotRequestUsingPOST(params *RevertProductSnapshotRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RevertProductSnapshotRequestUsingPOSTOK, *RevertProductSnapshotRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevertProductSnapshotRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revertProductSnapshotRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/revertsnapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevertProductSnapshotRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RevertProductSnapshotRequestUsingPOSTOK:
		return value, nil, nil
	case *RevertProductSnapshotRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShutDownProductVidmUsingPOST shuts down product vidm
*/
func (a *Client) ShutDownProductVidmUsingPOST(params *ShutDownProductVidmUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ShutDownProductVidmUsingPOSTOK, *ShutDownProductVidmUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutDownProductVidmUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "shutDownProductVidmUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/vidm/shutdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShutDownProductVidmUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ShutDownProductVidmUsingPOSTOK:
		return value, nil, nil
	case *ShutDownProductVidmUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SyncProductIntegrationsUsingPOST syncs product integrations
*/
func (a *Client) SyncProductIntegrationsUsingPOST(params *SyncProductIntegrationsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SyncProductIntegrationsUsingPOSTOK, *SyncProductIntegrationsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncProductIntegrationsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncProductIntegrationsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/inventorysync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncProductIntegrationsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SyncProductIntegrationsUsingPOSTOK:
		return value, nil, nil
	case *SyncProductIntegrationsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAllowedRedirectsUsingPOST updates allowed redirects
*/
func (a *Client) UpdateAllowedRedirectsUsingPOST(params *UpdateAllowedRedirectsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAllowedRedirectsUsingPOSTOK, *UpdateAllowedRedirectsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAllowedRedirectsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAllowedRedirectsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/vra/updateallowedredirects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAllowedRedirectsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAllowedRedirectsUsingPOSTOK:
		return value, nil, nil
	case *UpdateAllowedRedirectsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNodePasswordRequestUsingPOST updates node password request
*/
func (a *Client) UpdateNodePasswordRequestUsingPOST(params *UpdateNodePasswordRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNodePasswordRequestUsingPOSTOK, *UpdateNodePasswordRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNodePasswordRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNodePasswordRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/node/{nodeType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNodePasswordRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateNodePasswordRequestUsingPOSTOK:
		return value, nil, nil
	case *UpdateNodePasswordRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProductAdminPasswordRequestUsingPOST updates product admin password request
*/
func (a *Client) UpdateProductAdminPasswordRequestUsingPOST(params *UpdateProductAdminPasswordRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProductAdminPasswordRequestUsingPOSTOK, *UpdateProductAdminPasswordRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProductAdminPasswordRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProductAdminPasswordRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/updateadminpassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProductAdminPasswordRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateProductAdminPasswordRequestUsingPOSTOK:
		return value, nil, nil
	case *UpdateProductAdminPasswordRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProductLBConfigRequestUsingPOST updates product l b config request
*/
func (a *Client) UpdateProductLBConfigRequestUsingPOST(params *UpdateProductLBConfigRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProductLBConfigRequestUsingPOSTOK, *UpdateProductLBConfigRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProductLBConfigRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProductLBConfigRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/updateLBConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProductLBConfigRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateProductLBConfigRequestUsingPOSTOK:
		return value, nil, nil
	case *UpdateProductLBConfigRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVidmSSHUserPasswordUsingPOST updates vidm Ssh user password
*/
func (a *Client) UpdateVidmSSHUserPasswordUsingPOST(params *UpdateVidmSSHUserPasswordUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVidmSSHUserPasswordUsingPOSTOK, *UpdateVidmSSHUserPasswordUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVidmSSHUserPasswordUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVidmSshUserPasswordUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/node/{nodeType}/vidm/updatevidmsshuserpassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVidmSSHUserPasswordUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateVidmSSHUserPasswordUsingPOSTOK:
		return value, nil, nil
	case *UpdateVidmSSHUserPasswordUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVidmSystemAdminPasswordUsingPOST updates vidm system admin password
*/
func (a *Client) UpdateVidmSystemAdminPasswordUsingPOST(params *UpdateVidmSystemAdminPasswordUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVidmSystemAdminPasswordUsingPOSTOK, *UpdateVidmSystemAdminPasswordUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVidmSystemAdminPasswordUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVidmSystemAdminPasswordUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/node/{nodeType}/vidm/updatevidmsystemadminpassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVidmSystemAdminPasswordUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateVidmSystemAdminPasswordUsingPOSTOK:
		return value, nil, nil
	case *UpdateVidmSystemAdminPasswordUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateProductScaleoutOvaMappedRequestUsingPOST validates product scaleout ova mapped request
*/
func (a *Client) ValidateProductScaleoutOvaMappedRequestUsingPOST(params *ValidateProductScaleoutOvaMappedRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateProductScaleoutOvaMappedRequestUsingPOSTOK, *ValidateProductScaleoutOvaMappedRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateProductScaleoutOvaMappedRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateProductScaleoutOvaMappedRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/product/scaleout/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateProductScaleoutOvaMappedRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateProductScaleoutOvaMappedRequestUsingPOSTOK:
		return value, nil, nil
	case *ValidateProductScaleoutOvaMappedRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateProductUpdateCertificateRequestUsingPOST validates product update certificate request
*/
func (a *Client) ValidateProductUpdateCertificateRequestUsingPOST(params *ValidateProductUpdateCertificateRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateProductUpdateCertificateRequestUsingPOSTOK, *ValidateProductUpdateCertificateRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateProductUpdateCertificateRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateProductUpdateCertificateRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/updatecertificate/prevalidate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateProductUpdateCertificateRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateProductUpdateCertificateRequestUsingPOSTOK:
		return value, nil, nil
	case *ValidateProductUpdateCertificateRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VcfSourceMappingRequestUsingPOST vcfs source mapping request
*/
func (a *Client) VcfSourceMappingRequestUsingPOST(params *VcfSourceMappingRequestUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*VcfSourceMappingRequestUsingPOSTOK, *VcfSourceMappingRequestUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVcfSourceMappingRequestUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "vcfSourceMappingRequestUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productId}/vcfSourceMapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VcfSourceMappingRequestUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VcfSourceMappingRequestUsingPOSTOK:
		return value, nil, nil
	case *VcfSourceMappingRequestUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VropsApuatIntegrationsUsingPOST vrops apuat integrations
*/
func (a *Client) VropsApuatIntegrationsUsingPOST(params *VropsApuatIntegrationsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*VropsApuatIntegrationsUsingPOSTOK, *VropsApuatIntegrationsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVropsApuatIntegrationsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "vropsApuatIntegrationsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/upgradeVersion/{upgradeVersion}/vropsapuat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VropsApuatIntegrationsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VropsApuatIntegrationsUsingPOSTOK:
		return value, nil, nil
	case *VropsApuatIntegrationsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployments_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
