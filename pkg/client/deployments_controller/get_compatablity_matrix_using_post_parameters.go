// Code generated by go-swagger; DO NOT EDIT.

package deployments_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// NewGetCompatablityMatrixUsingPOSTParams creates a new GetCompatablityMatrixUsingPOSTParams object
// with the default values initialized.
func NewGetCompatablityMatrixUsingPOSTParams() *GetCompatablityMatrixUsingPOSTParams {
	var ()
	return &GetCompatablityMatrixUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCompatablityMatrixUsingPOSTParamsWithTimeout creates a new GetCompatablityMatrixUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCompatablityMatrixUsingPOSTParamsWithTimeout(timeout time.Duration) *GetCompatablityMatrixUsingPOSTParams {
	var ()
	return &GetCompatablityMatrixUsingPOSTParams{

		timeout: timeout,
	}
}

// NewGetCompatablityMatrixUsingPOSTParamsWithContext creates a new GetCompatablityMatrixUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCompatablityMatrixUsingPOSTParamsWithContext(ctx context.Context) *GetCompatablityMatrixUsingPOSTParams {
	var ()
	return &GetCompatablityMatrixUsingPOSTParams{

		Context: ctx,
	}
}

// NewGetCompatablityMatrixUsingPOSTParamsWithHTTPClient creates a new GetCompatablityMatrixUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCompatablityMatrixUsingPOSTParamsWithHTTPClient(client *http.Client) *GetCompatablityMatrixUsingPOSTParams {
	var ()
	return &GetCompatablityMatrixUsingPOSTParams{
		HTTPClient: client,
	}
}

/*GetCompatablityMatrixUsingPOSTParams contains all the parameters to send to the API endpoint
for the get compatablity matrix using p o s t operation typically these are written to a http.Request
*/
type GetCompatablityMatrixUsingPOSTParams struct {

	/*IsProxyEnabled*/
	IsProxyEnabled *string
	/*ProxyHost*/
	ProxyHost *string
	/*ProxyPassword*/
	ProxyPassword *string
	/*ProxyPort*/
	ProxyPort *int32
	/*ProxyUserName*/
	ProxyUserName *string
	/*Request
	  request

	*/
	Request *models.InterOpRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) WithTimeout(timeout time.Duration) *GetCompatablityMatrixUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) WithContext(ctx context.Context) *GetCompatablityMatrixUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) WithHTTPClient(client *http.Client) *GetCompatablityMatrixUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIsProxyEnabled adds the isProxyEnabled to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) WithIsProxyEnabled(isProxyEnabled *string) *GetCompatablityMatrixUsingPOSTParams {
	o.SetIsProxyEnabled(isProxyEnabled)
	return o
}

// SetIsProxyEnabled adds the isProxyEnabled to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) SetIsProxyEnabled(isProxyEnabled *string) {
	o.IsProxyEnabled = isProxyEnabled
}

// WithProxyHost adds the proxyHost to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) WithProxyHost(proxyHost *string) *GetCompatablityMatrixUsingPOSTParams {
	o.SetProxyHost(proxyHost)
	return o
}

// SetProxyHost adds the proxyHost to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) SetProxyHost(proxyHost *string) {
	o.ProxyHost = proxyHost
}

// WithProxyPassword adds the proxyPassword to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) WithProxyPassword(proxyPassword *string) *GetCompatablityMatrixUsingPOSTParams {
	o.SetProxyPassword(proxyPassword)
	return o
}

// SetProxyPassword adds the proxyPassword to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) SetProxyPassword(proxyPassword *string) {
	o.ProxyPassword = proxyPassword
}

// WithProxyPort adds the proxyPort to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) WithProxyPort(proxyPort *int32) *GetCompatablityMatrixUsingPOSTParams {
	o.SetProxyPort(proxyPort)
	return o
}

// SetProxyPort adds the proxyPort to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) SetProxyPort(proxyPort *int32) {
	o.ProxyPort = proxyPort
}

// WithProxyUserName adds the proxyUserName to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) WithProxyUserName(proxyUserName *string) *GetCompatablityMatrixUsingPOSTParams {
	o.SetProxyUserName(proxyUserName)
	return o
}

// SetProxyUserName adds the proxyUserName to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) SetProxyUserName(proxyUserName *string) {
	o.ProxyUserName = proxyUserName
}

// WithRequest adds the request to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) WithRequest(request *models.InterOpRequest) *GetCompatablityMatrixUsingPOSTParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the get compatablity matrix using p o s t params
func (o *GetCompatablityMatrixUsingPOSTParams) SetRequest(request *models.InterOpRequest) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *GetCompatablityMatrixUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IsProxyEnabled != nil {

		// query param isProxyEnabled
		var qrIsProxyEnabled string
		if o.IsProxyEnabled != nil {
			qrIsProxyEnabled = *o.IsProxyEnabled
		}
		qIsProxyEnabled := qrIsProxyEnabled
		if qIsProxyEnabled != "" {
			if err := r.SetQueryParam("isProxyEnabled", qIsProxyEnabled); err != nil {
				return err
			}
		}

	}

	if o.ProxyHost != nil {

		// query param proxyHost
		var qrProxyHost string
		if o.ProxyHost != nil {
			qrProxyHost = *o.ProxyHost
		}
		qProxyHost := qrProxyHost
		if qProxyHost != "" {
			if err := r.SetQueryParam("proxyHost", qProxyHost); err != nil {
				return err
			}
		}

	}

	if o.ProxyPassword != nil {

		// query param proxyPassword
		var qrProxyPassword string
		if o.ProxyPassword != nil {
			qrProxyPassword = *o.ProxyPassword
		}
		qProxyPassword := qrProxyPassword
		if qProxyPassword != "" {
			if err := r.SetQueryParam("proxyPassword", qProxyPassword); err != nil {
				return err
			}
		}

	}

	if o.ProxyPort != nil {

		// query param proxyPort
		var qrProxyPort int32
		if o.ProxyPort != nil {
			qrProxyPort = *o.ProxyPort
		}
		qProxyPort := swag.FormatInt32(qrProxyPort)
		if qProxyPort != "" {
			if err := r.SetQueryParam("proxyPort", qProxyPort); err != nil {
				return err
			}
		}

	}

	if o.ProxyUserName != nil {

		// query param proxyUserName
		var qrProxyUserName string
		if o.ProxyUserName != nil {
			qrProxyUserName = *o.ProxyUserName
		}
		qProxyUserName := qrProxyUserName
		if qProxyUserName != "" {
			if err := r.SetQueryParam("proxyUserName", qProxyUserName); err != nil {
				return err
			}
		}

	}

	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
