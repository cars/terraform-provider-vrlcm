// Code generated by go-swagger; DO NOT EDIT.

package authentication_group_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateGroupByIDUsingPATCHReader is a Reader for the UpdateGroupByIDUsingPATCH structure.
type UpdateGroupByIDUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGroupByIDUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGroupByIDUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateGroupByIDUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateGroupByIDUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGroupByIDUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateGroupByIDUsingPATCHOK creates a UpdateGroupByIDUsingPATCHOK with default headers values
func NewUpdateGroupByIDUsingPATCHOK() *UpdateGroupByIDUsingPATCHOK {
	return &UpdateGroupByIDUsingPATCHOK{}
}

/*UpdateGroupByIDUsingPATCHOK handles this case with default header values.

OK
*/
type UpdateGroupByIDUsingPATCHOK struct {
	Payload interface{}
}

func (o *UpdateGroupByIDUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /lcm/authzn/api/groups/{vmid}][%d] updateGroupByIdUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *UpdateGroupByIDUsingPATCHOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateGroupByIDUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGroupByIDUsingPATCHNoContent creates a UpdateGroupByIDUsingPATCHNoContent with default headers values
func NewUpdateGroupByIDUsingPATCHNoContent() *UpdateGroupByIDUsingPATCHNoContent {
	return &UpdateGroupByIDUsingPATCHNoContent{}
}

/*UpdateGroupByIDUsingPATCHNoContent handles this case with default header values.

No Content
*/
type UpdateGroupByIDUsingPATCHNoContent struct {
}

func (o *UpdateGroupByIDUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /lcm/authzn/api/groups/{vmid}][%d] updateGroupByIdUsingPATCHNoContent ", 204)
}

func (o *UpdateGroupByIDUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGroupByIDUsingPATCHUnauthorized creates a UpdateGroupByIDUsingPATCHUnauthorized with default headers values
func NewUpdateGroupByIDUsingPATCHUnauthorized() *UpdateGroupByIDUsingPATCHUnauthorized {
	return &UpdateGroupByIDUsingPATCHUnauthorized{}
}

/*UpdateGroupByIDUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateGroupByIDUsingPATCHUnauthorized struct {
}

func (o *UpdateGroupByIDUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /lcm/authzn/api/groups/{vmid}][%d] updateGroupByIdUsingPATCHUnauthorized ", 401)
}

func (o *UpdateGroupByIDUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGroupByIDUsingPATCHForbidden creates a UpdateGroupByIDUsingPATCHForbidden with default headers values
func NewUpdateGroupByIDUsingPATCHForbidden() *UpdateGroupByIDUsingPATCHForbidden {
	return &UpdateGroupByIDUsingPATCHForbidden{}
}

/*UpdateGroupByIDUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type UpdateGroupByIDUsingPATCHForbidden struct {
}

func (o *UpdateGroupByIDUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /lcm/authzn/api/groups/{vmid}][%d] updateGroupByIdUsingPATCHForbidden ", 403)
}

func (o *UpdateGroupByIDUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
