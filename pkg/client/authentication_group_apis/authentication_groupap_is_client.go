// Code generated by go-swagger; DO NOT EDIT.

package authentication_group_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authentication group a p is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authentication group a p is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateGroupUsingPOST(params *CreateGroupUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGroupUsingPOSTOK, *CreateGroupUsingPOSTCreated, error)

	DeleteAllGroupsUsingDELETE(params *DeleteAllGroupsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllGroupsUsingDELETEOK, *DeleteAllGroupsUsingDELETENoContent, error)

	DeleteGroupByIDUsingDELETE(params *DeleteGroupByIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupByIDUsingDELETEOK, *DeleteGroupByIDUsingDELETENoContent, error)

	GetAllGroupsUsingGET(params *GetAllGroupsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllGroupsUsingGETOK, error)

	GetGroupByDisplayNameAndDomainUsingGET(params *GetGroupByDisplayNameAndDomainUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupByDisplayNameAndDomainUsingGETOK, error)

	GetGroupByIDUsingGET(params *GetGroupByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupByIDUsingGETOK, error)

	GetGroupByProviderIdentifierUsingGET(params *GetGroupByProviderIdentifierUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupByProviderIdentifierUsingGETOK, error)

	GetGroupsByDisplayNameUsingGET(params *GetGroupsByDisplayNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupsByDisplayNameUsingGETOK, error)

	GetGroupsByTypeUsingGET(params *GetGroupsByTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupsByTypeUsingGETOK, error)

	UpdateGroupByIDUsingPATCH(params *UpdateGroupByIDUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGroupByIDUsingPATCHOK, *UpdateGroupByIDUsingPATCHNoContent, error)

	UpdateGroupByIDUsingPUT(params *UpdateGroupByIDUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGroupByIDUsingPUTOK, *UpdateGroupByIDUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateGroupUsingPOST creates group
*/
func (a *Client) CreateGroupUsingPOST(params *CreateGroupUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGroupUsingPOSTOK, *CreateGroupUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGroupUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGroupUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateGroupUsingPOSTOK:
		return value, nil, nil
	case *CreateGroupUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAllGroupsUsingDELETE deletes all groups
*/
func (a *Client) DeleteAllGroupsUsingDELETE(params *DeleteAllGroupsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllGroupsUsingDELETEOK, *DeleteAllGroupsUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllGroupsUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllGroupsUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllGroupsUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAllGroupsUsingDELETEOK:
		return value, nil, nil
	case *DeleteAllGroupsUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGroupByIDUsingDELETE deletes group by Id
*/
func (a *Client) DeleteGroupByIDUsingDELETE(params *DeleteGroupByIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupByIDUsingDELETEOK, *DeleteGroupByIDUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupByIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGroupByIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/groups/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGroupByIDUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteGroupByIDUsingDELETEOK:
		return value, nil, nil
	case *DeleteGroupByIDUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllGroupsUsingGET gets all groups
*/
func (a *Client) GetAllGroupsUsingGET(params *GetAllGroupsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllGroupsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllGroupsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllGroupsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllGroupsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllGroupsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllGroupsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupByDisplayNameAndDomainUsingGET gets group by display name and domain
*/
func (a *Client) GetGroupByDisplayNameAndDomainUsingGET(params *GetGroupByDisplayNameAndDomainUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupByDisplayNameAndDomainUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupByDisplayNameAndDomainUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupByDisplayNameAndDomainUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/groups/name/{displayname}/domain/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupByDisplayNameAndDomainUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupByDisplayNameAndDomainUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupByDisplayNameAndDomainUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupByIDUsingGET gets group by Id
*/
func (a *Client) GetGroupByIDUsingGET(params *GetGroupByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/groups/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupByIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupByProviderIdentifierUsingGET gets group by provider identifier
*/
func (a *Client) GetGroupByProviderIdentifierUsingGET(params *GetGroupByProviderIdentifierUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupByProviderIdentifierUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupByProviderIdentifierUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupByProviderIdentifierUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/groups/providerId/{providerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupByProviderIdentifierUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupByProviderIdentifierUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupByProviderIdentifierUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupsByDisplayNameUsingGET gets groups by display name
*/
func (a *Client) GetGroupsByDisplayNameUsingGET(params *GetGroupsByDisplayNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupsByDisplayNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsByDisplayNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupsByDisplayNameUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/groups/name/{displayname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupsByDisplayNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupsByDisplayNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupsByDisplayNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupsByTypeUsingGET gets groups by type
*/
func (a *Client) GetGroupsByTypeUsingGET(params *GetGroupsByTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupsByTypeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsByTypeUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupsByTypeUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/groups/type/{groupType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupsByTypeUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupsByTypeUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupsByTypeUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGroupByIDUsingPATCH updates group by Id
*/
func (a *Client) UpdateGroupByIDUsingPATCH(params *UpdateGroupByIDUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGroupByIDUsingPATCHOK, *UpdateGroupByIDUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupByIDUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateGroupByIdUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/lcm/authzn/api/groups/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGroupByIDUsingPATCHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateGroupByIDUsingPATCHOK:
		return value, nil, nil
	case *UpdateGroupByIDUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGroupByIDUsingPUT updates group by Id
*/
func (a *Client) UpdateGroupByIDUsingPUT(params *UpdateGroupByIDUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGroupByIDUsingPUTOK, *UpdateGroupByIDUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupByIDUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateGroupByIdUsingPUT",
		Method:             "PUT",
		PathPattern:        "/lcm/authzn/api/groups/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGroupByIDUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateGroupByIDUsingPUTOK:
		return value, nil, nil
	case *UpdateGroupByIDUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
