// Code generated by go-swagger; DO NOT EDIT.

package authentication_group_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetAllGroupsUsingGETReader is a Reader for the GetAllGroupsUsingGET structure.
type GetAllGroupsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllGroupsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllGroupsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllGroupsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllGroupsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllGroupsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllGroupsUsingGETOK creates a GetAllGroupsUsingGETOK with default headers values
func NewGetAllGroupsUsingGETOK() *GetAllGroupsUsingGETOK {
	return &GetAllGroupsUsingGETOK{}
}

/*GetAllGroupsUsingGETOK handles this case with default header values.

OK
*/
type GetAllGroupsUsingGETOK struct {
	Payload interface{}
}

func (o *GetAllGroupsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /lcm/authzn/api/groups][%d] getAllGroupsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllGroupsUsingGETOK) GetPayload() interface{} {
	return o.Payload
}

func (o *GetAllGroupsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllGroupsUsingGETUnauthorized creates a GetAllGroupsUsingGETUnauthorized with default headers values
func NewGetAllGroupsUsingGETUnauthorized() *GetAllGroupsUsingGETUnauthorized {
	return &GetAllGroupsUsingGETUnauthorized{}
}

/*GetAllGroupsUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetAllGroupsUsingGETUnauthorized struct {
}

func (o *GetAllGroupsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /lcm/authzn/api/groups][%d] getAllGroupsUsingGETUnauthorized ", 401)
}

func (o *GetAllGroupsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllGroupsUsingGETForbidden creates a GetAllGroupsUsingGETForbidden with default headers values
func NewGetAllGroupsUsingGETForbidden() *GetAllGroupsUsingGETForbidden {
	return &GetAllGroupsUsingGETForbidden{}
}

/*GetAllGroupsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetAllGroupsUsingGETForbidden struct {
}

func (o *GetAllGroupsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /lcm/authzn/api/groups][%d] getAllGroupsUsingGETForbidden ", 403)
}

func (o *GetAllGroupsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllGroupsUsingGETNotFound creates a GetAllGroupsUsingGETNotFound with default headers values
func NewGetAllGroupsUsingGETNotFound() *GetAllGroupsUsingGETNotFound {
	return &GetAllGroupsUsingGETNotFound{}
}

/*GetAllGroupsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetAllGroupsUsingGETNotFound struct {
}

func (o *GetAllGroupsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /lcm/authzn/api/groups][%d] getAllGroupsUsingGETNotFound ", 404)
}

func (o *GetAllGroupsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
