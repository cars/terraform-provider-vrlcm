// Code generated by go-swagger; DO NOT EDIT.

package authentication_user_role_mapping_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authentication user role mapping a p is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authentication user role mapping a p is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BulkImportUserRoleMappingUsingPOST(params *BulkImportUserRoleMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*BulkImportUserRoleMappingUsingPOSTOK, *BulkImportUserRoleMappingUsingPOSTCreated, error)

	CreateUserRoleMappingUsingPOST(params *CreateUserRoleMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserRoleMappingUsingPOSTOK, *CreateUserRoleMappingUsingPOSTCreated, error)

	DeleteAllUserRoleMappingsUsingDELETE(params *DeleteAllUserRoleMappingsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUserRoleMappingsUsingDELETEOK, *DeleteAllUserRoleMappingsUsingDELETENoContent, error)

	DeleteUserMappingGivenRoleIDUsingDELETE(params *DeleteUserMappingGivenRoleIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserMappingGivenRoleIDUsingDELETEOK, *DeleteUserMappingGivenRoleIDUsingDELETENoContent, error)

	DeleteUserMappingGivenUserIDUsingDELETE(params *DeleteUserMappingGivenUserIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserMappingGivenUserIDUsingDELETEOK, *DeleteUserMappingGivenUserIDUsingDELETENoContent, error)

	DeleteUserMappingGivenVmidUsingDELETE(params *DeleteUserMappingGivenVmidUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserMappingGivenVmidUsingDELETEOK, *DeleteUserMappingGivenVmidUsingDELETENoContent, error)

	GetAllUserRoleMappingsUsingGET(params *GetAllUserRoleMappingsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllUserRoleMappingsUsingGETOK, error)

	GetUserRoleMappingByIDUsingGET(params *GetUserRoleMappingByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRoleMappingByIDUsingGETOK, error)

	GetUserRoleMappingGivenRoleIDUsingGET(params *GetUserRoleMappingGivenRoleIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRoleMappingGivenRoleIDUsingGETOK, error)

	GetUserRoleMappingGivenUserIDUsingGET(params *GetUserRoleMappingGivenUserIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRoleMappingGivenUserIDUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkImportUserRoleMappingUsingPOST bulks import user role mapping
*/
func (a *Client) BulkImportUserRoleMappingUsingPOST(params *BulkImportUserRoleMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*BulkImportUserRoleMappingUsingPOSTOK, *BulkImportUserRoleMappingUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkImportUserRoleMappingUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkImportUserRoleMappingUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/userrolemapping/bulkimport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkImportUserRoleMappingUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BulkImportUserRoleMappingUsingPOSTOK:
		return value, nil, nil
	case *BulkImportUserRoleMappingUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUserRoleMappingUsingPOST creates user role mapping
*/
func (a *Client) CreateUserRoleMappingUsingPOST(params *CreateUserRoleMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserRoleMappingUsingPOSTOK, *CreateUserRoleMappingUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserRoleMappingUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserRoleMappingUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/userrolemapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserRoleMappingUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateUserRoleMappingUsingPOSTOK:
		return value, nil, nil
	case *CreateUserRoleMappingUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAllUserRoleMappingsUsingDELETE deletes all user role mappings
*/
func (a *Client) DeleteAllUserRoleMappingsUsingDELETE(params *DeleteAllUserRoleMappingsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUserRoleMappingsUsingDELETEOK, *DeleteAllUserRoleMappingsUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllUserRoleMappingsUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllUserRoleMappingsUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/userrolemapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllUserRoleMappingsUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAllUserRoleMappingsUsingDELETEOK:
		return value, nil, nil
	case *DeleteAllUserRoleMappingsUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserMappingGivenRoleIDUsingDELETE deletes user mapping given role Id
*/
func (a *Client) DeleteUserMappingGivenRoleIDUsingDELETE(params *DeleteUserMappingGivenRoleIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserMappingGivenRoleIDUsingDELETEOK, *DeleteUserMappingGivenRoleIDUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserMappingGivenRoleIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserMappingGivenRoleIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/userrolemapping/roleId/{rolevmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserMappingGivenRoleIDUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUserMappingGivenRoleIDUsingDELETEOK:
		return value, nil, nil
	case *DeleteUserMappingGivenRoleIDUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserMappingGivenUserIDUsingDELETE deletes user mapping given user Id
*/
func (a *Client) DeleteUserMappingGivenUserIDUsingDELETE(params *DeleteUserMappingGivenUserIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserMappingGivenUserIDUsingDELETEOK, *DeleteUserMappingGivenUserIDUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserMappingGivenUserIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserMappingGivenUserIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/userrolemapping/userId/{uservmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserMappingGivenUserIDUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUserMappingGivenUserIDUsingDELETEOK:
		return value, nil, nil
	case *DeleteUserMappingGivenUserIDUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserMappingGivenVmidUsingDELETE deletes user mapping given vmid
*/
func (a *Client) DeleteUserMappingGivenVmidUsingDELETE(params *DeleteUserMappingGivenVmidUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserMappingGivenVmidUsingDELETEOK, *DeleteUserMappingGivenVmidUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserMappingGivenVmidUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserMappingGivenVmidUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/userrolemapping/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserMappingGivenVmidUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUserMappingGivenVmidUsingDELETEOK:
		return value, nil, nil
	case *DeleteUserMappingGivenVmidUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUserRoleMappingsUsingGET gets all user role mappings
*/
func (a *Client) GetAllUserRoleMappingsUsingGET(params *GetAllUserRoleMappingsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllUserRoleMappingsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUserRoleMappingsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUserRoleMappingsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/userrolemapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUserRoleMappingsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUserRoleMappingsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUserRoleMappingsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserRoleMappingByIDUsingGET gets user role mapping by Id
*/
func (a *Client) GetUserRoleMappingByIDUsingGET(params *GetUserRoleMappingByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRoleMappingByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRoleMappingByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoleMappingByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/userrolemapping/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserRoleMappingByIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRoleMappingByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserRoleMappingByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserRoleMappingGivenRoleIDUsingGET gets user role mapping given role Id
*/
func (a *Client) GetUserRoleMappingGivenRoleIDUsingGET(params *GetUserRoleMappingGivenRoleIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRoleMappingGivenRoleIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRoleMappingGivenRoleIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoleMappingGivenRoleIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/userrolemapping/roleId/{rolevmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserRoleMappingGivenRoleIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRoleMappingGivenRoleIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserRoleMappingGivenRoleIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserRoleMappingGivenUserIDUsingGET gets user role mapping given user Id
*/
func (a *Client) GetUserRoleMappingGivenUserIDUsingGET(params *GetUserRoleMappingGivenUserIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserRoleMappingGivenUserIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRoleMappingGivenUserIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserRoleMappingGivenUserIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/userrolemapping/userId/{uservmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserRoleMappingGivenUserIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRoleMappingGivenUserIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserRoleMappingGivenUserIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
