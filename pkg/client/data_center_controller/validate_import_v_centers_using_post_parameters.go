// Code generated by go-swagger; DO NOT EDIT.

package data_center_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewValidateImportVCentersUsingPOSTParams creates a new ValidateImportVCentersUsingPOSTParams object
// with the default values initialized.
func NewValidateImportVCentersUsingPOSTParams() *ValidateImportVCentersUsingPOSTParams {
	var (
		validateDefault = bool(true)
	)
	return &ValidateImportVCentersUsingPOSTParams{
		Validate: &validateDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewValidateImportVCentersUsingPOSTParamsWithTimeout creates a new ValidateImportVCentersUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewValidateImportVCentersUsingPOSTParamsWithTimeout(timeout time.Duration) *ValidateImportVCentersUsingPOSTParams {
	var (
		validateDefault = bool(true)
	)
	return &ValidateImportVCentersUsingPOSTParams{
		Validate: &validateDefault,

		timeout: timeout,
	}
}

// NewValidateImportVCentersUsingPOSTParamsWithContext creates a new ValidateImportVCentersUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewValidateImportVCentersUsingPOSTParamsWithContext(ctx context.Context) *ValidateImportVCentersUsingPOSTParams {
	var (
		validateDefault = bool(true)
	)
	return &ValidateImportVCentersUsingPOSTParams{
		Validate: &validateDefault,

		Context: ctx,
	}
}

// NewValidateImportVCentersUsingPOSTParamsWithHTTPClient creates a new ValidateImportVCentersUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewValidateImportVCentersUsingPOSTParamsWithHTTPClient(client *http.Client) *ValidateImportVCentersUsingPOSTParams {
	var (
		validateDefault = bool(true)
	)
	return &ValidateImportVCentersUsingPOSTParams{
		Validate:   &validateDefault,
		HTTPClient: client,
	}
}

/*ValidateImportVCentersUsingPOSTParams contains all the parameters to send to the API endpoint
for the validate import v centers using p o s t operation typically these are written to a http.Request
*/
type ValidateImportVCentersUsingPOSTParams struct {

	/*DataCenterName
	  dataCenterName

	*/
	DataCenterName string
	/*RegionName
	  regionName

	*/
	RegionName string
	/*Validate
	  validate

	*/
	Validate *bool
	/*VcenterImportFile
	  vcenterImportFile

	*/
	VcenterImportFile runtime.NamedReadCloser
	/*ZoneName
	  zoneName

	*/
	ZoneName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) WithTimeout(timeout time.Duration) *ValidateImportVCentersUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) WithContext(ctx context.Context) *ValidateImportVCentersUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) WithHTTPClient(client *http.Client) *ValidateImportVCentersUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDataCenterName adds the dataCenterName to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) WithDataCenterName(dataCenterName string) *ValidateImportVCentersUsingPOSTParams {
	o.SetDataCenterName(dataCenterName)
	return o
}

// SetDataCenterName adds the dataCenterName to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) SetDataCenterName(dataCenterName string) {
	o.DataCenterName = dataCenterName
}

// WithRegionName adds the regionName to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) WithRegionName(regionName string) *ValidateImportVCentersUsingPOSTParams {
	o.SetRegionName(regionName)
	return o
}

// SetRegionName adds the regionName to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) SetRegionName(regionName string) {
	o.RegionName = regionName
}

// WithValidate adds the validate to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) WithValidate(validate *bool) *ValidateImportVCentersUsingPOSTParams {
	o.SetValidate(validate)
	return o
}

// SetValidate adds the validate to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) SetValidate(validate *bool) {
	o.Validate = validate
}

// WithVcenterImportFile adds the vcenterImportFile to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) WithVcenterImportFile(vcenterImportFile runtime.NamedReadCloser) *ValidateImportVCentersUsingPOSTParams {
	o.SetVcenterImportFile(vcenterImportFile)
	return o
}

// SetVcenterImportFile adds the vcenterImportFile to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) SetVcenterImportFile(vcenterImportFile runtime.NamedReadCloser) {
	o.VcenterImportFile = vcenterImportFile
}

// WithZoneName adds the zoneName to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) WithZoneName(zoneName string) *ValidateImportVCentersUsingPOSTParams {
	o.SetZoneName(zoneName)
	return o
}

// SetZoneName adds the zoneName to the validate import v centers using p o s t params
func (o *ValidateImportVCentersUsingPOSTParams) SetZoneName(zoneName string) {
	o.ZoneName = zoneName
}

// WriteToRequest writes these params to a swagger request
func (o *ValidateImportVCentersUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param dataCenterName
	if err := r.SetPathParam("dataCenterName", o.DataCenterName); err != nil {
		return err
	}

	// path param regionName
	if err := r.SetPathParam("regionName", o.RegionName); err != nil {
		return err
	}

	if o.Validate != nil {

		// query param validate
		var qrValidate bool
		if o.Validate != nil {
			qrValidate = *o.Validate
		}
		qValidate := swag.FormatBool(qrValidate)
		if qValidate != "" {
			if err := r.SetQueryParam("validate", qValidate); err != nil {
				return err
			}
		}

	}

	// form file param vcenterImportFile
	if err := r.SetFileParam("vcenterImportFile", o.VcenterImportFile); err != nil {
		return err
	}

	// path param zoneName
	if err := r.SetPathParam("zoneName", o.ZoneName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
