// Code generated by go-swagger; DO NOT EDIT.

package authentication_user_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteUserByIDUsingDELETEParams creates a new DeleteUserByIDUsingDELETEParams object
// with the default values initialized.
func NewDeleteUserByIDUsingDELETEParams() *DeleteUserByIDUsingDELETEParams {
	var ()
	return &DeleteUserByIDUsingDELETEParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteUserByIDUsingDELETEParamsWithTimeout creates a new DeleteUserByIDUsingDELETEParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteUserByIDUsingDELETEParamsWithTimeout(timeout time.Duration) *DeleteUserByIDUsingDELETEParams {
	var ()
	return &DeleteUserByIDUsingDELETEParams{

		timeout: timeout,
	}
}

// NewDeleteUserByIDUsingDELETEParamsWithContext creates a new DeleteUserByIDUsingDELETEParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteUserByIDUsingDELETEParamsWithContext(ctx context.Context) *DeleteUserByIDUsingDELETEParams {
	var ()
	return &DeleteUserByIDUsingDELETEParams{

		Context: ctx,
	}
}

// NewDeleteUserByIDUsingDELETEParamsWithHTTPClient creates a new DeleteUserByIDUsingDELETEParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteUserByIDUsingDELETEParamsWithHTTPClient(client *http.Client) *DeleteUserByIDUsingDELETEParams {
	var ()
	return &DeleteUserByIDUsingDELETEParams{
		HTTPClient: client,
	}
}

/*DeleteUserByIDUsingDELETEParams contains all the parameters to send to the API endpoint
for the delete user by Id using d e l e t e operation typically these are written to a http.Request
*/
type DeleteUserByIDUsingDELETEParams struct {

	/*Vmid
	  vmid

	*/
	Vmid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete user by Id using d e l e t e params
func (o *DeleteUserByIDUsingDELETEParams) WithTimeout(timeout time.Duration) *DeleteUserByIDUsingDELETEParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete user by Id using d e l e t e params
func (o *DeleteUserByIDUsingDELETEParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete user by Id using d e l e t e params
func (o *DeleteUserByIDUsingDELETEParams) WithContext(ctx context.Context) *DeleteUserByIDUsingDELETEParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete user by Id using d e l e t e params
func (o *DeleteUserByIDUsingDELETEParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete user by Id using d e l e t e params
func (o *DeleteUserByIDUsingDELETEParams) WithHTTPClient(client *http.Client) *DeleteUserByIDUsingDELETEParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete user by Id using d e l e t e params
func (o *DeleteUserByIDUsingDELETEParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithVmid adds the vmid to the delete user by Id using d e l e t e params
func (o *DeleteUserByIDUsingDELETEParams) WithVmid(vmid string) *DeleteUserByIDUsingDELETEParams {
	o.SetVmid(vmid)
	return o
}

// SetVmid adds the vmid to the delete user by Id using d e l e t e params
func (o *DeleteUserByIDUsingDELETEParams) SetVmid(vmid string) {
	o.Vmid = vmid
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteUserByIDUsingDELETEParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param vmid
	if err := r.SetPathParam("vmid", o.Vmid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
