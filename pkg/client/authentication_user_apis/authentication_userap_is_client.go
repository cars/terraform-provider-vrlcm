// Code generated by go-swagger; DO NOT EDIT.

package authentication_user_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authentication user a p is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authentication user a p is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUserUsingPOST(params *CreateUserUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserUsingPOSTOK, *CreateUserUsingPOSTCreated, error)

	DeleteAllUsersUsingDELETE(params *DeleteAllUsersUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUsersUsingDELETEOK, *DeleteAllUsersUsingDELETENoContent, error)

	DeleteUserByIDUsingDELETE(params *DeleteUserByIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserByIDUsingDELETEOK, *DeleteUserByIDUsingDELETENoContent, error)

	FirstbootUpdateAdminPasswordUsingPUT(params *FirstbootUpdateAdminPasswordUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*FirstbootUpdateAdminPasswordUsingPUTOK, *FirstbootUpdateAdminPasswordUsingPUTCreated, error)

	GetAllProviderMappedUsersUsingGET(params *GetAllProviderMappedUsersUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllProviderMappedUsersUsingGETOK, error)

	GetAllUsersUsingGET(params *GetAllUsersUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllUsersUsingGETOK, error)

	GetUserByIDUsingGET(params *GetUserByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserByIDUsingGETOK, error)

	GetUserByProviderIdentifierUsingGET(params *GetUserByProviderIdentifierUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserByProviderIdentifierUsingGETOK, error)

	GetUsersByNameUsingGET(params *GetUsersByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersByNameUsingGETOK, error)

	GetUsersByPrincipalNameAndDomainUsingGET(params *GetUsersByPrincipalNameAndDomainUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersByPrincipalNameAndDomainUsingGETOK, error)

	GetUsersByPrincipalNameUsingGET(params *GetUsersByPrincipalNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersByPrincipalNameUsingGETOK, error)

	GetUsersByTypeUsingGET(params *GetUsersByTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersByTypeUsingGETOK, error)

	GetUsersByUserNameAndDomainUsingGET(params *GetUsersByUserNameAndDomainUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersByUserNameAndDomainUsingGETOK, error)

	InitializeLcmLocalUsersUsingPOST(params *InitializeLcmLocalUsersUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*InitializeLcmLocalUsersUsingPOSTOK, *InitializeLcmLocalUsersUsingPOSTCreated, error)

	SearchVidmUserGrpUsingPOST(params *SearchVidmUserGrpUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SearchVidmUserGrpUsingPOSTOK, *SearchVidmUserGrpUsingPOSTCreated, error)

	UpdateLocalUserPasswordUsingPUT(params *UpdateLocalUserPasswordUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLocalUserPasswordUsingPUTOK, *UpdateLocalUserPasswordUsingPUTCreated, error)

	UpdateUserByIDUsingPATCH(params *UpdateUserByIDUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserByIDUsingPATCHOK, *UpdateUserByIDUsingPATCHNoContent, error)

	UpdateUserByIDUsingPUT(params *UpdateUserByIDUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserByIDUsingPUTOK, *UpdateUserByIDUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUserUsingPOST creates user
*/
func (a *Client) CreateUserUsingPOST(params *CreateUserUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserUsingPOSTOK, *CreateUserUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUserUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateUserUsingPOSTOK:
		return value, nil, nil
	case *CreateUserUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAllUsersUsingDELETE deletes all users
*/
func (a *Client) DeleteAllUsersUsingDELETE(params *DeleteAllUsersUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUsersUsingDELETEOK, *DeleteAllUsersUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllUsersUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllUsersUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllUsersUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAllUsersUsingDELETEOK:
		return value, nil, nil
	case *DeleteAllUsersUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserByIDUsingDELETE deletes user by Id
*/
func (a *Client) DeleteUserByIDUsingDELETE(params *DeleteUserByIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserByIDUsingDELETEOK, *DeleteUserByIDUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserByIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUserByIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/users/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserByIDUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUserByIDUsingDELETEOK:
		return value, nil, nil
	case *DeleteUserByIDUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FirstbootUpdateAdminPasswordUsingPUT firstboots update admin password
*/
func (a *Client) FirstbootUpdateAdminPasswordUsingPUT(params *FirstbootUpdateAdminPasswordUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*FirstbootUpdateAdminPasswordUsingPUTOK, *FirstbootUpdateAdminPasswordUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFirstbootUpdateAdminPasswordUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "firstbootUpdateAdminPasswordUsingPUT",
		Method:             "PUT",
		PathPattern:        "/lcm/authzn/api/firstboot/updatepassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FirstbootUpdateAdminPasswordUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *FirstbootUpdateAdminPasswordUsingPUTOK:
		return value, nil, nil
	case *FirstbootUpdateAdminPasswordUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllProviderMappedUsersUsingGET gets all provider mapped users
*/
func (a *Client) GetAllProviderMappedUsersUsingGET(params *GetAllProviderMappedUsersUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllProviderMappedUsersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllProviderMappedUsersUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllProviderMappedUsersUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/users/fromprovider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllProviderMappedUsersUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllProviderMappedUsersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllProviderMappedUsersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsersUsingGET gets all users
*/
func (a *Client) GetAllUsersUsingGET(params *GetAllUsersUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllUsersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsersUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUsersUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUsersUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserByIDUsingGET gets user by Id
*/
func (a *Client) GetUserByIDUsingGET(params *GetUserByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/users/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserByIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserByProviderIdentifierUsingGET gets user by provider identifier
*/
func (a *Client) GetUserByProviderIdentifierUsingGET(params *GetUserByProviderIdentifierUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserByProviderIdentifierUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserByProviderIdentifierUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserByProviderIdentifierUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/users/providerId/{providerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserByProviderIdentifierUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserByProviderIdentifierUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserByProviderIdentifierUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersByNameUsingGET gets users by name
*/
func (a *Client) GetUsersByNameUsingGET(params *GetUsersByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersByNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/users/name/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersByNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsersByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersByPrincipalNameAndDomainUsingGET gets users by principal name and domain
*/
func (a *Client) GetUsersByPrincipalNameAndDomainUsingGET(params *GetUsersByPrincipalNameAndDomainUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersByPrincipalNameAndDomainUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersByPrincipalNameAndDomainUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersByPrincipalNameAndDomainUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/users/upn/{upn}/domain/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersByPrincipalNameAndDomainUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersByPrincipalNameAndDomainUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsersByPrincipalNameAndDomainUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersByPrincipalNameUsingGET gets users by principal name
*/
func (a *Client) GetUsersByPrincipalNameUsingGET(params *GetUsersByPrincipalNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersByPrincipalNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersByPrincipalNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersByPrincipalNameUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/users/upn/{upn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersByPrincipalNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersByPrincipalNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsersByPrincipalNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersByTypeUsingGET gets users by type
*/
func (a *Client) GetUsersByTypeUsingGET(params *GetUsersByTypeUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersByTypeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersByTypeUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersByTypeUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/users/type/{userType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersByTypeUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersByTypeUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsersByTypeUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersByUserNameAndDomainUsingGET gets users by user name and domain
*/
func (a *Client) GetUsersByUserNameAndDomainUsingGET(params *GetUsersByUserNameAndDomainUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersByUserNameAndDomainUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersByUserNameAndDomainUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersByUserNameAndDomainUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/users/name/{username}/domain/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersByUserNameAndDomainUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersByUserNameAndDomainUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsersByUserNameAndDomainUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InitializeLcmLocalUsersUsingPOST initializes lcm local users
*/
func (a *Client) InitializeLcmLocalUsersUsingPOST(params *InitializeLcmLocalUsersUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*InitializeLcmLocalUsersUsingPOSTOK, *InitializeLcmLocalUsersUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitializeLcmLocalUsersUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initializeLcmLocalUsersUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/users/initializeLocalUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InitializeLcmLocalUsersUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InitializeLcmLocalUsersUsingPOSTOK:
		return value, nil, nil
	case *InitializeLcmLocalUsersUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchVidmUserGrpUsingPOST searches vidm user grp
*/
func (a *Client) SearchVidmUserGrpUsingPOST(params *SearchVidmUserGrpUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SearchVidmUserGrpUsingPOSTOK, *SearchVidmUserGrpUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchVidmUserGrpUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchVidmUserGrpUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/searchvidmusergrp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchVidmUserGrpUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SearchVidmUserGrpUsingPOSTOK:
		return value, nil, nil
	case *SearchVidmUserGrpUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateLocalUserPasswordUsingPUT updates local user password
*/
func (a *Client) UpdateLocalUserPasswordUsingPUT(params *UpdateLocalUserPasswordUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLocalUserPasswordUsingPUTOK, *UpdateLocalUserPasswordUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLocalUserPasswordUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLocalUserPasswordUsingPUT",
		Method:             "PUT",
		PathPattern:        "/lcm/authzn/api/users/updatepassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLocalUserPasswordUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateLocalUserPasswordUsingPUTOK:
		return value, nil, nil
	case *UpdateLocalUserPasswordUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserByIDUsingPATCH updates user by Id
*/
func (a *Client) UpdateUserByIDUsingPATCH(params *UpdateUserByIDUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserByIDUsingPATCHOK, *UpdateUserByIDUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserByIDUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserByIdUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/lcm/authzn/api/users/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserByIDUsingPATCHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUserByIDUsingPATCHOK:
		return value, nil, nil
	case *UpdateUserByIDUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserByIDUsingPUT updates user by Id
*/
func (a *Client) UpdateUserByIDUsingPUT(params *UpdateUserByIDUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserByIDUsingPUTOK, *UpdateUserByIDUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserByIDUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUserByIdUsingPUT",
		Method:             "PUT",
		PathPattern:        "/lcm/authzn/api/users/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserByIDUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUserByIDUsingPUTOK:
		return value, nil, nil
	case *UpdateUserByIDUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_user_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
