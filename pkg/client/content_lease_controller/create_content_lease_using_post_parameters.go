// Code generated by go-swagger; DO NOT EDIT.

package content_lease_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// NewCreateContentLeaseUsingPOSTParams creates a new CreateContentLeaseUsingPOSTParams object
// with the default values initialized.
func NewCreateContentLeaseUsingPOSTParams() *CreateContentLeaseUsingPOSTParams {
	var ()
	return &CreateContentLeaseUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateContentLeaseUsingPOSTParamsWithTimeout creates a new CreateContentLeaseUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateContentLeaseUsingPOSTParamsWithTimeout(timeout time.Duration) *CreateContentLeaseUsingPOSTParams {
	var ()
	return &CreateContentLeaseUsingPOSTParams{

		timeout: timeout,
	}
}

// NewCreateContentLeaseUsingPOSTParamsWithContext creates a new CreateContentLeaseUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateContentLeaseUsingPOSTParamsWithContext(ctx context.Context) *CreateContentLeaseUsingPOSTParams {
	var ()
	return &CreateContentLeaseUsingPOSTParams{

		Context: ctx,
	}
}

// NewCreateContentLeaseUsingPOSTParamsWithHTTPClient creates a new CreateContentLeaseUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateContentLeaseUsingPOSTParamsWithHTTPClient(client *http.Client) *CreateContentLeaseUsingPOSTParams {
	var ()
	return &CreateContentLeaseUsingPOSTParams{
		HTTPClient: client,
	}
}

/*CreateContentLeaseUsingPOSTParams contains all the parameters to send to the API endpoint
for the create content lease using p o s t operation typically these are written to a http.Request
*/
type CreateContentLeaseUsingPOSTParams struct {

	/*ContentLeaseDto
	  contentLeaseDto

	*/
	ContentLeaseDto *models.ContentLeaseDTO

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create content lease using p o s t params
func (o *CreateContentLeaseUsingPOSTParams) WithTimeout(timeout time.Duration) *CreateContentLeaseUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create content lease using p o s t params
func (o *CreateContentLeaseUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create content lease using p o s t params
func (o *CreateContentLeaseUsingPOSTParams) WithContext(ctx context.Context) *CreateContentLeaseUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create content lease using p o s t params
func (o *CreateContentLeaseUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create content lease using p o s t params
func (o *CreateContentLeaseUsingPOSTParams) WithHTTPClient(client *http.Client) *CreateContentLeaseUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create content lease using p o s t params
func (o *CreateContentLeaseUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentLeaseDto adds the contentLeaseDto to the create content lease using p o s t params
func (o *CreateContentLeaseUsingPOSTParams) WithContentLeaseDto(contentLeaseDto *models.ContentLeaseDTO) *CreateContentLeaseUsingPOSTParams {
	o.SetContentLeaseDto(contentLeaseDto)
	return o
}

// SetContentLeaseDto adds the contentLeaseDto to the create content lease using p o s t params
func (o *CreateContentLeaseUsingPOSTParams) SetContentLeaseDto(contentLeaseDto *models.ContentLeaseDTO) {
	o.ContentLeaseDto = contentLeaseDto
}

// WriteToRequest writes these params to a swagger request
func (o *CreateContentLeaseUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContentLeaseDto != nil {
		if err := r.SetBodyParam(o.ContentLeaseDto); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
