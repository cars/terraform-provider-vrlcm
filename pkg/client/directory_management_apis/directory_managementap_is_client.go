// Code generated by go-swagger; DO NOT EDIT.

package directory_management_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new directory management a p is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for directory management a p is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUpdateDirectoryConfigUsingPOST(params *CreateUpdateDirectoryConfigUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUpdateDirectoryConfigUsingPOSTOK, *CreateUpdateDirectoryConfigUsingPOSTCreated, error)

	DeleteDirectoryUsingPOST(params *DeleteDirectoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDirectoryUsingPOSTOK, *DeleteDirectoryUsingPOSTCreated, error)

	FetchDirGroupsFromDNsUsingPOST(params *FetchDirGroupsFromDNsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*FetchDirGroupsFromDNsUsingPOSTOK, *FetchDirGroupsFromDNsUsingPOSTCreated, error)

	GetAllConnectorsUsingPOST(params *GetAllConnectorsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllConnectorsUsingPOSTOK, *GetAllConnectorsUsingPOSTCreated, error)

	GetAllDirectoriesUsingPOST(params *GetAllDirectoriesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllDirectoriesUsingPOSTOK, *GetAllDirectoriesUsingPOSTCreated, error)

	GetDirectoryDetailsUsingPOST(params *GetDirectoryDetailsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetDirectoryDetailsUsingPOSTOK, *GetDirectoryDetailsUsingPOSTCreated, error)

	GetDirectorySyncExecutionAlertsUsingPOST(params *GetDirectorySyncExecutionAlertsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetDirectorySyncExecutionAlertsUsingPOSTOK, *GetDirectorySyncExecutionAlertsUsingPOSTCreated, error)

	GetDirectorySyncExecutionsUsingPOST(params *GetDirectorySyncExecutionsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetDirectorySyncExecutionsUsingPOSTOK, *GetDirectorySyncExecutionsUsingPOSTCreated, error)

	GetVidmUserAttributeDefinitionsUsingPOST(params *GetVidmUserAttributeDefinitionsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetVidmUserAttributeDefinitionsUsingPOSTOK, *GetVidmUserAttributeDefinitionsUsingPOSTCreated, error)

	TestConnectionUsingPOST(params *TestConnectionUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*TestConnectionUsingPOSTOK, *TestConnectionUsingPOSTCreated, error)

	TriggerADSyncUsingPOST(params *TriggerADSyncUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*TriggerADSyncUsingPOSTOK, *TriggerADSyncUsingPOSTCreated, error)

	TriggerDryrunUsingPOST(params *TriggerDryrunUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*TriggerDryrunUsingPOSTOK, *TriggerDryrunUsingPOSTCreated, error)

	TriggerVidmClusterHealthCheckUsingGET(params *TriggerVidmClusterHealthCheckUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*TriggerVidmClusterHealthCheckUsingGETOK, error)

	UpdateADUserAttrMappingUsingPOST(params *UpdateADUserAttrMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateADUserAttrMappingUsingPOSTOK, *UpdateADUserAttrMappingUsingPOSTCreated, error)

	UpdateADUsersNGroupsUsingPOST(params *UpdateADUsersNGroupsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateADUsersNGroupsUsingPOSTOK, *UpdateADUsersNGroupsUsingPOSTCreated, error)

	UpdateDirectoryDomainsUsingPOST(params *UpdateDirectoryDomainsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDirectoryDomainsUsingPOSTOK, *UpdateDirectoryDomainsUsingPOSTCreated, error)

	UpdateVidmUserAttributeDefinitionsUsingPOST(params *UpdateVidmUserAttributeDefinitionsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVidmUserAttributeDefinitionsUsingPOSTOK, *UpdateVidmUserAttributeDefinitionsUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUpdateDirectoryConfigUsingPOST creates update directory config
*/
func (a *Client) CreateUpdateDirectoryConfigUsingPOST(params *CreateUpdateDirectoryConfigUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUpdateDirectoryConfigUsingPOSTOK, *CreateUpdateDirectoryConfigUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUpdateDirectoryConfigUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUpdateDirectoryConfigUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUpdateDirectoryConfigUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateUpdateDirectoryConfigUsingPOSTOK:
		return value, nil, nil
	case *CreateUpdateDirectoryConfigUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDirectoryUsingPOST deletes directory
*/
func (a *Client) DeleteDirectoryUsingPOST(params *DeleteDirectoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDirectoryUsingPOSTOK, *DeleteDirectoryUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDirectoryUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDirectoryUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDirectoryUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteDirectoryUsingPOSTOK:
		return value, nil, nil
	case *DeleteDirectoryUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FetchDirGroupsFromDNsUsingPOST fetches dir groups from d ns
*/
func (a *Client) FetchDirGroupsFromDNsUsingPOST(params *FetchDirGroupsFromDNsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*FetchDirGroupsFromDNsUsingPOSTOK, *FetchDirGroupsFromDNsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFetchDirGroupsFromDNsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fetchDirGroupsFromDNsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/searchgroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FetchDirGroupsFromDNsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *FetchDirGroupsFromDNsUsingPOSTOK:
		return value, nil, nil
	case *FetchDirGroupsFromDNsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllConnectorsUsingPOST gets all connectors
*/
func (a *Client) GetAllConnectorsUsingPOST(params *GetAllConnectorsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllConnectorsUsingPOSTOK, *GetAllConnectorsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllConnectorsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllConnectorsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllConnectorsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllConnectorsUsingPOSTOK:
		return value, nil, nil
	case *GetAllConnectorsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllDirectoriesUsingPOST gets all directories
*/
func (a *Client) GetAllDirectoriesUsingPOST(params *GetAllDirectoriesUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllDirectoriesUsingPOSTOK, *GetAllDirectoriesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDirectoriesUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllDirectoriesUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/getall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDirectoriesUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllDirectoriesUsingPOSTOK:
		return value, nil, nil
	case *GetAllDirectoriesUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDirectoryDetailsUsingPOST gets directory details
*/
func (a *Client) GetDirectoryDetailsUsingPOST(params *GetDirectoryDetailsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetDirectoryDetailsUsingPOSTOK, *GetDirectoryDetailsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDirectoryDetailsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDirectoryDetailsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDirectoryDetailsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDirectoryDetailsUsingPOSTOK:
		return value, nil, nil
	case *GetDirectoryDetailsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDirectorySyncExecutionAlertsUsingPOST gets directory sync execution alerts
*/
func (a *Client) GetDirectorySyncExecutionAlertsUsingPOST(params *GetDirectorySyncExecutionAlertsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetDirectorySyncExecutionAlertsUsingPOSTOK, *GetDirectorySyncExecutionAlertsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDirectorySyncExecutionAlertsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDirectorySyncExecutionAlertsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/get/syncexecalerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDirectorySyncExecutionAlertsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDirectorySyncExecutionAlertsUsingPOSTOK:
		return value, nil, nil
	case *GetDirectorySyncExecutionAlertsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDirectorySyncExecutionsUsingPOST gets directory sync executions
*/
func (a *Client) GetDirectorySyncExecutionsUsingPOST(params *GetDirectorySyncExecutionsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetDirectorySyncExecutionsUsingPOSTOK, *GetDirectorySyncExecutionsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDirectorySyncExecutionsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDirectorySyncExecutionsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/get/synclogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDirectorySyncExecutionsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetDirectorySyncExecutionsUsingPOSTOK:
		return value, nil, nil
	case *GetDirectorySyncExecutionsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVidmUserAttributeDefinitionsUsingPOST gets vidm user attribute definitions
*/
func (a *Client) GetVidmUserAttributeDefinitionsUsingPOST(params *GetVidmUserAttributeDefinitionsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetVidmUserAttributeDefinitionsUsingPOSTOK, *GetVidmUserAttributeDefinitionsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVidmUserAttributeDefinitionsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVidmUserAttributeDefinitionsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/userattrdefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVidmUserAttributeDefinitionsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetVidmUserAttributeDefinitionsUsingPOSTOK:
		return value, nil, nil
	case *GetVidmUserAttributeDefinitionsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TestConnectionUsingPOST tests connection
*/
func (a *Client) TestConnectionUsingPOST(params *TestConnectionUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*TestConnectionUsingPOSTOK, *TestConnectionUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestConnectionUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testConnectionUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestConnectionUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TestConnectionUsingPOSTOK:
		return value, nil, nil
	case *TestConnectionUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TriggerADSyncUsingPOST triggers a d sync
*/
func (a *Client) TriggerADSyncUsingPOST(params *TriggerADSyncUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*TriggerADSyncUsingPOSTOK, *TriggerADSyncUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerADSyncUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggerADSyncUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/syncprofile/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerADSyncUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TriggerADSyncUsingPOSTOK:
		return value, nil, nil
	case *TriggerADSyncUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TriggerDryrunUsingPOST triggers dryrun
*/
func (a *Client) TriggerDryrunUsingPOST(params *TriggerDryrunUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*TriggerDryrunUsingPOSTOK, *TriggerDryrunUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerDryrunUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggerDryrunUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/syncprofile/dryrun",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerDryrunUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TriggerDryrunUsingPOSTOK:
		return value, nil, nil
	case *TriggerDryrunUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TriggerVidmClusterHealthCheckUsingGET triggers vidm cluster health check
*/
func (a *Client) TriggerVidmClusterHealthCheckUsingGET(params *TriggerVidmClusterHealthCheckUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*TriggerVidmClusterHealthCheckUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerVidmClusterHealthCheckUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggerVidmClusterHealthCheckUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/vidmcluserhealth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerVidmClusterHealthCheckUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriggerVidmClusterHealthCheckUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for triggerVidmClusterHealthCheckUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateADUserAttrMappingUsingPOST updates a d user attr mapping
*/
func (a *Client) UpdateADUserAttrMappingUsingPOST(params *UpdateADUserAttrMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateADUserAttrMappingUsingPOSTOK, *UpdateADUserAttrMappingUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateADUserAttrMappingUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateADUserAttrMappingUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/userattrmappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateADUserAttrMappingUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateADUserAttrMappingUsingPOSTOK:
		return value, nil, nil
	case *UpdateADUserAttrMappingUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateADUsersNGroupsUsingPOST updates a d users n groups
*/
func (a *Client) UpdateADUsersNGroupsUsingPOST(params *UpdateADUsersNGroupsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateADUsersNGroupsUsingPOSTOK, *UpdateADUsersNGroupsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateADUsersNGroupsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateADUsersNGroupsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/syncprofile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateADUsersNGroupsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateADUsersNGroupsUsingPOSTOK:
		return value, nil, nil
	case *UpdateADUsersNGroupsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDirectoryDomainsUsingPOST updates directory domains
*/
func (a *Client) UpdateDirectoryDomainsUsingPOST(params *UpdateDirectoryDomainsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDirectoryDomainsUsingPOSTOK, *UpdateDirectoryDomainsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDirectoryDomainsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDirectoryDomainsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/dirConfigs/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDirectoryDomainsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateDirectoryDomainsUsingPOSTOK:
		return value, nil, nil
	case *UpdateDirectoryDomainsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVidmUserAttributeDefinitionsUsingPOST updates vidm user attribute definitions
*/
func (a *Client) UpdateVidmUserAttributeDefinitionsUsingPOST(params *UpdateVidmUserAttributeDefinitionsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVidmUserAttributeDefinitionsUsingPOSTOK, *UpdateVidmUserAttributeDefinitionsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVidmUserAttributeDefinitionsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVidmUserAttributeDefinitionsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/idp/userattrdefinitions/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVidmUserAttributeDefinitionsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateVidmUserAttributeDefinitionsUsingPOSTOK:
		return value, nil, nil
	case *UpdateVidmUserAttributeDefinitionsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directory_management_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
