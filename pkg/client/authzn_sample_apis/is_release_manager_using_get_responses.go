// Code generated by go-swagger; DO NOT EDIT.

package authzn_sample_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// IsReleaseManagerUsingGETReader is a Reader for the IsReleaseManagerUsingGET structure.
type IsReleaseManagerUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IsReleaseManagerUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIsReleaseManagerUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewIsReleaseManagerUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIsReleaseManagerUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIsReleaseManagerUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewIsReleaseManagerUsingGETOK creates a IsReleaseManagerUsingGETOK with default headers values
func NewIsReleaseManagerUsingGETOK() *IsReleaseManagerUsingGETOK {
	return &IsReleaseManagerUsingGETOK{}
}

/*IsReleaseManagerUsingGETOK handles this case with default header values.

OK
*/
type IsReleaseManagerUsingGETOK struct {
	Payload *models.AuthenticatedUserDTO
}

func (o *IsReleaseManagerUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /lcm/authzn/api/restricted/releasemanager][%d] isReleaseManagerUsingGETOK  %+v", 200, o.Payload)
}

func (o *IsReleaseManagerUsingGETOK) GetPayload() *models.AuthenticatedUserDTO {
	return o.Payload
}

func (o *IsReleaseManagerUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthenticatedUserDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsReleaseManagerUsingGETUnauthorized creates a IsReleaseManagerUsingGETUnauthorized with default headers values
func NewIsReleaseManagerUsingGETUnauthorized() *IsReleaseManagerUsingGETUnauthorized {
	return &IsReleaseManagerUsingGETUnauthorized{}
}

/*IsReleaseManagerUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type IsReleaseManagerUsingGETUnauthorized struct {
}

func (o *IsReleaseManagerUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /lcm/authzn/api/restricted/releasemanager][%d] isReleaseManagerUsingGETUnauthorized ", 401)
}

func (o *IsReleaseManagerUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIsReleaseManagerUsingGETForbidden creates a IsReleaseManagerUsingGETForbidden with default headers values
func NewIsReleaseManagerUsingGETForbidden() *IsReleaseManagerUsingGETForbidden {
	return &IsReleaseManagerUsingGETForbidden{}
}

/*IsReleaseManagerUsingGETForbidden handles this case with default header values.

Forbidden
*/
type IsReleaseManagerUsingGETForbidden struct {
}

func (o *IsReleaseManagerUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /lcm/authzn/api/restricted/releasemanager][%d] isReleaseManagerUsingGETForbidden ", 403)
}

func (o *IsReleaseManagerUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIsReleaseManagerUsingGETNotFound creates a IsReleaseManagerUsingGETNotFound with default headers values
func NewIsReleaseManagerUsingGETNotFound() *IsReleaseManagerUsingGETNotFound {
	return &IsReleaseManagerUsingGETNotFound{}
}

/*IsReleaseManagerUsingGETNotFound handles this case with default header values.

Not Found
*/
type IsReleaseManagerUsingGETNotFound struct {
}

func (o *IsReleaseManagerUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /lcm/authzn/api/restricted/releasemanager][%d] isReleaseManagerUsingGETNotFound ", 404)
}

func (o *IsReleaseManagerUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
