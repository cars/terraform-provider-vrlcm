// Code generated by go-swagger; DO NOT EDIT.

package authzn_sample_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authzn sample a p is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authzn sample a p is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	IsConfigAdminUsingGET(params *IsConfigAdminUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsConfigAdminUsingGETOK, error)

	IsContentDeveloperUsingGET(params *IsContentDeveloperUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsContentDeveloperUsingGETOK, error)

	IsLcmAdminUsingGET(params *IsLcmAdminUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsLcmAdminUsingGETOK, error)

	IsLcmServiceAdminUsingGET(params *IsLcmServiceAdminUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsLcmServiceAdminUsingGETOK, error)

	IsReleaseManagerUsingGET(params *IsReleaseManagerUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsReleaseManagerUsingGETOK, error)

	IsSupportUserUsingGET(params *IsSupportUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsSupportUserUsingGETOK, error)

	IsVcfUserUsingGET(params *IsVcfUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsVcfUserUsingGETOK, error)

	WhoAmIUsingGET(params *WhoAmIUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*WhoAmIUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  IsConfigAdminUsingGET is config admin
*/
func (a *Client) IsConfigAdminUsingGET(params *IsConfigAdminUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsConfigAdminUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsConfigAdminUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isConfigAdminUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/restricted/configadmin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsConfigAdminUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsConfigAdminUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isConfigAdminUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsContentDeveloperUsingGET is content developer
*/
func (a *Client) IsContentDeveloperUsingGET(params *IsContentDeveloperUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsContentDeveloperUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsContentDeveloperUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isContentDeveloperUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/restricted/contentdev",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsContentDeveloperUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsContentDeveloperUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isContentDeveloperUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsLcmAdminUsingGET is lcm admin
*/
func (a *Client) IsLcmAdminUsingGET(params *IsLcmAdminUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsLcmAdminUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsLcmAdminUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isLcmAdminUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/restricted/lcmadmin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsLcmAdminUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsLcmAdminUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isLcmAdminUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsLcmServiceAdminUsingGET is lcm service admin
*/
func (a *Client) IsLcmServiceAdminUsingGET(params *IsLcmServiceAdminUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsLcmServiceAdminUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsLcmServiceAdminUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isLcmServiceAdminUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/restricted/lcmserviceadmin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsLcmServiceAdminUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsLcmServiceAdminUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isLcmServiceAdminUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsReleaseManagerUsingGET is release manager
*/
func (a *Client) IsReleaseManagerUsingGET(params *IsReleaseManagerUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsReleaseManagerUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsReleaseManagerUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isReleaseManagerUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/restricted/releasemanager",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsReleaseManagerUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsReleaseManagerUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isReleaseManagerUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsSupportUserUsingGET is support user
*/
func (a *Client) IsSupportUserUsingGET(params *IsSupportUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsSupportUserUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsSupportUserUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isSupportUserUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/restricted/supportuser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsSupportUserUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsSupportUserUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isSupportUserUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsVcfUserUsingGET is vcf user
*/
func (a *Client) IsVcfUserUsingGET(params *IsVcfUserUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsVcfUserUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsVcfUserUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isVcfUserUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/restricted/vcfuser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsVcfUserUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsVcfUserUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isVcfUserUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WhoAmIUsingGET whos am i
*/
func (a *Client) WhoAmIUsingGET(params *WhoAmIUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*WhoAmIUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWhoAmIUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "whoAmIUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WhoAmIUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WhoAmIUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for whoAmIUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
