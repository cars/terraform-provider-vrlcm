// Code generated by go-swagger; DO NOT EDIT.

package geo_location_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSearchGeoLocationsUsingGETParams creates a new SearchGeoLocationsUsingGETParams object
// with the default values initialized.
func NewSearchGeoLocationsUsingGETParams() *SearchGeoLocationsUsingGETParams {
	var ()
	return &SearchGeoLocationsUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchGeoLocationsUsingGETParamsWithTimeout creates a new SearchGeoLocationsUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchGeoLocationsUsingGETParamsWithTimeout(timeout time.Duration) *SearchGeoLocationsUsingGETParams {
	var ()
	return &SearchGeoLocationsUsingGETParams{

		timeout: timeout,
	}
}

// NewSearchGeoLocationsUsingGETParamsWithContext creates a new SearchGeoLocationsUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchGeoLocationsUsingGETParamsWithContext(ctx context.Context) *SearchGeoLocationsUsingGETParams {
	var ()
	return &SearchGeoLocationsUsingGETParams{

		Context: ctx,
	}
}

// NewSearchGeoLocationsUsingGETParamsWithHTTPClient creates a new SearchGeoLocationsUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchGeoLocationsUsingGETParamsWithHTTPClient(client *http.Client) *SearchGeoLocationsUsingGETParams {
	var ()
	return &SearchGeoLocationsUsingGETParams{
		HTTPClient: client,
	}
}

/*SearchGeoLocationsUsingGETParams contains all the parameters to send to the API endpoint
for the search geo locations using g e t operation typically these are written to a http.Request
*/
type SearchGeoLocationsUsingGETParams struct {

	/*Pattern
	  pattern

	*/
	Pattern string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search geo locations using g e t params
func (o *SearchGeoLocationsUsingGETParams) WithTimeout(timeout time.Duration) *SearchGeoLocationsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search geo locations using g e t params
func (o *SearchGeoLocationsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search geo locations using g e t params
func (o *SearchGeoLocationsUsingGETParams) WithContext(ctx context.Context) *SearchGeoLocationsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search geo locations using g e t params
func (o *SearchGeoLocationsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search geo locations using g e t params
func (o *SearchGeoLocationsUsingGETParams) WithHTTPClient(client *http.Client) *SearchGeoLocationsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search geo locations using g e t params
func (o *SearchGeoLocationsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPattern adds the pattern to the search geo locations using g e t params
func (o *SearchGeoLocationsUsingGETParams) WithPattern(pattern string) *SearchGeoLocationsUsingGETParams {
	o.SetPattern(pattern)
	return o
}

// SetPattern adds the pattern to the search geo locations using g e t params
func (o *SearchGeoLocationsUsingGETParams) SetPattern(pattern string) {
	o.Pattern = pattern
}

// WriteToRequest writes these params to a swagger request
func (o *SearchGeoLocationsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param pattern
	if err := r.SetPathParam("pattern", o.Pattern); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
