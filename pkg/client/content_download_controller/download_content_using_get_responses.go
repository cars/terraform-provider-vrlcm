// Code generated by go-swagger; DO NOT EDIT.

package content_download_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// DownloadContentUsingGETReader is a Reader for the DownloadContentUsingGET structure.
type DownloadContentUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadContentUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadContentUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDownloadContentUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDownloadContentUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadContentUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDownloadContentUsingGETOK creates a DownloadContentUsingGETOK with default headers values
func NewDownloadContentUsingGETOK() *DownloadContentUsingGETOK {
	return &DownloadContentUsingGETOK{}
}

/*DownloadContentUsingGETOK handles this case with default header values.

OK
*/
type DownloadContentUsingGETOK struct {
	Payload *models.Resource
}

func (o *DownloadContentUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /repo/{repoName}/{contentPath}][%d] downloadContentUsingGETOK  %+v", 200, o.Payload)
}

func (o *DownloadContentUsingGETOK) GetPayload() *models.Resource {
	return o.Payload
}

func (o *DownloadContentUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Resource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadContentUsingGETUnauthorized creates a DownloadContentUsingGETUnauthorized with default headers values
func NewDownloadContentUsingGETUnauthorized() *DownloadContentUsingGETUnauthorized {
	return &DownloadContentUsingGETUnauthorized{}
}

/*DownloadContentUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type DownloadContentUsingGETUnauthorized struct {
}

func (o *DownloadContentUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repo/{repoName}/{contentPath}][%d] downloadContentUsingGETUnauthorized ", 401)
}

func (o *DownloadContentUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadContentUsingGETForbidden creates a DownloadContentUsingGETForbidden with default headers values
func NewDownloadContentUsingGETForbidden() *DownloadContentUsingGETForbidden {
	return &DownloadContentUsingGETForbidden{}
}

/*DownloadContentUsingGETForbidden handles this case with default header values.

Forbidden
*/
type DownloadContentUsingGETForbidden struct {
}

func (o *DownloadContentUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /repo/{repoName}/{contentPath}][%d] downloadContentUsingGETForbidden ", 403)
}

func (o *DownloadContentUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadContentUsingGETNotFound creates a DownloadContentUsingGETNotFound with default headers values
func NewDownloadContentUsingGETNotFound() *DownloadContentUsingGETNotFound {
	return &DownloadContentUsingGETNotFound{}
}

/*DownloadContentUsingGETNotFound handles this case with default header values.

Not Found
*/
type DownloadContentUsingGETNotFound struct {
}

func (o *DownloadContentUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /repo/{repoName}/{contentPath}][%d] downloadContentUsingGETNotFound ", 404)
}

func (o *DownloadContentUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
