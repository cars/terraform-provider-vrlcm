// Code generated by go-swagger; DO NOT EDIT.

package content_download_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDownloadContentsUsingPOSTParams creates a new DownloadContentsUsingPOSTParams object
// with the default values initialized.
func NewDownloadContentsUsingPOSTParams() *DownloadContentsUsingPOSTParams {
	var ()
	return &DownloadContentsUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDownloadContentsUsingPOSTParamsWithTimeout creates a new DownloadContentsUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDownloadContentsUsingPOSTParamsWithTimeout(timeout time.Duration) *DownloadContentsUsingPOSTParams {
	var ()
	return &DownloadContentsUsingPOSTParams{

		timeout: timeout,
	}
}

// NewDownloadContentsUsingPOSTParamsWithContext creates a new DownloadContentsUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewDownloadContentsUsingPOSTParamsWithContext(ctx context.Context) *DownloadContentsUsingPOSTParams {
	var ()
	return &DownloadContentsUsingPOSTParams{

		Context: ctx,
	}
}

// NewDownloadContentsUsingPOSTParamsWithHTTPClient creates a new DownloadContentsUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDownloadContentsUsingPOSTParamsWithHTTPClient(client *http.Client) *DownloadContentsUsingPOSTParams {
	var ()
	return &DownloadContentsUsingPOSTParams{
		HTTPClient: client,
	}
}

/*DownloadContentsUsingPOSTParams contains all the parameters to send to the API endpoint
for the download contents using p o s t operation typically these are written to a http.Request
*/
type DownloadContentsUsingPOSTParams struct {

	/*FalseValue
	  falseValue

	*/
	FalseValue *string
	/*Urls
	  urls

	*/
	Urls []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the download contents using p o s t params
func (o *DownloadContentsUsingPOSTParams) WithTimeout(timeout time.Duration) *DownloadContentsUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the download contents using p o s t params
func (o *DownloadContentsUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the download contents using p o s t params
func (o *DownloadContentsUsingPOSTParams) WithContext(ctx context.Context) *DownloadContentsUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the download contents using p o s t params
func (o *DownloadContentsUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the download contents using p o s t params
func (o *DownloadContentsUsingPOSTParams) WithHTTPClient(client *http.Client) *DownloadContentsUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the download contents using p o s t params
func (o *DownloadContentsUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFalseValue adds the falseValue to the download contents using p o s t params
func (o *DownloadContentsUsingPOSTParams) WithFalseValue(falseValue *string) *DownloadContentsUsingPOSTParams {
	o.SetFalseValue(falseValue)
	return o
}

// SetFalseValue adds the falseValue to the download contents using p o s t params
func (o *DownloadContentsUsingPOSTParams) SetFalseValue(falseValue *string) {
	o.FalseValue = falseValue
}

// WithUrls adds the urls to the download contents using p o s t params
func (o *DownloadContentsUsingPOSTParams) WithUrls(urls []string) *DownloadContentsUsingPOSTParams {
	o.SetUrls(urls)
	return o
}

// SetUrls adds the urls to the download contents using p o s t params
func (o *DownloadContentsUsingPOSTParams) SetUrls(urls []string) {
	o.Urls = urls
}

// WriteToRequest writes these params to a swagger request
func (o *DownloadContentsUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FalseValue != nil {

		// query param falseValue
		var qrFalseValue string
		if o.FalseValue != nil {
			qrFalseValue = *o.FalseValue
		}
		qFalseValue := qrFalseValue
		if qFalseValue != "" {
			if err := r.SetQueryParam("falseValue", qFalseValue); err != nil {
				return err
			}
		}

	}

	if o.Urls != nil {
		if err := r.SetBodyParam(o.Urls); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
