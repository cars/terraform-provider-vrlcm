// Code generated by go-swagger; DO NOT EDIT.

package content_download_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// NewRenameContentFileUsingPOSTParams creates a new RenameContentFileUsingPOSTParams object
// with the default values initialized.
func NewRenameContentFileUsingPOSTParams() *RenameContentFileUsingPOSTParams {
	var ()
	return &RenameContentFileUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRenameContentFileUsingPOSTParamsWithTimeout creates a new RenameContentFileUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRenameContentFileUsingPOSTParamsWithTimeout(timeout time.Duration) *RenameContentFileUsingPOSTParams {
	var ()
	return &RenameContentFileUsingPOSTParams{

		timeout: timeout,
	}
}

// NewRenameContentFileUsingPOSTParamsWithContext creates a new RenameContentFileUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewRenameContentFileUsingPOSTParamsWithContext(ctx context.Context) *RenameContentFileUsingPOSTParams {
	var ()
	return &RenameContentFileUsingPOSTParams{

		Context: ctx,
	}
}

// NewRenameContentFileUsingPOSTParamsWithHTTPClient creates a new RenameContentFileUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRenameContentFileUsingPOSTParamsWithHTTPClient(client *http.Client) *RenameContentFileUsingPOSTParams {
	var ()
	return &RenameContentFileUsingPOSTParams{
		HTTPClient: client,
	}
}

/*RenameContentFileUsingPOSTParams contains all the parameters to send to the API endpoint
for the rename content file using p o s t operation typically these are written to a http.Request
*/
type RenameContentFileUsingPOSTParams struct {

	/*ContentRenameDTO
	  contentRenameDTO

	*/
	ContentRenameDTO *models.ContentRenameDTO

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the rename content file using p o s t params
func (o *RenameContentFileUsingPOSTParams) WithTimeout(timeout time.Duration) *RenameContentFileUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the rename content file using p o s t params
func (o *RenameContentFileUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the rename content file using p o s t params
func (o *RenameContentFileUsingPOSTParams) WithContext(ctx context.Context) *RenameContentFileUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the rename content file using p o s t params
func (o *RenameContentFileUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the rename content file using p o s t params
func (o *RenameContentFileUsingPOSTParams) WithHTTPClient(client *http.Client) *RenameContentFileUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the rename content file using p o s t params
func (o *RenameContentFileUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentRenameDTO adds the contentRenameDTO to the rename content file using p o s t params
func (o *RenameContentFileUsingPOSTParams) WithContentRenameDTO(contentRenameDTO *models.ContentRenameDTO) *RenameContentFileUsingPOSTParams {
	o.SetContentRenameDTO(contentRenameDTO)
	return o
}

// SetContentRenameDTO adds the contentRenameDTO to the rename content file using p o s t params
func (o *RenameContentFileUsingPOSTParams) SetContentRenameDTO(contentRenameDTO *models.ContentRenameDTO) {
	o.ContentRenameDTO = contentRenameDTO
}

// WriteToRequest writes these params to a swagger request
func (o *RenameContentFileUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContentRenameDTO != nil {
		if err := r.SetBodyParam(o.ContentRenameDTO); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
