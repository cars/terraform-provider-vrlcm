// Code generated by go-swagger; DO NOT EDIT.

package content_download_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new content download controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for content download controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DownloadContentUsingGET(params *DownloadContentUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadContentUsingGETOK, error)

	DownloadContentsUsingPOST(params *DownloadContentsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadContentsUsingPOSTOK, *DownloadContentsUsingPOSTCreated, error)

	IsContentExistsUsingGET(params *IsContentExistsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsContentExistsUsingGETOK, error)

	RenameContentFileUsingPOST(params *RenameContentFileUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RenameContentFileUsingPOSTOK, *RenameContentFileUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DownloadContentUsingGET downloads content
*/
func (a *Client) DownloadContentUsingGET(params *DownloadContentUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadContentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadContentUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadContentUsingGET",
		Method:             "GET",
		PathPattern:        "/repo/{repoName}/{contentPath}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadContentUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadContentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for downloadContentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DownloadContentsUsingPOST downloads contents
*/
func (a *Client) DownloadContentsUsingPOST(params *DownloadContentsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadContentsUsingPOSTOK, *DownloadContentsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadContentsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadContentsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/contents/download",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadContentsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DownloadContentsUsingPOSTOK:
		return value, nil, nil
	case *DownloadContentsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_download_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsContentExistsUsingGET is content exists
*/
func (a *Client) IsContentExistsUsingGET(params *IsContentExistsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsContentExistsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsContentExistsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isContentExistsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/crepo/api/content/exists",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsContentExistsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsContentExistsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isContentExistsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RenameContentFileUsingPOST renames content file
*/
func (a *Client) RenameContentFileUsingPOST(params *RenameContentFileUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RenameContentFileUsingPOSTOK, *RenameContentFileUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenameContentFileUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "renameContentFileUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/content/rename",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RenameContentFileUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RenameContentFileUsingPOSTOK:
		return value, nil, nil
	case *RenameContentFileUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_download_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
