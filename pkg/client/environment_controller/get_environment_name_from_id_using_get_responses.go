// Code generated by go-swagger; DO NOT EDIT.

package environment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetEnvironmentNameFromIDUsingGETReader is a Reader for the GetEnvironmentNameFromIDUsingGET structure.
type GetEnvironmentNameFromIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEnvironmentNameFromIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEnvironmentNameFromIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetEnvironmentNameFromIDUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEnvironmentNameFromIDUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEnvironmentNameFromIDUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEnvironmentNameFromIDUsingGETOK creates a GetEnvironmentNameFromIDUsingGETOK with default headers values
func NewGetEnvironmentNameFromIDUsingGETOK() *GetEnvironmentNameFromIDUsingGETOK {
	return &GetEnvironmentNameFromIDUsingGETOK{}
}

/*GetEnvironmentNameFromIDUsingGETOK handles this case with default header values.

OK
*/
type GetEnvironmentNameFromIDUsingGETOK struct {
	Payload string
}

func (o *GetEnvironmentNameFromIDUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /lcm/lcops/api/environments/id/{environmentId}][%d] getEnvironmentNameFromIdUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetEnvironmentNameFromIDUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *GetEnvironmentNameFromIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEnvironmentNameFromIDUsingGETUnauthorized creates a GetEnvironmentNameFromIDUsingGETUnauthorized with default headers values
func NewGetEnvironmentNameFromIDUsingGETUnauthorized() *GetEnvironmentNameFromIDUsingGETUnauthorized {
	return &GetEnvironmentNameFromIDUsingGETUnauthorized{}
}

/*GetEnvironmentNameFromIDUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetEnvironmentNameFromIDUsingGETUnauthorized struct {
}

func (o *GetEnvironmentNameFromIDUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /lcm/lcops/api/environments/id/{environmentId}][%d] getEnvironmentNameFromIdUsingGETUnauthorized ", 401)
}

func (o *GetEnvironmentNameFromIDUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEnvironmentNameFromIDUsingGETForbidden creates a GetEnvironmentNameFromIDUsingGETForbidden with default headers values
func NewGetEnvironmentNameFromIDUsingGETForbidden() *GetEnvironmentNameFromIDUsingGETForbidden {
	return &GetEnvironmentNameFromIDUsingGETForbidden{}
}

/*GetEnvironmentNameFromIDUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetEnvironmentNameFromIDUsingGETForbidden struct {
}

func (o *GetEnvironmentNameFromIDUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /lcm/lcops/api/environments/id/{environmentId}][%d] getEnvironmentNameFromIdUsingGETForbidden ", 403)
}

func (o *GetEnvironmentNameFromIDUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEnvironmentNameFromIDUsingGETNotFound creates a GetEnvironmentNameFromIDUsingGETNotFound with default headers values
func NewGetEnvironmentNameFromIDUsingGETNotFound() *GetEnvironmentNameFromIDUsingGETNotFound {
	return &GetEnvironmentNameFromIDUsingGETNotFound{}
}

/*GetEnvironmentNameFromIDUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetEnvironmentNameFromIDUsingGETNotFound struct {
}

func (o *GetEnvironmentNameFromIDUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /lcm/lcops/api/environments/id/{environmentId}][%d] getEnvironmentNameFromIdUsingGETNotFound ", 404)
}

func (o *GetEnvironmentNameFromIDUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
