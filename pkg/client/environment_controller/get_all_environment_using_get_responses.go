// Code generated by go-swagger; DO NOT EDIT.

package environment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// GetAllEnvironmentUsingGETReader is a Reader for the GetAllEnvironmentUsingGET structure.
type GetAllEnvironmentUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllEnvironmentUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllEnvironmentUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllEnvironmentUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllEnvironmentUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllEnvironmentUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllEnvironmentUsingGETOK creates a GetAllEnvironmentUsingGETOK with default headers values
func NewGetAllEnvironmentUsingGETOK() *GetAllEnvironmentUsingGETOK {
	return &GetAllEnvironmentUsingGETOK{}
}

/*GetAllEnvironmentUsingGETOK handles this case with default header values.

OK
*/
type GetAllEnvironmentUsingGETOK struct {
	Payload []*models.EnvironmentRequestDTO
}

func (o *GetAllEnvironmentUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /lcm/lcops/api/environments][%d] getAllEnvironmentUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllEnvironmentUsingGETOK) GetPayload() []*models.EnvironmentRequestDTO {
	return o.Payload
}

func (o *GetAllEnvironmentUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllEnvironmentUsingGETUnauthorized creates a GetAllEnvironmentUsingGETUnauthorized with default headers values
func NewGetAllEnvironmentUsingGETUnauthorized() *GetAllEnvironmentUsingGETUnauthorized {
	return &GetAllEnvironmentUsingGETUnauthorized{}
}

/*GetAllEnvironmentUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetAllEnvironmentUsingGETUnauthorized struct {
}

func (o *GetAllEnvironmentUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /lcm/lcops/api/environments][%d] getAllEnvironmentUsingGETUnauthorized ", 401)
}

func (o *GetAllEnvironmentUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllEnvironmentUsingGETForbidden creates a GetAllEnvironmentUsingGETForbidden with default headers values
func NewGetAllEnvironmentUsingGETForbidden() *GetAllEnvironmentUsingGETForbidden {
	return &GetAllEnvironmentUsingGETForbidden{}
}

/*GetAllEnvironmentUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetAllEnvironmentUsingGETForbidden struct {
}

func (o *GetAllEnvironmentUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /lcm/lcops/api/environments][%d] getAllEnvironmentUsingGETForbidden ", 403)
}

func (o *GetAllEnvironmentUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllEnvironmentUsingGETNotFound creates a GetAllEnvironmentUsingGETNotFound with default headers values
func NewGetAllEnvironmentUsingGETNotFound() *GetAllEnvironmentUsingGETNotFound {
	return &GetAllEnvironmentUsingGETNotFound{}
}

/*GetAllEnvironmentUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetAllEnvironmentUsingGETNotFound struct {
}

func (o *GetAllEnvironmentUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /lcm/lcops/api/environments][%d] getAllEnvironmentUsingGETNotFound ", 404)
}

func (o *GetAllEnvironmentUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
