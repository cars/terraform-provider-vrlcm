// Code generated by go-swagger; DO NOT EDIT.

package environment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewTriggerHealthCheckUsingPOSTParams creates a new TriggerHealthCheckUsingPOSTParams object
// with the default values initialized.
func NewTriggerHealthCheckUsingPOSTParams() *TriggerHealthCheckUsingPOSTParams {
	var ()
	return &TriggerHealthCheckUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTriggerHealthCheckUsingPOSTParamsWithTimeout creates a new TriggerHealthCheckUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTriggerHealthCheckUsingPOSTParamsWithTimeout(timeout time.Duration) *TriggerHealthCheckUsingPOSTParams {
	var ()
	return &TriggerHealthCheckUsingPOSTParams{

		timeout: timeout,
	}
}

// NewTriggerHealthCheckUsingPOSTParamsWithContext creates a new TriggerHealthCheckUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewTriggerHealthCheckUsingPOSTParamsWithContext(ctx context.Context) *TriggerHealthCheckUsingPOSTParams {
	var ()
	return &TriggerHealthCheckUsingPOSTParams{

		Context: ctx,
	}
}

// NewTriggerHealthCheckUsingPOSTParamsWithHTTPClient creates a new TriggerHealthCheckUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTriggerHealthCheckUsingPOSTParamsWithHTTPClient(client *http.Client) *TriggerHealthCheckUsingPOSTParams {
	var ()
	return &TriggerHealthCheckUsingPOSTParams{
		HTTPClient: client,
	}
}

/*TriggerHealthCheckUsingPOSTParams contains all the parameters to send to the API endpoint
for the trigger health check using p o s t operation typically these are written to a http.Request
*/
type TriggerHealthCheckUsingPOSTParams struct {

	/*EnvironmentID
	  environmentId

	*/
	EnvironmentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the trigger health check using p o s t params
func (o *TriggerHealthCheckUsingPOSTParams) WithTimeout(timeout time.Duration) *TriggerHealthCheckUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the trigger health check using p o s t params
func (o *TriggerHealthCheckUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the trigger health check using p o s t params
func (o *TriggerHealthCheckUsingPOSTParams) WithContext(ctx context.Context) *TriggerHealthCheckUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the trigger health check using p o s t params
func (o *TriggerHealthCheckUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the trigger health check using p o s t params
func (o *TriggerHealthCheckUsingPOSTParams) WithHTTPClient(client *http.Client) *TriggerHealthCheckUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the trigger health check using p o s t params
func (o *TriggerHealthCheckUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentID adds the environmentID to the trigger health check using p o s t params
func (o *TriggerHealthCheckUsingPOSTParams) WithEnvironmentID(environmentID string) *TriggerHealthCheckUsingPOSTParams {
	o.SetEnvironmentID(environmentID)
	return o
}

// SetEnvironmentID adds the environmentId to the trigger health check using p o s t params
func (o *TriggerHealthCheckUsingPOSTParams) SetEnvironmentID(environmentID string) {
	o.EnvironmentID = environmentID
}

// WriteToRequest writes these params to a swagger request
func (o *TriggerHealthCheckUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param environmentId
	if err := r.SetPathParam("environmentId", o.EnvironmentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
