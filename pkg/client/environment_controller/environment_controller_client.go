// Code generated by go-swagger; DO NOT EDIT.

package environment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new environment controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for environment controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddNodeUsingPOST(params *AddNodeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*AddNodeUsingPOSTOK, *AddNodeUsingPOSTCreated, error)

	AddProductUsingPOST(params *AddProductUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*AddProductUsingPOSTOK, *AddProductUsingPOSTCreated, error)

	CreateEnvironmentUsingPOST(params *CreateEnvironmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEnvironmentUsingPOSTOK, *CreateEnvironmentUsingPOSTCreated, error)

	CrossProductConfigurevROPSAsWLPEndpointUsingPOST(params *CrossProductConfigurevROPSAsWLPEndpointUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CrossProductConfigurevROPSAsWLPEndpointUsingPOSTOK, *CrossProductConfigurevROPSAsWLPEndpointUsingPOSTCreated, error)

	CrossProductMonitervRAWithvROPSUsingPOST(params *CrossProductMonitervRAWithvROPSUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CrossProductMonitervRAWithvROPSUsingPOSTOK, *CrossProductMonitervRAWithvROPSUsingPOSTCreated, error)

	DeleteEnvironmentUsingDELETE(params *DeleteEnvironmentUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEnvironmentUsingDELETEOK, *DeleteEnvironmentUsingDELETENoContent, error)

	DownloadEnviornmentLogsUsingPOST(params *DownloadEnviornmentLogsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadEnviornmentLogsUsingPOSTOK, *DownloadEnviornmentLogsUsingPOSTCreated, error)

	EnvironmentTemplateUsingPOST(params *EnvironmentTemplateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*EnvironmentTemplateUsingPOSTOK, *EnvironmentTemplateUsingPOSTCreated, error)

	ExportEnviornmentDataUsingGET(params *ExportEnviornmentDataUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ExportEnviornmentDataUsingGETOK, error)

	GenerateLockerReferenceForEnvironmentUsingPOST(params *GenerateLockerReferenceForEnvironmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateLockerReferenceForEnvironmentUsingPOSTOK, *GenerateLockerReferenceForEnvironmentUsingPOSTCreated, error)

	GetAllCompletedEnvironmentsForGivenProdNVersionUsingGET(params *GetAllCompletedEnvironmentsForGivenProdNVersionUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllCompletedEnvironmentsForGivenProdNVersionUsingGETOK, error)

	GetAllEnvironmentFromDataCenterUsingGET(params *GetAllEnvironmentFromDataCenterUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllEnvironmentFromDataCenterUsingGETOK, error)

	GetAllEnvironmentRequestsUsingGET(params *GetAllEnvironmentRequestsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllEnvironmentRequestsUsingGETOK, error)

	GetAllEnvironmentUsingGET(params *GetAllEnvironmentUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllEnvironmentUsingGETOK, error)

	GetAllPendingEnvironmentRequestsUsingGET(params *GetAllPendingEnvironmentRequestsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllPendingEnvironmentRequestsUsingGETOK, error)

	GetEnvironmenstByStatusUsingGET(params *GetEnvironmenstByStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmenstByStatusUsingGETOK, error)

	GetEnvironmentByNameUsingGET(params *GetEnvironmentByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentByNameUsingGETOK, error)

	GetEnvironmentDataFromIDUsingGET(params *GetEnvironmentDataFromIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentDataFromIDUsingGETOK, error)

	GetEnvironmentNameFromIDUsingGET(params *GetEnvironmentNameFromIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentNameFromIDUsingGETOK, error)

	GetEnvironmentVmsForDeleteUsingGET(params *GetEnvironmentVmsForDeleteUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentVmsForDeleteUsingGETOK, error)

	GetUIEnvironmentRequestUsingGET(params *GetUIEnvironmentRequestUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUIEnvironmentRequestUsingGETOK, error)

	SyncAllEnvironmensUsingPOST(params *SyncAllEnvironmensUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SyncAllEnvironmensUsingPOSTOK, *SyncAllEnvironmensUsingPOSTCreated, error)

	SyncAllProdsWithinEnvironmentUsingPOST(params *SyncAllProdsWithinEnvironmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SyncAllProdsWithinEnvironmentUsingPOSTOK, *SyncAllProdsWithinEnvironmentUsingPOSTCreated, error)

	ToggleHealthCheckUsingPOST(params *ToggleHealthCheckUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ToggleHealthCheckUsingPOSTOK, *ToggleHealthCheckUsingPOSTCreated, error)

	TriggerHealthCheckUsingPOST(params *TriggerHealthCheckUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*TriggerHealthCheckUsingPOSTOK, *TriggerHealthCheckUsingPOSTCreated, error)

	UpdateEnvironmentUsingPUT(params *UpdateEnvironmentUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEnvironmentUsingPUTOK, *UpdateEnvironmentUsingPUTCreated, error)

	UpdateProdPropsUsingPOST(params *UpdateProdPropsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProdPropsUsingPOSTOK, *UpdateProdPropsUsingPOSTCreated, error)

	VROPSadapterOperationUsingPOST(params *VROPSadapterOperationUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*VROPSadapterOperationUsingPOSTOK, *VROPSadapterOperationUsingPOSTCreated, error)

	ValidateAndDeployWindowsUsingPOST(params *ValidateAndDeployWindowsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateAndDeployWindowsUsingPOSTOK, *ValidateAndDeployWindowsUsingPOSTCreated, error)

	ValidateEnvironmentUsingPOST(params *ValidateEnvironmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateEnvironmentUsingPOSTOK, *ValidateEnvironmentUsingPOSTCreated, error)

	ValidateEnvironmentUsingPOST1(params *ValidateEnvironmentUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter) (*ValidateEnvironmentUsingPOST1OK, *ValidateEnvironmentUsingPOST1Created, error)

	VraEndpointCreationUsingPOST(params *VraEndpointCreationUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*VraEndpointCreationUsingPOSTOK, *VraEndpointCreationUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddNodeUsingPOST adds node
*/
func (a *Client) AddNodeUsingPOST(params *AddNodeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*AddNodeUsingPOSTOK, *AddNodeUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddNodeUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addNodeUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/{productName}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddNodeUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddNodeUsingPOSTOK:
		return value, nil, nil
	case *AddNodeUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddProductUsingPOST adds product
*/
func (a *Client) AddProductUsingPOST(params *AddProductUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*AddProductUsingPOSTOK, *AddProductUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProductUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addProductUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/addproducts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddProductUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddProductUsingPOSTOK:
		return value, nil, nil
	case *AddProductUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEnvironmentUsingPOST creates environment
*/
func (a *Client) CreateEnvironmentUsingPOST(params *CreateEnvironmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEnvironmentUsingPOSTOK, *CreateEnvironmentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEnvironmentUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEnvironmentUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEnvironmentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateEnvironmentUsingPOSTOK:
		return value, nil, nil
	case *CreateEnvironmentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CrossProductConfigurevROPSAsWLPEndpointUsingPOST crosses product configurev r o p s as w l p endpoint
*/
func (a *Client) CrossProductConfigurevROPSAsWLPEndpointUsingPOST(params *CrossProductConfigurevROPSAsWLPEndpointUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CrossProductConfigurevROPSAsWLPEndpointUsingPOSTOK, *CrossProductConfigurevROPSAsWLPEndpointUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrossProductConfigurevROPSAsWLPEndpointUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "crossProductConfigurevROPSAsWLPEndpointUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/configurevROPSAsWLPEndpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CrossProductConfigurevROPSAsWLPEndpointUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CrossProductConfigurevROPSAsWLPEndpointUsingPOSTOK:
		return value, nil, nil
	case *CrossProductConfigurevROPSAsWLPEndpointUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CrossProductMonitervRAWithvROPSUsingPOST crosses product moniterv r a withv r o p s
*/
func (a *Client) CrossProductMonitervRAWithvROPSUsingPOST(params *CrossProductMonitervRAWithvROPSUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CrossProductMonitervRAWithvROPSUsingPOSTOK, *CrossProductMonitervRAWithvROPSUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCrossProductMonitervRAWithvROPSUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "crossProductMonitervRAWithvROPSUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/monitorvRAwithvROPS",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CrossProductMonitervRAWithvROPSUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CrossProductMonitervRAWithvROPSUsingPOSTOK:
		return value, nil, nil
	case *CrossProductMonitervRAWithvROPSUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEnvironmentUsingDELETE deletes environment
*/
func (a *Client) DeleteEnvironmentUsingDELETE(params *DeleteEnvironmentUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEnvironmentUsingDELETEOK, *DeleteEnvironmentUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnvironmentUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEnvironmentUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEnvironmentUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteEnvironmentUsingDELETEOK:
		return value, nil, nil
	case *DeleteEnvironmentUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DownloadEnviornmentLogsUsingPOST downloads enviornment logs
*/
func (a *Client) DownloadEnviornmentLogsUsingPOST(params *DownloadEnviornmentLogsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadEnviornmentLogsUsingPOSTOK, *DownloadEnviornmentLogsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadEnviornmentLogsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadEnviornmentLogsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadEnviornmentLogsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DownloadEnviornmentLogsUsingPOSTOK:
		return value, nil, nil
	case *DownloadEnviornmentLogsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnvironmentTemplateUsingPOST environments template
*/
func (a *Client) EnvironmentTemplateUsingPOST(params *EnvironmentTemplateUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*EnvironmentTemplateUsingPOSTOK, *EnvironmentTemplateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnvironmentTemplateUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "environmentTemplateUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/import/template/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnvironmentTemplateUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EnvironmentTemplateUsingPOSTOK:
		return value, nil, nil
	case *EnvironmentTemplateUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportEnviornmentDataUsingGET exports enviornment data
*/
func (a *Client) ExportEnviornmentDataUsingGET(params *ExportEnviornmentDataUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*ExportEnviornmentDataUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportEnviornmentDataUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportEnviornmentDataUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportEnviornmentDataUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportEnviornmentDataUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportEnviornmentDataUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateLockerReferenceForEnvironmentUsingPOST generates locker reference for environment
*/
func (a *Client) GenerateLockerReferenceForEnvironmentUsingPOST(params *GenerateLockerReferenceForEnvironmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GenerateLockerReferenceForEnvironmentUsingPOSTOK, *GenerateLockerReferenceForEnvironmentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateLockerReferenceForEnvironmentUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generateLockerReferenceForEnvironmentUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/createLockerReferences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateLockerReferenceForEnvironmentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GenerateLockerReferenceForEnvironmentUsingPOSTOK:
		return value, nil, nil
	case *GenerateLockerReferenceForEnvironmentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllCompletedEnvironmentsForGivenProdNVersionUsingGET gets all completed environments for given prod n version
*/
func (a *Client) GetAllCompletedEnvironmentsForGivenProdNVersionUsingGET(params *GetAllCompletedEnvironmentsForGivenProdNVersionUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllCompletedEnvironmentsForGivenProdNVersionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCompletedEnvironmentsForGivenProdNVersionUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllCompletedEnvironmentsForGivenProdNVersionUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/prodId/{prodId}/prodVersion/{prodVersion}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllCompletedEnvironmentsForGivenProdNVersionUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllCompletedEnvironmentsForGivenProdNVersionUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllCompletedEnvironmentsForGivenProdNVersionUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllEnvironmentFromDataCenterUsingGET gets all environment from data center
*/
func (a *Client) GetAllEnvironmentFromDataCenterUsingGET(params *GetAllEnvironmentFromDataCenterUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllEnvironmentFromDataCenterUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEnvironmentFromDataCenterUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllEnvironmentFromDataCenterUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/datacenters/{dataCenterName}/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllEnvironmentFromDataCenterUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllEnvironmentFromDataCenterUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllEnvironmentFromDataCenterUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllEnvironmentRequestsUsingGET gets all environment requests
*/
func (a *Client) GetAllEnvironmentRequestsUsingGET(params *GetAllEnvironmentRequestsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllEnvironmentRequestsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEnvironmentRequestsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllEnvironmentRequestsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllEnvironmentRequestsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllEnvironmentRequestsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllEnvironmentRequestsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllEnvironmentUsingGET gets all environment
*/
func (a *Client) GetAllEnvironmentUsingGET(params *GetAllEnvironmentUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllEnvironmentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEnvironmentUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllEnvironmentUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllEnvironmentUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllEnvironmentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllEnvironmentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllPendingEnvironmentRequestsUsingGET gets all pending environment requests
*/
func (a *Client) GetAllPendingEnvironmentRequestsUsingGET(params *GetAllPendingEnvironmentRequestsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllPendingEnvironmentRequestsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPendingEnvironmentRequestsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllPendingEnvironmentRequestsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/pendingrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPendingEnvironmentRequestsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPendingEnvironmentRequestsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPendingEnvironmentRequestsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmenstByStatusUsingGET gets environmenst by status
*/
func (a *Client) GetEnvironmenstByStatusUsingGET(params *GetEnvironmenstByStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmenstByStatusUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmenstByStatusUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmenstByStatusUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/status/{status}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmenstByStatusUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmenstByStatusUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmenstByStatusUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentByNameUsingGET gets environment by name
*/
func (a *Client) GetEnvironmentByNameUsingGET(params *GetEnvironmentByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentByNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/{environmentName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmentByNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentDataFromIDUsingGET gets environment data from Id
*/
func (a *Client) GetEnvironmentDataFromIDUsingGET(params *GetEnvironmentDataFromIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentDataFromIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentDataFromIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentDataFromIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/data/{environmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmentDataFromIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentDataFromIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentDataFromIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentNameFromIDUsingGET gets environment name from Id
*/
func (a *Client) GetEnvironmentNameFromIDUsingGET(params *GetEnvironmentNameFromIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentNameFromIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentNameFromIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentNameFromIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/id/{environmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmentNameFromIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentNameFromIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentNameFromIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentVmsForDeleteUsingGET gets environment vms for delete
*/
func (a *Client) GetEnvironmentVmsForDeleteUsingGET(params *GetEnvironmentVmsForDeleteUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentVmsForDeleteUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentVmsForDeleteUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentVmsForDeleteUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnvironmentVmsForDeleteUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentVmsForDeleteUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentVmsForDeleteUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUIEnvironmentRequestUsingGET gets Ui environment request
*/
func (a *Client) GetUIEnvironmentRequestUsingGET(params *GetUIEnvironmentRequestUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetUIEnvironmentRequestUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUIEnvironmentRequestUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUiEnvironmentRequestUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/lcops/api/{requestId}/ui",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUIEnvironmentRequestUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUIEnvironmentRequestUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUiEnvironmentRequestUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SyncAllEnvironmensUsingPOST syncs all environmens
*/
func (a *Client) SyncAllEnvironmensUsingPOST(params *SyncAllEnvironmensUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SyncAllEnvironmensUsingPOSTOK, *SyncAllEnvironmensUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncAllEnvironmensUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncAllEnvironmensUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/inventorysync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncAllEnvironmensUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SyncAllEnvironmensUsingPOSTOK:
		return value, nil, nil
	case *SyncAllEnvironmensUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SyncAllProdsWithinEnvironmentUsingPOST syncs all prods within environment
*/
func (a *Client) SyncAllProdsWithinEnvironmentUsingPOST(params *SyncAllProdsWithinEnvironmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*SyncAllProdsWithinEnvironmentUsingPOSTOK, *SyncAllProdsWithinEnvironmentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncAllProdsWithinEnvironmentUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncAllProdsWithinEnvironmentUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/inventorysync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncAllProdsWithinEnvironmentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SyncAllProdsWithinEnvironmentUsingPOSTOK:
		return value, nil, nil
	case *SyncAllProdsWithinEnvironmentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ToggleHealthCheckUsingPOST toggles health check
*/
func (a *Client) ToggleHealthCheckUsingPOST(params *ToggleHealthCheckUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ToggleHealthCheckUsingPOSTOK, *ToggleHealthCheckUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleHealthCheckUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "toggleHealthCheckUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/healthCheckToggle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ToggleHealthCheckUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ToggleHealthCheckUsingPOSTOK:
		return value, nil, nil
	case *ToggleHealthCheckUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TriggerHealthCheckUsingPOST triggers health check
*/
func (a *Client) TriggerHealthCheckUsingPOST(params *TriggerHealthCheckUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*TriggerHealthCheckUsingPOSTOK, *TriggerHealthCheckUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerHealthCheckUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggerHealthCheckUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/healthCheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerHealthCheckUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TriggerHealthCheckUsingPOSTOK:
		return value, nil, nil
	case *TriggerHealthCheckUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEnvironmentUsingPUT updates environment
*/
func (a *Client) UpdateEnvironmentUsingPUT(params *UpdateEnvironmentUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEnvironmentUsingPUTOK, *UpdateEnvironmentUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnvironmentUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEnvironmentUsingPUT",
		Method:             "PUT",
		PathPattern:        "/lcm/lcops/api/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEnvironmentUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateEnvironmentUsingPUTOK:
		return value, nil, nil
	case *UpdateEnvironmentUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProdPropsUsingPOST updates prod props
*/
func (a *Client) UpdateProdPropsUsingPOST(params *UpdateProdPropsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProdPropsUsingPOSTOK, *UpdateProdPropsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProdPropsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProdPropsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/id/{environmentId}/{productId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProdPropsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateProdPropsUsingPOSTOK:
		return value, nil, nil
	case *UpdateProdPropsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VROPSadapterOperationUsingPOST vs r o p sadapter operation
*/
func (a *Client) VROPSadapterOperationUsingPOST(params *VROPSadapterOperationUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*VROPSadapterOperationUsingPOSTOK, *VROPSadapterOperationUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVROPSadapterOperationUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "vROPSadapterOperationUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/vrops/adapterOperation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VROPSadapterOperationUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VROPSadapterOperationUsingPOSTOK:
		return value, nil, nil
	case *VROPSadapterOperationUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateAndDeployWindowsUsingPOST validates and deploy windows
*/
func (a *Client) ValidateAndDeployWindowsUsingPOST(params *ValidateAndDeployWindowsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateAndDeployWindowsUsingPOSTOK, *ValidateAndDeployWindowsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateAndDeployWindowsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateAndDeployWindowsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/prevalidateandinstallwindows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateAndDeployWindowsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateAndDeployWindowsUsingPOSTOK:
		return value, nil, nil
	case *ValidateAndDeployWindowsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateEnvironmentUsingPOST validates environment
*/
func (a *Client) ValidateEnvironmentUsingPOST(params *ValidateEnvironmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateEnvironmentUsingPOSTOK, *ValidateEnvironmentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateEnvironmentUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateEnvironmentUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/import/prevalidate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateEnvironmentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateEnvironmentUsingPOSTOK:
		return value, nil, nil
	case *ValidateEnvironmentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateEnvironmentUsingPOST1 validates environment
*/
func (a *Client) ValidateEnvironmentUsingPOST1(params *ValidateEnvironmentUsingPOST1Params, authInfo runtime.ClientAuthInfoWriter) (*ValidateEnvironmentUsingPOST1OK, *ValidateEnvironmentUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateEnvironmentUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateEnvironmentUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/prevalidate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateEnvironmentUsingPOST1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ValidateEnvironmentUsingPOST1OK:
		return value, nil, nil
	case *ValidateEnvironmentUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VraEndpointCreationUsingPOST vras endpoint creation
*/
func (a *Client) VraEndpointCreationUsingPOST(params *VraEndpointCreationUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*VraEndpointCreationUsingPOSTOK, *VraEndpointCreationUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVraEndpointCreationUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "vraEndpointCreationUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/lcops/api/environments/{environmentId}/products/vra/createEndpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VraEndpointCreationUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VraEndpointCreationUsingPOSTOK:
		return value, nil, nil
	case *VraEndpointCreationUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for environment_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
