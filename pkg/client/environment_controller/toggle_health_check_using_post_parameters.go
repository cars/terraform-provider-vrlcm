// Code generated by go-swagger; DO NOT EDIT.

package environment_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewToggleHealthCheckUsingPOSTParams creates a new ToggleHealthCheckUsingPOSTParams object
// with the default values initialized.
func NewToggleHealthCheckUsingPOSTParams() *ToggleHealthCheckUsingPOSTParams {
	var ()
	return &ToggleHealthCheckUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewToggleHealthCheckUsingPOSTParamsWithTimeout creates a new ToggleHealthCheckUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewToggleHealthCheckUsingPOSTParamsWithTimeout(timeout time.Duration) *ToggleHealthCheckUsingPOSTParams {
	var ()
	return &ToggleHealthCheckUsingPOSTParams{

		timeout: timeout,
	}
}

// NewToggleHealthCheckUsingPOSTParamsWithContext creates a new ToggleHealthCheckUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewToggleHealthCheckUsingPOSTParamsWithContext(ctx context.Context) *ToggleHealthCheckUsingPOSTParams {
	var ()
	return &ToggleHealthCheckUsingPOSTParams{

		Context: ctx,
	}
}

// NewToggleHealthCheckUsingPOSTParamsWithHTTPClient creates a new ToggleHealthCheckUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewToggleHealthCheckUsingPOSTParamsWithHTTPClient(client *http.Client) *ToggleHealthCheckUsingPOSTParams {
	var ()
	return &ToggleHealthCheckUsingPOSTParams{
		HTTPClient: client,
	}
}

/*ToggleHealthCheckUsingPOSTParams contains all the parameters to send to the API endpoint
for the toggle health check using p o s t operation typically these are written to a http.Request
*/
type ToggleHealthCheckUsingPOSTParams struct {

	/*EnvironmentID
	  environmentId

	*/
	EnvironmentID string
	/*Toggle
	  enable/disable

	*/
	Toggle *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the toggle health check using p o s t params
func (o *ToggleHealthCheckUsingPOSTParams) WithTimeout(timeout time.Duration) *ToggleHealthCheckUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the toggle health check using p o s t params
func (o *ToggleHealthCheckUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the toggle health check using p o s t params
func (o *ToggleHealthCheckUsingPOSTParams) WithContext(ctx context.Context) *ToggleHealthCheckUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the toggle health check using p o s t params
func (o *ToggleHealthCheckUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the toggle health check using p o s t params
func (o *ToggleHealthCheckUsingPOSTParams) WithHTTPClient(client *http.Client) *ToggleHealthCheckUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the toggle health check using p o s t params
func (o *ToggleHealthCheckUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentID adds the environmentID to the toggle health check using p o s t params
func (o *ToggleHealthCheckUsingPOSTParams) WithEnvironmentID(environmentID string) *ToggleHealthCheckUsingPOSTParams {
	o.SetEnvironmentID(environmentID)
	return o
}

// SetEnvironmentID adds the environmentId to the toggle health check using p o s t params
func (o *ToggleHealthCheckUsingPOSTParams) SetEnvironmentID(environmentID string) {
	o.EnvironmentID = environmentID
}

// WithToggle adds the toggle to the toggle health check using p o s t params
func (o *ToggleHealthCheckUsingPOSTParams) WithToggle(toggle *string) *ToggleHealthCheckUsingPOSTParams {
	o.SetToggle(toggle)
	return o
}

// SetToggle adds the toggle to the toggle health check using p o s t params
func (o *ToggleHealthCheckUsingPOSTParams) SetToggle(toggle *string) {
	o.Toggle = toggle
}

// WriteToRequest writes these params to a swagger request
func (o *ToggleHealthCheckUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param environmentId
	if err := r.SetPathParam("environmentId", o.EnvironmentID); err != nil {
		return err
	}

	if o.Toggle != nil {

		// query param toggle
		var qrToggle string
		if o.Toggle != nil {
			qrToggle = *o.Toggle
		}
		qToggle := qrToggle
		if qToggle != "" {
			if err := r.SetQueryParam("toggle", qToggle); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
