// Code generated by go-swagger; DO NOT EDIT.

package engine_interface_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// GetRetryEventUsingGETReader is a Reader for the GetRetryEventUsingGET structure.
type GetRetryEventUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRetryEventUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRetryEventUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRetryEventUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRetryEventUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRetryEventUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRetryEventUsingGETOK creates a GetRetryEventUsingGETOK with default headers values
func NewGetRetryEventUsingGETOK() *GetRetryEventUsingGETOK {
	return &GetRetryEventUsingGETOK{}
}

/*GetRetryEventUsingGETOK handles this case with default header values.

OK
*/
type GetRetryEventUsingGETOK struct {
	Payload *models.ErrorCause
}

func (o *GetRetryEventUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /lcm/automata/api/engine/job/event/retry/{eventId}][%d] getRetryEventUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetRetryEventUsingGETOK) GetPayload() *models.ErrorCause {
	return o.Payload
}

func (o *GetRetryEventUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorCause)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRetryEventUsingGETUnauthorized creates a GetRetryEventUsingGETUnauthorized with default headers values
func NewGetRetryEventUsingGETUnauthorized() *GetRetryEventUsingGETUnauthorized {
	return &GetRetryEventUsingGETUnauthorized{}
}

/*GetRetryEventUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRetryEventUsingGETUnauthorized struct {
}

func (o *GetRetryEventUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /lcm/automata/api/engine/job/event/retry/{eventId}][%d] getRetryEventUsingGETUnauthorized ", 401)
}

func (o *GetRetryEventUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRetryEventUsingGETForbidden creates a GetRetryEventUsingGETForbidden with default headers values
func NewGetRetryEventUsingGETForbidden() *GetRetryEventUsingGETForbidden {
	return &GetRetryEventUsingGETForbidden{}
}

/*GetRetryEventUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetRetryEventUsingGETForbidden struct {
}

func (o *GetRetryEventUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /lcm/automata/api/engine/job/event/retry/{eventId}][%d] getRetryEventUsingGETForbidden ", 403)
}

func (o *GetRetryEventUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRetryEventUsingGETNotFound creates a GetRetryEventUsingGETNotFound with default headers values
func NewGetRetryEventUsingGETNotFound() *GetRetryEventUsingGETNotFound {
	return &GetRetryEventUsingGETNotFound{}
}

/*GetRetryEventUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetRetryEventUsingGETNotFound struct {
}

func (o *GetRetryEventUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /lcm/automata/api/engine/job/event/retry/{eventId}][%d] getRetryEventUsingGETNotFound ", 404)
}

func (o *GetRetryEventUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
