// Code generated by go-swagger; DO NOT EDIT.

package engine_interface_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new engine interface controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for engine interface controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAllUsingDELETE(params *DeleteAllUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUsingDELETEOK, *DeleteAllUsingDELETENoContent, error)

	DeleteJobUsingGET(params *DeleteJobUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteJobUsingGETOK, error)

	DeleteScheduledJobUsingDELETE(params *DeleteScheduledJobUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteScheduledJobUsingDELETEOK, *DeleteScheduledJobUsingDELETENoContent, error)

	GetAllJobsUsingGET(params *GetAllJobsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllJobsUsingGETOK, error)

	GetJobExecutionPathUsingGET(params *GetJobExecutionPathUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobExecutionPathUsingGETOK, error)

	GetJobResultSetUsingGET(params *GetJobResultSetUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobResultSetUsingGETOK, error)

	GetJobSpecificationUsingGET(params *GetJobSpecificationUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobSpecificationUsingGETOK, error)

	GetJobStatusUsingGET(params *GetJobStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobStatusUsingGETOK, error)

	GetRetryEventUsingGET(params *GetRetryEventUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetRetryEventUsingGETOK, error)

	InvokeCleanupAndPurgeUsingDELETE(params *InvokeCleanupAndPurgeUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*InvokeCleanupAndPurgeUsingDELETEOK, *InvokeCleanupAndPurgeUsingDELETENoContent, error)

	InvokeCleanupUsingDELETE(params *InvokeCleanupUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*InvokeCleanupUsingDELETEOK, *InvokeCleanupUsingDELETENoContent, error)

	PatchRetryEventUsingPATCH(params *PatchRetryEventUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*PatchRetryEventUsingPATCHOK, *PatchRetryEventUsingPATCHNoContent, error)

	QueueJobUsingPOST(params *QueueJobUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*QueueJobUsingPOSTOK, *QueueJobUsingPOSTCreated, error)

	QueueScheduledJobUsingPOST(params *QueueScheduledJobUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*QueueScheduledJobUsingPOSTOK, *QueueScheduledJobUsingPOSTCreated, error)

	UpdateCancelStatusUsingGET(params *UpdateCancelStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCancelStatusUsingGETOK, error)

	UpdateScheduledJobIntervalUsingPUT(params *UpdateScheduledJobIntervalUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateScheduledJobIntervalUsingPUTOK, *UpdateScheduledJobIntervalUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAllUsingDELETE deletes all
*/
func (a *Client) DeleteAllUsingDELETE(params *DeleteAllUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllUsingDELETEOK, *DeleteAllUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/automata/api/engine/wip/statemachine/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAllUsingDELETEOK:
		return value, nil, nil
	case *DeleteAllUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for engine_interface_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteJobUsingGET deletes job
*/
func (a *Client) DeleteJobUsingGET(params *DeleteJobUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteJobUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteJobUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/automata/api/engine/statemachine/deletestatemachinerequest/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteJobUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJobUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteJobUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteScheduledJobUsingDELETE deletes scheduled job
*/
func (a *Client) DeleteScheduledJobUsingDELETE(params *DeleteScheduledJobUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteScheduledJobUsingDELETEOK, *DeleteScheduledJobUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScheduledJobUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteScheduledJobUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/automata/api/engine/statemachine/schedule/detailedspec/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteScheduledJobUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteScheduledJobUsingDELETEOK:
		return value, nil, nil
	case *DeleteScheduledJobUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for engine_interface_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllJobsUsingGET gets all jobs
*/
func (a *Client) GetAllJobsUsingGET(params *GetAllJobsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllJobsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllJobsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllJobsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/automata/api/engine/job",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllJobsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllJobsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllJobsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetJobExecutionPathUsingGET gets job execution path
*/
func (a *Client) GetJobExecutionPathUsingGET(params *GetJobExecutionPathUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobExecutionPathUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobExecutionPathUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobExecutionPathUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/automata/api/engine/statemachine/executionpath/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJobExecutionPathUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobExecutionPathUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getJobExecutionPathUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetJobResultSetUsingGET gets job result set
*/
func (a *Client) GetJobResultSetUsingGET(params *GetJobResultSetUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobResultSetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobResultSetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobResultSetUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/automata/api/engine/job/results/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJobResultSetUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobResultSetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getJobResultSetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetJobSpecificationUsingGET gets job specification
*/
func (a *Client) GetJobSpecificationUsingGET(params *GetJobSpecificationUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobSpecificationUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobSpecificationUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobSpecificationUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/automata/api/engine/statemachine/detailedspec/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJobSpecificationUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobSpecificationUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getJobSpecificationUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetJobStatusUsingGET gets job status
*/
func (a *Client) GetJobStatusUsingGET(params *GetJobStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobStatusUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobStatusUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobStatusUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/automata/api/engine/job/status/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJobStatusUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobStatusUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getJobStatusUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRetryEventUsingGET gets retry event
*/
func (a *Client) GetRetryEventUsingGET(params *GetRetryEventUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetRetryEventUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRetryEventUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRetryEventUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/automata/api/engine/job/event/retry/{eventId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRetryEventUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRetryEventUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRetryEventUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InvokeCleanupAndPurgeUsingDELETE invokes cleanup and purge
*/
func (a *Client) InvokeCleanupAndPurgeUsingDELETE(params *InvokeCleanupAndPurgeUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*InvokeCleanupAndPurgeUsingDELETEOK, *InvokeCleanupAndPurgeUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvokeCleanupAndPurgeUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "invokeCleanupAndPurgeUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/automata/api/engine/job/cleanupAndPurge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InvokeCleanupAndPurgeUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InvokeCleanupAndPurgeUsingDELETEOK:
		return value, nil, nil
	case *InvokeCleanupAndPurgeUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for engine_interface_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InvokeCleanupUsingDELETE invokes cleanup
*/
func (a *Client) InvokeCleanupUsingDELETE(params *InvokeCleanupUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*InvokeCleanupUsingDELETEOK, *InvokeCleanupUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvokeCleanupUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "invokeCleanupUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/automata/api/engine/job/cleanup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InvokeCleanupUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InvokeCleanupUsingDELETEOK:
		return value, nil, nil
	case *InvokeCleanupUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for engine_interface_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRetryEventUsingPATCH patches retry event
*/
func (a *Client) PatchRetryEventUsingPATCH(params *PatchRetryEventUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*PatchRetryEventUsingPATCHOK, *PatchRetryEventUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRetryEventUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRetryEventUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/lcm/automata/api/engine/job/event/retry/{eventId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRetryEventUsingPATCHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchRetryEventUsingPATCHOK:
		return value, nil, nil
	case *PatchRetryEventUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for engine_interface_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueueJobUsingPOST queues job
*/
func (a *Client) QueueJobUsingPOST(params *QueueJobUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*QueueJobUsingPOSTOK, *QueueJobUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueueJobUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queueJobUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/automata/api/engine/statemachine/detailedspec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueueJobUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueueJobUsingPOSTOK:
		return value, nil, nil
	case *QueueJobUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for engine_interface_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueueScheduledJobUsingPOST queues scheduled job
*/
func (a *Client) QueueScheduledJobUsingPOST(params *QueueScheduledJobUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*QueueScheduledJobUsingPOSTOK, *QueueScheduledJobUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueueScheduledJobUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queueScheduledJobUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/automata/api/engine/statemachine/schedule/detailedspec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueueScheduledJobUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueueScheduledJobUsingPOSTOK:
		return value, nil, nil
	case *QueueScheduledJobUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for engine_interface_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCancelStatusUsingGET updates cancel status
*/
func (a *Client) UpdateCancelStatusUsingGET(params *UpdateCancelStatusUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCancelStatusUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCancelStatusUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCancelStatusUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/automata/api/engine/statemachine/cancelstatemachinerequest/{executionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCancelStatusUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCancelStatusUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCancelStatusUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateScheduledJobIntervalUsingPUT updates scheduled job interval
*/
func (a *Client) UpdateScheduledJobIntervalUsingPUT(params *UpdateScheduledJobIntervalUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateScheduledJobIntervalUsingPUTOK, *UpdateScheduledJobIntervalUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScheduledJobIntervalUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateScheduledJobIntervalUsingPUT",
		Method:             "PUT",
		PathPattern:        "/lcm/automata/api/engine/statemachine/schedule/detailedspec/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateScheduledJobIntervalUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateScheduledJobIntervalUsingPUTOK:
		return value, nil, nil
	case *UpdateScheduledJobIntervalUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for engine_interface_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
