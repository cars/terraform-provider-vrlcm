// Code generated by go-swagger; DO NOT EDIT.

package engine_interface_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PatchRetryEventUsingPATCHReader is a Reader for the PatchRetryEventUsingPATCH structure.
type PatchRetryEventUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRetryEventUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRetryEventUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchRetryEventUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchRetryEventUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRetryEventUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchRetryEventUsingPATCHOK creates a PatchRetryEventUsingPATCHOK with default headers values
func NewPatchRetryEventUsingPATCHOK() *PatchRetryEventUsingPATCHOK {
	return &PatchRetryEventUsingPATCHOK{}
}

/*PatchRetryEventUsingPATCHOK handles this case with default header values.

OK
*/
type PatchRetryEventUsingPATCHOK struct {
}

func (o *PatchRetryEventUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /lcm/automata/api/engine/job/event/retry/{eventId}][%d] patchRetryEventUsingPATCHOK ", 200)
}

func (o *PatchRetryEventUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchRetryEventUsingPATCHNoContent creates a PatchRetryEventUsingPATCHNoContent with default headers values
func NewPatchRetryEventUsingPATCHNoContent() *PatchRetryEventUsingPATCHNoContent {
	return &PatchRetryEventUsingPATCHNoContent{}
}

/*PatchRetryEventUsingPATCHNoContent handles this case with default header values.

No Content
*/
type PatchRetryEventUsingPATCHNoContent struct {
}

func (o *PatchRetryEventUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /lcm/automata/api/engine/job/event/retry/{eventId}][%d] patchRetryEventUsingPATCHNoContent ", 204)
}

func (o *PatchRetryEventUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchRetryEventUsingPATCHUnauthorized creates a PatchRetryEventUsingPATCHUnauthorized with default headers values
func NewPatchRetryEventUsingPATCHUnauthorized() *PatchRetryEventUsingPATCHUnauthorized {
	return &PatchRetryEventUsingPATCHUnauthorized{}
}

/*PatchRetryEventUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type PatchRetryEventUsingPATCHUnauthorized struct {
}

func (o *PatchRetryEventUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /lcm/automata/api/engine/job/event/retry/{eventId}][%d] patchRetryEventUsingPATCHUnauthorized ", 401)
}

func (o *PatchRetryEventUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchRetryEventUsingPATCHForbidden creates a PatchRetryEventUsingPATCHForbidden with default headers values
func NewPatchRetryEventUsingPATCHForbidden() *PatchRetryEventUsingPATCHForbidden {
	return &PatchRetryEventUsingPATCHForbidden{}
}

/*PatchRetryEventUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type PatchRetryEventUsingPATCHForbidden struct {
}

func (o *PatchRetryEventUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /lcm/automata/api/engine/job/event/retry/{eventId}][%d] patchRetryEventUsingPATCHForbidden ", 403)
}

func (o *PatchRetryEventUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
