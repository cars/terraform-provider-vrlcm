// Code generated by go-swagger; DO NOT EDIT.

package content_repository_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ReplaceContentByDownloadURLUsingPOSTReader is a Reader for the ReplaceContentByDownloadURLUsingPOST structure.
type ReplaceContentByDownloadURLUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceContentByDownloadURLUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceContentByDownloadURLUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewReplaceContentByDownloadURLUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewReplaceContentByDownloadURLUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReplaceContentByDownloadURLUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceContentByDownloadURLUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReplaceContentByDownloadURLUsingPOSTOK creates a ReplaceContentByDownloadURLUsingPOSTOK with default headers values
func NewReplaceContentByDownloadURLUsingPOSTOK() *ReplaceContentByDownloadURLUsingPOSTOK {
	return &ReplaceContentByDownloadURLUsingPOSTOK{}
}

/*ReplaceContentByDownloadURLUsingPOSTOK handles this case with default header values.

OK
*/
type ReplaceContentByDownloadURLUsingPOSTOK struct {
	Payload string
}

func (o *ReplaceContentByDownloadURLUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /lcm/crepo/api/content/replace][%d] replaceContentByDownloadUrlUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *ReplaceContentByDownloadURLUsingPOSTOK) GetPayload() string {
	return o.Payload
}

func (o *ReplaceContentByDownloadURLUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceContentByDownloadURLUsingPOSTCreated creates a ReplaceContentByDownloadURLUsingPOSTCreated with default headers values
func NewReplaceContentByDownloadURLUsingPOSTCreated() *ReplaceContentByDownloadURLUsingPOSTCreated {
	return &ReplaceContentByDownloadURLUsingPOSTCreated{}
}

/*ReplaceContentByDownloadURLUsingPOSTCreated handles this case with default header values.

Created
*/
type ReplaceContentByDownloadURLUsingPOSTCreated struct {
}

func (o *ReplaceContentByDownloadURLUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /lcm/crepo/api/content/replace][%d] replaceContentByDownloadUrlUsingPOSTCreated ", 201)
}

func (o *ReplaceContentByDownloadURLUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceContentByDownloadURLUsingPOSTUnauthorized creates a ReplaceContentByDownloadURLUsingPOSTUnauthorized with default headers values
func NewReplaceContentByDownloadURLUsingPOSTUnauthorized() *ReplaceContentByDownloadURLUsingPOSTUnauthorized {
	return &ReplaceContentByDownloadURLUsingPOSTUnauthorized{}
}

/*ReplaceContentByDownloadURLUsingPOSTUnauthorized handles this case with default header values.

Unauthorized
*/
type ReplaceContentByDownloadURLUsingPOSTUnauthorized struct {
}

func (o *ReplaceContentByDownloadURLUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /lcm/crepo/api/content/replace][%d] replaceContentByDownloadUrlUsingPOSTUnauthorized ", 401)
}

func (o *ReplaceContentByDownloadURLUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceContentByDownloadURLUsingPOSTForbidden creates a ReplaceContentByDownloadURLUsingPOSTForbidden with default headers values
func NewReplaceContentByDownloadURLUsingPOSTForbidden() *ReplaceContentByDownloadURLUsingPOSTForbidden {
	return &ReplaceContentByDownloadURLUsingPOSTForbidden{}
}

/*ReplaceContentByDownloadURLUsingPOSTForbidden handles this case with default header values.

Forbidden
*/
type ReplaceContentByDownloadURLUsingPOSTForbidden struct {
}

func (o *ReplaceContentByDownloadURLUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /lcm/crepo/api/content/replace][%d] replaceContentByDownloadUrlUsingPOSTForbidden ", 403)
}

func (o *ReplaceContentByDownloadURLUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceContentByDownloadURLUsingPOSTNotFound creates a ReplaceContentByDownloadURLUsingPOSTNotFound with default headers values
func NewReplaceContentByDownloadURLUsingPOSTNotFound() *ReplaceContentByDownloadURLUsingPOSTNotFound {
	return &ReplaceContentByDownloadURLUsingPOSTNotFound{}
}

/*ReplaceContentByDownloadURLUsingPOSTNotFound handles this case with default header values.

Not Found
*/
type ReplaceContentByDownloadURLUsingPOSTNotFound struct {
}

func (o *ReplaceContentByDownloadURLUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /lcm/crepo/api/content/replace][%d] replaceContentByDownloadUrlUsingPOSTNotFound ", 404)
}

func (o *ReplaceContentByDownloadURLUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
