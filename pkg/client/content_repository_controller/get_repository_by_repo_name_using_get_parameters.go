// Code generated by go-swagger; DO NOT EDIT.

package content_repository_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRepositoryByRepoNameUsingGETParams creates a new GetRepositoryByRepoNameUsingGETParams object
// with the default values initialized.
func NewGetRepositoryByRepoNameUsingGETParams() *GetRepositoryByRepoNameUsingGETParams {
	var ()
	return &GetRepositoryByRepoNameUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRepositoryByRepoNameUsingGETParamsWithTimeout creates a new GetRepositoryByRepoNameUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRepositoryByRepoNameUsingGETParamsWithTimeout(timeout time.Duration) *GetRepositoryByRepoNameUsingGETParams {
	var ()
	return &GetRepositoryByRepoNameUsingGETParams{

		timeout: timeout,
	}
}

// NewGetRepositoryByRepoNameUsingGETParamsWithContext creates a new GetRepositoryByRepoNameUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRepositoryByRepoNameUsingGETParamsWithContext(ctx context.Context) *GetRepositoryByRepoNameUsingGETParams {
	var ()
	return &GetRepositoryByRepoNameUsingGETParams{

		Context: ctx,
	}
}

// NewGetRepositoryByRepoNameUsingGETParamsWithHTTPClient creates a new GetRepositoryByRepoNameUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRepositoryByRepoNameUsingGETParamsWithHTTPClient(client *http.Client) *GetRepositoryByRepoNameUsingGETParams {
	var ()
	return &GetRepositoryByRepoNameUsingGETParams{
		HTTPClient: client,
	}
}

/*GetRepositoryByRepoNameUsingGETParams contains all the parameters to send to the API endpoint
for the get repository by repo name using g e t operation typically these are written to a http.Request
*/
type GetRepositoryByRepoNameUsingGETParams struct {

	/*RepoName
	  repoName

	*/
	RepoName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get repository by repo name using g e t params
func (o *GetRepositoryByRepoNameUsingGETParams) WithTimeout(timeout time.Duration) *GetRepositoryByRepoNameUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get repository by repo name using g e t params
func (o *GetRepositoryByRepoNameUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get repository by repo name using g e t params
func (o *GetRepositoryByRepoNameUsingGETParams) WithContext(ctx context.Context) *GetRepositoryByRepoNameUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get repository by repo name using g e t params
func (o *GetRepositoryByRepoNameUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get repository by repo name using g e t params
func (o *GetRepositoryByRepoNameUsingGETParams) WithHTTPClient(client *http.Client) *GetRepositoryByRepoNameUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get repository by repo name using g e t params
func (o *GetRepositoryByRepoNameUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRepoName adds the repoName to the get repository by repo name using g e t params
func (o *GetRepositoryByRepoNameUsingGETParams) WithRepoName(repoName string) *GetRepositoryByRepoNameUsingGETParams {
	o.SetRepoName(repoName)
	return o
}

// SetRepoName adds the repoName to the get repository by repo name using g e t params
func (o *GetRepositoryByRepoNameUsingGETParams) SetRepoName(repoName string) {
	o.RepoName = repoName
}

// WriteToRequest writes these params to a swagger request
func (o *GetRepositoryByRepoNameUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param repoName
	if err := r.SetPathParam("repoName", o.RepoName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
