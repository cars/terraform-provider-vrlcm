// Code generated by go-swagger; DO NOT EDIT.

package content_repository_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UploadContentUsingPOSTReader is a Reader for the UploadContentUsingPOST structure.
type UploadContentUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadContentUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadContentUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUploadContentUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUploadContentUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUploadContentUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUploadContentUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUploadContentUsingPOSTOK creates a UploadContentUsingPOSTOK with default headers values
func NewUploadContentUsingPOSTOK() *UploadContentUsingPOSTOK {
	return &UploadContentUsingPOSTOK{}
}

/*UploadContentUsingPOSTOK handles this case with default header values.

OK
*/
type UploadContentUsingPOSTOK struct {
	Payload string
}

func (o *UploadContentUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /lcm/crepo/api/content/upload/{vmid}][%d] uploadContentUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *UploadContentUsingPOSTOK) GetPayload() string {
	return o.Payload
}

func (o *UploadContentUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadContentUsingPOSTCreated creates a UploadContentUsingPOSTCreated with default headers values
func NewUploadContentUsingPOSTCreated() *UploadContentUsingPOSTCreated {
	return &UploadContentUsingPOSTCreated{}
}

/*UploadContentUsingPOSTCreated handles this case with default header values.

Created
*/
type UploadContentUsingPOSTCreated struct {
}

func (o *UploadContentUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /lcm/crepo/api/content/upload/{vmid}][%d] uploadContentUsingPOSTCreated ", 201)
}

func (o *UploadContentUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadContentUsingPOSTUnauthorized creates a UploadContentUsingPOSTUnauthorized with default headers values
func NewUploadContentUsingPOSTUnauthorized() *UploadContentUsingPOSTUnauthorized {
	return &UploadContentUsingPOSTUnauthorized{}
}

/*UploadContentUsingPOSTUnauthorized handles this case with default header values.

Unauthorized
*/
type UploadContentUsingPOSTUnauthorized struct {
}

func (o *UploadContentUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /lcm/crepo/api/content/upload/{vmid}][%d] uploadContentUsingPOSTUnauthorized ", 401)
}

func (o *UploadContentUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadContentUsingPOSTForbidden creates a UploadContentUsingPOSTForbidden with default headers values
func NewUploadContentUsingPOSTForbidden() *UploadContentUsingPOSTForbidden {
	return &UploadContentUsingPOSTForbidden{}
}

/*UploadContentUsingPOSTForbidden handles this case with default header values.

Forbidden
*/
type UploadContentUsingPOSTForbidden struct {
}

func (o *UploadContentUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /lcm/crepo/api/content/upload/{vmid}][%d] uploadContentUsingPOSTForbidden ", 403)
}

func (o *UploadContentUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadContentUsingPOSTNotFound creates a UploadContentUsingPOSTNotFound with default headers values
func NewUploadContentUsingPOSTNotFound() *UploadContentUsingPOSTNotFound {
	return &UploadContentUsingPOSTNotFound{}
}

/*UploadContentUsingPOSTNotFound handles this case with default header values.

Not Found
*/
type UploadContentUsingPOSTNotFound struct {
}

func (o *UploadContentUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /lcm/crepo/api/content/upload/{vmid}][%d] uploadContentUsingPOSTNotFound ", 404)
}

func (o *UploadContentUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
