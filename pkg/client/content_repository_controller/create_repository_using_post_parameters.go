// Code generated by go-swagger; DO NOT EDIT.

package content_repository_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// NewCreateRepositoryUsingPOSTParams creates a new CreateRepositoryUsingPOSTParams object
// with the default values initialized.
func NewCreateRepositoryUsingPOSTParams() *CreateRepositoryUsingPOSTParams {
	var ()
	return &CreateRepositoryUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateRepositoryUsingPOSTParamsWithTimeout creates a new CreateRepositoryUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateRepositoryUsingPOSTParamsWithTimeout(timeout time.Duration) *CreateRepositoryUsingPOSTParams {
	var ()
	return &CreateRepositoryUsingPOSTParams{

		timeout: timeout,
	}
}

// NewCreateRepositoryUsingPOSTParamsWithContext creates a new CreateRepositoryUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateRepositoryUsingPOSTParamsWithContext(ctx context.Context) *CreateRepositoryUsingPOSTParams {
	var ()
	return &CreateRepositoryUsingPOSTParams{

		Context: ctx,
	}
}

// NewCreateRepositoryUsingPOSTParamsWithHTTPClient creates a new CreateRepositoryUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateRepositoryUsingPOSTParamsWithHTTPClient(client *http.Client) *CreateRepositoryUsingPOSTParams {
	var ()
	return &CreateRepositoryUsingPOSTParams{
		HTTPClient: client,
	}
}

/*CreateRepositoryUsingPOSTParams contains all the parameters to send to the API endpoint
for the create repository using p o s t operation typically these are written to a http.Request
*/
type CreateRepositoryUsingPOSTParams struct {

	/*RepositoryDto
	  repositoryDto

	*/
	RepositoryDto *models.RepositoryDTO

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create repository using p o s t params
func (o *CreateRepositoryUsingPOSTParams) WithTimeout(timeout time.Duration) *CreateRepositoryUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create repository using p o s t params
func (o *CreateRepositoryUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create repository using p o s t params
func (o *CreateRepositoryUsingPOSTParams) WithContext(ctx context.Context) *CreateRepositoryUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create repository using p o s t params
func (o *CreateRepositoryUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create repository using p o s t params
func (o *CreateRepositoryUsingPOSTParams) WithHTTPClient(client *http.Client) *CreateRepositoryUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create repository using p o s t params
func (o *CreateRepositoryUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRepositoryDto adds the repositoryDto to the create repository using p o s t params
func (o *CreateRepositoryUsingPOSTParams) WithRepositoryDto(repositoryDto *models.RepositoryDTO) *CreateRepositoryUsingPOSTParams {
	o.SetRepositoryDto(repositoryDto)
	return o
}

// SetRepositoryDto adds the repositoryDto to the create repository using p o s t params
func (o *CreateRepositoryUsingPOSTParams) SetRepositoryDto(repositoryDto *models.RepositoryDTO) {
	o.RepositoryDto = repositoryDto
}

// WriteToRequest writes these params to a swagger request
func (o *CreateRepositoryUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RepositoryDto != nil {
		if err := r.SetBodyParam(o.RepositoryDto); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
