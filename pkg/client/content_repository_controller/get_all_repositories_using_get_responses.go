// Code generated by go-swagger; DO NOT EDIT.

package content_repository_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// GetAllRepositoriesUsingGETReader is a Reader for the GetAllRepositoriesUsingGET structure.
type GetAllRepositoriesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllRepositoriesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllRepositoriesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllRepositoriesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllRepositoriesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllRepositoriesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllRepositoriesUsingGETOK creates a GetAllRepositoriesUsingGETOK with default headers values
func NewGetAllRepositoriesUsingGETOK() *GetAllRepositoriesUsingGETOK {
	return &GetAllRepositoriesUsingGETOK{}
}

/*GetAllRepositoriesUsingGETOK handles this case with default header values.

OK
*/
type GetAllRepositoriesUsingGETOK struct {
	Payload []*models.RepositoryDTO
}

func (o *GetAllRepositoriesUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /lcm/crepo/api/repository][%d] getAllRepositoriesUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllRepositoriesUsingGETOK) GetPayload() []*models.RepositoryDTO {
	return o.Payload
}

func (o *GetAllRepositoriesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRepositoriesUsingGETUnauthorized creates a GetAllRepositoriesUsingGETUnauthorized with default headers values
func NewGetAllRepositoriesUsingGETUnauthorized() *GetAllRepositoriesUsingGETUnauthorized {
	return &GetAllRepositoriesUsingGETUnauthorized{}
}

/*GetAllRepositoriesUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetAllRepositoriesUsingGETUnauthorized struct {
}

func (o *GetAllRepositoriesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /lcm/crepo/api/repository][%d] getAllRepositoriesUsingGETUnauthorized ", 401)
}

func (o *GetAllRepositoriesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllRepositoriesUsingGETForbidden creates a GetAllRepositoriesUsingGETForbidden with default headers values
func NewGetAllRepositoriesUsingGETForbidden() *GetAllRepositoriesUsingGETForbidden {
	return &GetAllRepositoriesUsingGETForbidden{}
}

/*GetAllRepositoriesUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetAllRepositoriesUsingGETForbidden struct {
}

func (o *GetAllRepositoriesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /lcm/crepo/api/repository][%d] getAllRepositoriesUsingGETForbidden ", 403)
}

func (o *GetAllRepositoriesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllRepositoriesUsingGETNotFound creates a GetAllRepositoriesUsingGETNotFound with default headers values
func NewGetAllRepositoriesUsingGETNotFound() *GetAllRepositoriesUsingGETNotFound {
	return &GetAllRepositoriesUsingGETNotFound{}
}

/*GetAllRepositoriesUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetAllRepositoriesUsingGETNotFound struct {
}

func (o *GetAllRepositoriesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /lcm/crepo/api/repository][%d] getAllRepositoriesUsingGETNotFound ", 404)
}

func (o *GetAllRepositoriesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
