// Code generated by go-swagger; DO NOT EDIT.

package content_repository_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new content repository controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for content repository controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateContentUsingPOST(params *CreateContentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateContentUsingPOSTOK, *CreateContentUsingPOSTCreated, error)

	CreateRepositoryUsingPOST(params *CreateRepositoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRepositoryUsingPOSTOK, *CreateRepositoryUsingPOSTCreated, error)

	DeleteContentUsingDELETE(params *DeleteContentUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteContentUsingDELETEOK, *DeleteContentUsingDELETENoContent, error)

	DeleteContentbyBulkUsingDELETE(params *DeleteContentbyBulkUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteContentbyBulkUsingDELETEOK, *DeleteContentbyBulkUsingDELETENoContent, error)

	DownloadContentUsingPOST(params *DownloadContentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadContentUsingPOSTOK, *DownloadContentUsingPOSTCreated, error)

	GetAllRepositoriesUsingGET(params *GetAllRepositoriesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllRepositoriesUsingGETOK, error)

	GetContentByIDUsingGET(params *GetContentByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetContentByIDUsingGETOK, error)

	GetRepositoryByRepoNameUsingGET(params *GetRepositoryByRepoNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoryByRepoNameUsingGETOK, error)

	ReplaceContentByDownloadURLUsingPOST(params *ReplaceContentByDownloadURLUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceContentByDownloadURLUsingPOSTOK, *ReplaceContentByDownloadURLUsingPOSTCreated, error)

	UploadContentUsingPOST(params *UploadContentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UploadContentUsingPOSTOK, *UploadContentUsingPOSTCreated, error)

	UploadContentsInBulkUsingPOST(params *UploadContentsInBulkUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UploadContentsInBulkUsingPOSTOK, *UploadContentsInBulkUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateContentUsingPOST creates content
*/
func (a *Client) CreateContentUsingPOST(params *CreateContentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateContentUsingPOSTOK, *CreateContentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContentUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createContentUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/content",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateContentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateContentUsingPOSTOK:
		return value, nil, nil
	case *CreateContentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_repository_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRepositoryUsingPOST creates repository
*/
func (a *Client) CreateRepositoryUsingPOST(params *CreateRepositoryUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRepositoryUsingPOSTOK, *CreateRepositoryUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRepositoryUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRepositoryUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/repository",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRepositoryUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRepositoryUsingPOSTOK:
		return value, nil, nil
	case *CreateRepositoryUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_repository_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteContentUsingDELETE deletes content
*/
func (a *Client) DeleteContentUsingDELETE(params *DeleteContentUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteContentUsingDELETEOK, *DeleteContentUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContentUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteContentUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/crepo/api/content/delete",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteContentUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteContentUsingDELETEOK:
		return value, nil, nil
	case *DeleteContentUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_repository_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteContentbyBulkUsingDELETE deletes contentby bulk
*/
func (a *Client) DeleteContentbyBulkUsingDELETE(params *DeleteContentbyBulkUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteContentbyBulkUsingDELETEOK, *DeleteContentbyBulkUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContentbyBulkUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteContentbyBulkUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/crepo/api/content/delete/bulk",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteContentbyBulkUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteContentbyBulkUsingDELETEOK:
		return value, nil, nil
	case *DeleteContentbyBulkUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_repository_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DownloadContentUsingPOST downloads content
*/
func (a *Client) DownloadContentUsingPOST(params *DownloadContentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*DownloadContentUsingPOSTOK, *DownloadContentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadContentUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadContentUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/content/download/{vmid}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadContentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DownloadContentUsingPOSTOK:
		return value, nil, nil
	case *DownloadContentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_repository_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllRepositoriesUsingGET gets all repositories
*/
func (a *Client) GetAllRepositoriesUsingGET(params *GetAllRepositoriesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllRepositoriesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRepositoriesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllRepositoriesUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/crepo/api/repository",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRepositoriesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllRepositoriesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllRepositoriesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetContentByIDUsingGET gets content by Id
*/
func (a *Client) GetContentByIDUsingGET(params *GetContentByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetContentByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContentByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/crepo/api/content/{vmid}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContentByIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContentByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getContentByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryByRepoNameUsingGET gets repository by repo name
*/
func (a *Client) GetRepositoryByRepoNameUsingGET(params *GetRepositoryByRepoNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoryByRepoNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryByRepoNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryByRepoNameUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/crepo/api/repository/{repoName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoryByRepoNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryByRepoNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryByRepoNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceContentByDownloadURLUsingPOST replaces content by download Url
*/
func (a *Client) ReplaceContentByDownloadURLUsingPOST(params *ReplaceContentByDownloadURLUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceContentByDownloadURLUsingPOSTOK, *ReplaceContentByDownloadURLUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceContentByDownloadURLUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceContentByDownloadUrlUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/content/replace",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceContentByDownloadURLUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceContentByDownloadURLUsingPOSTOK:
		return value, nil, nil
	case *ReplaceContentByDownloadURLUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_repository_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadContentUsingPOST uploads content
*/
func (a *Client) UploadContentUsingPOST(params *UploadContentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UploadContentUsingPOSTOK, *UploadContentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadContentUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadContentUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/content/upload/{vmid}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadContentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UploadContentUsingPOSTOK:
		return value, nil, nil
	case *UploadContentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_repository_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadContentsInBulkUsingPOST uploads contents in bulk
*/
func (a *Client) UploadContentsInBulkUsingPOST(params *UploadContentsInBulkUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UploadContentsInBulkUsingPOSTOK, *UploadContentsInBulkUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadContentsInBulkUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadContentsInBulkUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/content/upload/bulk",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadContentsInBulkUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UploadContentsInBulkUsingPOSTOK:
		return value, nil, nil
	case *UploadContentsInBulkUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for content_repository_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
