// Code generated by go-swagger; DO NOT EDIT.

package authentication_group_role_mapping_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authentication group role mapping a p is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authentication group role mapping a p is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BulkImportGroupRoleMappingUsingPOST(params *BulkImportGroupRoleMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*BulkImportGroupRoleMappingUsingPOSTOK, *BulkImportGroupRoleMappingUsingPOSTCreated, error)

	CreateGroupRoleMappingUsingPOST(params *CreateGroupRoleMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGroupRoleMappingUsingPOSTOK, *CreateGroupRoleMappingUsingPOSTCreated, error)

	DeleteAllGroupRoleMappingsUsingDELETE(params *DeleteAllGroupRoleMappingsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllGroupRoleMappingsUsingDELETEOK, *DeleteAllGroupRoleMappingsUsingDELETENoContent, error)

	DeleteGroupMappingGivenGroupIDUsingDELETE(params *DeleteGroupMappingGivenGroupIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupMappingGivenGroupIDUsingDELETEOK, *DeleteGroupMappingGivenGroupIDUsingDELETENoContent, error)

	DeleteGroupMappingGivenRoleIDUsingDELETE(params *DeleteGroupMappingGivenRoleIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupMappingGivenRoleIDUsingDELETEOK, *DeleteGroupMappingGivenRoleIDUsingDELETENoContent, error)

	DeleteGroupMappingGivenVmidUsingDELETE(params *DeleteGroupMappingGivenVmidUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupMappingGivenVmidUsingDELETEOK, *DeleteGroupMappingGivenVmidUsingDELETENoContent, error)

	GetAllGroupRoleMappingsUsingGET(params *GetAllGroupRoleMappingsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllGroupRoleMappingsUsingGETOK, error)

	GetGroupRoleMappingByIDUsingGET(params *GetGroupRoleMappingByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupRoleMappingByIDUsingGETOK, error)

	GetGroupRoleMappingGivenGroupIDUsingGET(params *GetGroupRoleMappingGivenGroupIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupRoleMappingGivenGroupIDUsingGETOK, error)

	GetGroupRoleMappingGivenRoleIDUsingGET(params *GetGroupRoleMappingGivenRoleIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupRoleMappingGivenRoleIDUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BulkImportGroupRoleMappingUsingPOST bulks import group role mapping
*/
func (a *Client) BulkImportGroupRoleMappingUsingPOST(params *BulkImportGroupRoleMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*BulkImportGroupRoleMappingUsingPOSTOK, *BulkImportGroupRoleMappingUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkImportGroupRoleMappingUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "bulkImportGroupRoleMappingUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/grouprolemapping/bulkimport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BulkImportGroupRoleMappingUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BulkImportGroupRoleMappingUsingPOSTOK:
		return value, nil, nil
	case *BulkImportGroupRoleMappingUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateGroupRoleMappingUsingPOST creates group role mapping
*/
func (a *Client) CreateGroupRoleMappingUsingPOST(params *CreateGroupRoleMappingUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGroupRoleMappingUsingPOSTOK, *CreateGroupRoleMappingUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupRoleMappingUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGroupRoleMappingUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/grouprolemapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGroupRoleMappingUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateGroupRoleMappingUsingPOSTOK:
		return value, nil, nil
	case *CreateGroupRoleMappingUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAllGroupRoleMappingsUsingDELETE deletes all group role mappings
*/
func (a *Client) DeleteAllGroupRoleMappingsUsingDELETE(params *DeleteAllGroupRoleMappingsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllGroupRoleMappingsUsingDELETEOK, *DeleteAllGroupRoleMappingsUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllGroupRoleMappingsUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllGroupRoleMappingsUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/grouprolemapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllGroupRoleMappingsUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAllGroupRoleMappingsUsingDELETEOK:
		return value, nil, nil
	case *DeleteAllGroupRoleMappingsUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGroupMappingGivenGroupIDUsingDELETE deletes group mapping given group Id
*/
func (a *Client) DeleteGroupMappingGivenGroupIDUsingDELETE(params *DeleteGroupMappingGivenGroupIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupMappingGivenGroupIDUsingDELETEOK, *DeleteGroupMappingGivenGroupIDUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupMappingGivenGroupIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGroupMappingGivenGroupIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/grouprolemapping/groupId/{groupvmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGroupMappingGivenGroupIDUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteGroupMappingGivenGroupIDUsingDELETEOK:
		return value, nil, nil
	case *DeleteGroupMappingGivenGroupIDUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGroupMappingGivenRoleIDUsingDELETE deletes group mapping given role Id
*/
func (a *Client) DeleteGroupMappingGivenRoleIDUsingDELETE(params *DeleteGroupMappingGivenRoleIDUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupMappingGivenRoleIDUsingDELETEOK, *DeleteGroupMappingGivenRoleIDUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupMappingGivenRoleIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGroupMappingGivenRoleIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/grouprolemapping/roleId/{rolevmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGroupMappingGivenRoleIDUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteGroupMappingGivenRoleIDUsingDELETEOK:
		return value, nil, nil
	case *DeleteGroupMappingGivenRoleIDUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGroupMappingGivenVmidUsingDELETE deletes group mapping given vmid
*/
func (a *Client) DeleteGroupMappingGivenVmidUsingDELETE(params *DeleteGroupMappingGivenVmidUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupMappingGivenVmidUsingDELETEOK, *DeleteGroupMappingGivenVmidUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupMappingGivenVmidUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGroupMappingGivenVmidUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/authzn/api/grouprolemapping/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGroupMappingGivenVmidUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteGroupMappingGivenVmidUsingDELETEOK:
		return value, nil, nil
	case *DeleteGroupMappingGivenVmidUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_group_role_mapping_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllGroupRoleMappingsUsingGET gets all group role mappings
*/
func (a *Client) GetAllGroupRoleMappingsUsingGET(params *GetAllGroupRoleMappingsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllGroupRoleMappingsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllGroupRoleMappingsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllGroupRoleMappingsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/grouprolemapping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllGroupRoleMappingsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllGroupRoleMappingsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllGroupRoleMappingsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupRoleMappingByIDUsingGET gets group role mapping by Id
*/
func (a *Client) GetGroupRoleMappingByIDUsingGET(params *GetGroupRoleMappingByIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupRoleMappingByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupRoleMappingByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupRoleMappingByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/grouprolemapping/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupRoleMappingByIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupRoleMappingByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupRoleMappingByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupRoleMappingGivenGroupIDUsingGET gets group role mapping given group Id
*/
func (a *Client) GetGroupRoleMappingGivenGroupIDUsingGET(params *GetGroupRoleMappingGivenGroupIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupRoleMappingGivenGroupIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupRoleMappingGivenGroupIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupRoleMappingGivenGroupIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/grouprolemapping/groupId/{groupvmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupRoleMappingGivenGroupIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupRoleMappingGivenGroupIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupRoleMappingGivenGroupIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupRoleMappingGivenRoleIDUsingGET gets group role mapping given role Id
*/
func (a *Client) GetGroupRoleMappingGivenRoleIDUsingGET(params *GetGroupRoleMappingGivenRoleIDUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupRoleMappingGivenRoleIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupRoleMappingGivenRoleIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupRoleMappingGivenRoleIdUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/grouprolemapping/roleId/{rolevmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGroupRoleMappingGivenRoleIDUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupRoleMappingGivenRoleIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupRoleMappingGivenRoleIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
