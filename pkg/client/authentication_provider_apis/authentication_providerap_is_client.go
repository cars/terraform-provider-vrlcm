// Code generated by go-swagger; DO NOT EDIT.

package authentication_provider_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authentication provider a p is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authentication provider a p is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	RunSetAuthProviderUsingPOST(params *RunSetAuthProviderUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RunSetAuthProviderUsingPOSTOK, *RunSetAuthProviderUsingPOSTCreated, error)

	UpdateLcmHostWithAuthProviderUsingPOST(params *UpdateLcmHostWithAuthProviderUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLcmHostWithAuthProviderUsingPOSTOK, *UpdateLcmHostWithAuthProviderUsingPOSTCreated, error)

	UpdateLcmWithAuthProviderHostUsingPOST(params *UpdateLcmWithAuthProviderHostUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLcmWithAuthProviderHostUsingPOSTOK, *UpdateLcmWithAuthProviderHostUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RunSetAuthProviderUsingPOST resets authentication provider in v r s l c m
*/
func (a *Client) RunSetAuthProviderUsingPOST(params *RunSetAuthProviderUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RunSetAuthProviderUsingPOSTOK, *RunSetAuthProviderUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunSetAuthProviderUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "runSetAuthProviderUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/setauthprovider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunSetAuthProviderUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunSetAuthProviderUsingPOSTOK:
		return value, nil, nil
	case *RunSetAuthProviderUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_provider_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateLcmHostWithAuthProviderUsingPOST updates v r s l c m f q d n on the authentication provider v ID m
*/
func (a *Client) UpdateLcmHostWithAuthProviderUsingPOST(params *UpdateLcmHostWithAuthProviderUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLcmHostWithAuthProviderUsingPOSTOK, *UpdateLcmHostWithAuthProviderUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLcmHostWithAuthProviderUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLcmHostWithAuthProviderUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/updlcmhostwithprovider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLcmHostWithAuthProviderUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateLcmHostWithAuthProviderUsingPOSTOK:
		return value, nil, nil
	case *UpdateLcmHostWithAuthProviderUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_provider_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateLcmWithAuthProviderHostUsingPOST updates authentication provider v ID m hostname in v r s l c m
*/
func (a *Client) UpdateLcmWithAuthProviderHostUsingPOST(params *UpdateLcmWithAuthProviderHostUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateLcmWithAuthProviderHostUsingPOSTOK, *UpdateLcmWithAuthProviderHostUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLcmWithAuthProviderHostUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLcmWithAuthProviderHostUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/updproviderhostwithlcm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLcmWithAuthProviderHostUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateLcmWithAuthProviderHostUsingPOSTOK:
		return value, nil, nil
	case *UpdateLcmWithAuthProviderHostUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authentication_provider_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
