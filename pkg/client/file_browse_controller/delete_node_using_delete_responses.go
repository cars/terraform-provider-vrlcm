// Code generated by go-swagger; DO NOT EDIT.

package file_browse_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteNodeUsingDELETEReader is a Reader for the DeleteNodeUsingDELETE structure.
type DeleteNodeUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNodeUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteNodeUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteNodeUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteNodeUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteNodeUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteNodeUsingDELETEOK creates a DeleteNodeUsingDELETEOK with default headers values
func NewDeleteNodeUsingDELETEOK() *DeleteNodeUsingDELETEOK {
	return &DeleteNodeUsingDELETEOK{}
}

/*DeleteNodeUsingDELETEOK handles this case with default header values.

OK
*/
type DeleteNodeUsingDELETEOK struct {
}

func (o *DeleteNodeUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /lcm/crepo/api/content/nodes/{vmid}][%d] deleteNodeUsingDELETEOK ", 200)
}

func (o *DeleteNodeUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNodeUsingDELETENoContent creates a DeleteNodeUsingDELETENoContent with default headers values
func NewDeleteNodeUsingDELETENoContent() *DeleteNodeUsingDELETENoContent {
	return &DeleteNodeUsingDELETENoContent{}
}

/*DeleteNodeUsingDELETENoContent handles this case with default header values.

No Content
*/
type DeleteNodeUsingDELETENoContent struct {
}

func (o *DeleteNodeUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /lcm/crepo/api/content/nodes/{vmid}][%d] deleteNodeUsingDELETENoContent ", 204)
}

func (o *DeleteNodeUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNodeUsingDELETEUnauthorized creates a DeleteNodeUsingDELETEUnauthorized with default headers values
func NewDeleteNodeUsingDELETEUnauthorized() *DeleteNodeUsingDELETEUnauthorized {
	return &DeleteNodeUsingDELETEUnauthorized{}
}

/*DeleteNodeUsingDELETEUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteNodeUsingDELETEUnauthorized struct {
}

func (o *DeleteNodeUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /lcm/crepo/api/content/nodes/{vmid}][%d] deleteNodeUsingDELETEUnauthorized ", 401)
}

func (o *DeleteNodeUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNodeUsingDELETEForbidden creates a DeleteNodeUsingDELETEForbidden with default headers values
func NewDeleteNodeUsingDELETEForbidden() *DeleteNodeUsingDELETEForbidden {
	return &DeleteNodeUsingDELETEForbidden{}
}

/*DeleteNodeUsingDELETEForbidden handles this case with default header values.

Forbidden
*/
type DeleteNodeUsingDELETEForbidden struct {
}

func (o *DeleteNodeUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /lcm/crepo/api/content/nodes/{vmid}][%d] deleteNodeUsingDELETEForbidden ", 403)
}

func (o *DeleteNodeUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
