// Code generated by go-swagger; DO NOT EDIT.

package file_browse_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new file browse controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for file browse controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNodeUsingPOST(params *CreateNodeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNodeUsingPOSTOK, *CreateNodeUsingPOSTCreated, error)

	DeleteNodeUsingDELETE(params *DeleteNodeUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNodeUsingDELETEOK, *DeleteNodeUsingDELETENoContent, error)

	ExportNodeUsingPOST(params *ExportNodeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ExportNodeUsingPOSTOK, *ExportNodeUsingPOSTCreated, error)

	GetAllNodesUsingGET(params *GetAllNodesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllNodesUsingGETOK, error)

	GetChildrenUsingGET(params *GetChildrenUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetChildrenUsingGETOK, error)

	GetNodeUsingGET(params *GetNodeUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeUsingGETOK, error)

	ImportNodeUsingPOST(params *ImportNodeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ImportNodeUsingPOSTOK, *ImportNodeUsingPOSTCreated, error)

	ReplaceNodeUsingPUT(params *ReplaceNodeUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceNodeUsingPUTOK, *ReplaceNodeUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNodeUsingPOST creates node
*/
func (a *Client) CreateNodeUsingPOST(params *CreateNodeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNodeUsingPOSTOK, *CreateNodeUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNodeUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNodeUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/content/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNodeUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNodeUsingPOSTOK:
		return value, nil, nil
	case *CreateNodeUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for file_browse_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNodeUsingDELETE deletes node
*/
func (a *Client) DeleteNodeUsingDELETE(params *DeleteNodeUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNodeUsingDELETEOK, *DeleteNodeUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodeUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNodeUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/crepo/api/content/nodes/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNodeUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteNodeUsingDELETEOK:
		return value, nil, nil
	case *DeleteNodeUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for file_browse_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportNodeUsingPOST exports node
*/
func (a *Client) ExportNodeUsingPOST(params *ExportNodeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ExportNodeUsingPOSTOK, *ExportNodeUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportNodeUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportNodeUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/content/nodes/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportNodeUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExportNodeUsingPOSTOK:
		return value, nil, nil
	case *ExportNodeUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for file_browse_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllNodesUsingGET gets all nodes
*/
func (a *Client) GetAllNodesUsingGET(params *GetAllNodesUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllNodesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllNodesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllNodesUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/crepo/api/content/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllNodesUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllNodesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllNodesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChildrenUsingGET gets children
*/
func (a *Client) GetChildrenUsingGET(params *GetChildrenUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetChildrenUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChildrenUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChildrenUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/crepo/api/content/nodes/children/{parentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChildrenUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChildrenUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChildrenUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNodeUsingGET gets node
*/
func (a *Client) GetNodeUsingGET(params *GetNodeUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/crepo/api/content/nodes/{vmid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNodeUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportNodeUsingPOST imports node
*/
func (a *Client) ImportNodeUsingPOST(params *ImportNodeUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*ImportNodeUsingPOSTOK, *ImportNodeUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportNodeUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importNodeUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/crepo/api/content/nodes/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportNodeUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ImportNodeUsingPOSTOK:
		return value, nil, nil
	case *ImportNodeUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for file_browse_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceNodeUsingPUT replaces node
*/
func (a *Client) ReplaceNodeUsingPUT(params *ReplaceNodeUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceNodeUsingPUTOK, *ReplaceNodeUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNodeUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceNodeUsingPUT",
		Method:             "PUT",
		PathPattern:        "/lcm/crepo/api/content/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNodeUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNodeUsingPUTOK:
		return value, nil, nil
	case *ReplaceNodeUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for file_browse_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
