// Code generated by go-swagger; DO NOT EDIT.

package file_browse_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// NewImportNodeUsingPOSTParams creates a new ImportNodeUsingPOSTParams object
// with the default values initialized.
func NewImportNodeUsingPOSTParams() *ImportNodeUsingPOSTParams {
	var ()
	return &ImportNodeUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewImportNodeUsingPOSTParamsWithTimeout creates a new ImportNodeUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportNodeUsingPOSTParamsWithTimeout(timeout time.Duration) *ImportNodeUsingPOSTParams {
	var ()
	return &ImportNodeUsingPOSTParams{

		timeout: timeout,
	}
}

// NewImportNodeUsingPOSTParamsWithContext creates a new ImportNodeUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportNodeUsingPOSTParamsWithContext(ctx context.Context) *ImportNodeUsingPOSTParams {
	var ()
	return &ImportNodeUsingPOSTParams{

		Context: ctx,
	}
}

// NewImportNodeUsingPOSTParamsWithHTTPClient creates a new ImportNodeUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportNodeUsingPOSTParamsWithHTTPClient(client *http.Client) *ImportNodeUsingPOSTParams {
	var ()
	return &ImportNodeUsingPOSTParams{
		HTTPClient: client,
	}
}

/*ImportNodeUsingPOSTParams contains all the parameters to send to the API endpoint
for the import node using p o s t operation typically these are written to a http.Request
*/
type ImportNodeUsingPOSTParams struct {

	/*Nodes
	  nodes

	*/
	Nodes []*models.NodeDTO

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import node using p o s t params
func (o *ImportNodeUsingPOSTParams) WithTimeout(timeout time.Duration) *ImportNodeUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import node using p o s t params
func (o *ImportNodeUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import node using p o s t params
func (o *ImportNodeUsingPOSTParams) WithContext(ctx context.Context) *ImportNodeUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import node using p o s t params
func (o *ImportNodeUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import node using p o s t params
func (o *ImportNodeUsingPOSTParams) WithHTTPClient(client *http.Client) *ImportNodeUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import node using p o s t params
func (o *ImportNodeUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNodes adds the nodes to the import node using p o s t params
func (o *ImportNodeUsingPOSTParams) WithNodes(nodes []*models.NodeDTO) *ImportNodeUsingPOSTParams {
	o.SetNodes(nodes)
	return o
}

// SetNodes adds the nodes to the import node using p o s t params
func (o *ImportNodeUsingPOSTParams) SetNodes(nodes []*models.NodeDTO) {
	o.Nodes = nodes
}

// WriteToRequest writes these params to a swagger request
func (o *ImportNodeUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Nodes != nil {
		if err := r.SetBodyParam(o.Nodes); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
