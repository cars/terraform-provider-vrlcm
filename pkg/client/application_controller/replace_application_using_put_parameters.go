// Code generated by go-swagger; DO NOT EDIT.

package application_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// NewReplaceApplicationUsingPUTParams creates a new ReplaceApplicationUsingPUTParams object
// with the default values initialized.
func NewReplaceApplicationUsingPUTParams() *ReplaceApplicationUsingPUTParams {
	var ()
	return &ReplaceApplicationUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReplaceApplicationUsingPUTParamsWithTimeout creates a new ReplaceApplicationUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReplaceApplicationUsingPUTParamsWithTimeout(timeout time.Duration) *ReplaceApplicationUsingPUTParams {
	var ()
	return &ReplaceApplicationUsingPUTParams{

		timeout: timeout,
	}
}

// NewReplaceApplicationUsingPUTParamsWithContext creates a new ReplaceApplicationUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewReplaceApplicationUsingPUTParamsWithContext(ctx context.Context) *ReplaceApplicationUsingPUTParams {
	var ()
	return &ReplaceApplicationUsingPUTParams{

		Context: ctx,
	}
}

// NewReplaceApplicationUsingPUTParamsWithHTTPClient creates a new ReplaceApplicationUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReplaceApplicationUsingPUTParamsWithHTTPClient(client *http.Client) *ReplaceApplicationUsingPUTParams {
	var ()
	return &ReplaceApplicationUsingPUTParams{
		HTTPClient: client,
	}
}

/*ReplaceApplicationUsingPUTParams contains all the parameters to send to the API endpoint
for the replace application using p u t operation typically these are written to a http.Request
*/
type ReplaceApplicationUsingPUTParams struct {

	/*Property
	  property

	*/
	Property *models.ApplicationDTO

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the replace application using p u t params
func (o *ReplaceApplicationUsingPUTParams) WithTimeout(timeout time.Duration) *ReplaceApplicationUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the replace application using p u t params
func (o *ReplaceApplicationUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the replace application using p u t params
func (o *ReplaceApplicationUsingPUTParams) WithContext(ctx context.Context) *ReplaceApplicationUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the replace application using p u t params
func (o *ReplaceApplicationUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the replace application using p u t params
func (o *ReplaceApplicationUsingPUTParams) WithHTTPClient(client *http.Client) *ReplaceApplicationUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the replace application using p u t params
func (o *ReplaceApplicationUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProperty adds the property to the replace application using p u t params
func (o *ReplaceApplicationUsingPUTParams) WithProperty(property *models.ApplicationDTO) *ReplaceApplicationUsingPUTParams {
	o.SetProperty(property)
	return o
}

// SetProperty adds the property to the replace application using p u t params
func (o *ReplaceApplicationUsingPUTParams) SetProperty(property *models.ApplicationDTO) {
	o.Property = property
}

// WriteToRequest writes these params to a swagger request
func (o *ReplaceApplicationUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Property != nil {
		if err := r.SetBodyParam(o.Property); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
