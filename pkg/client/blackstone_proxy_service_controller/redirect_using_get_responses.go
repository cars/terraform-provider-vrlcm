// Code generated by go-swagger; DO NOT EDIT.

package blackstone_proxy_service_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RedirectUsingGETReader is a Reader for the RedirectUsingGET structure.
type RedirectUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RedirectUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRedirectUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRedirectUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRedirectUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRedirectUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRedirectUsingGETOK creates a RedirectUsingGETOK with default headers values
func NewRedirectUsingGETOK() *RedirectUsingGETOK {
	return &RedirectUsingGETOK{}
}

/*RedirectUsingGETOK handles this case with default header values.

OK
*/
type RedirectUsingGETOK struct {
	Payload string
}

func (o *RedirectUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /lcm/cms/api/**][%d] redirectUsingGETOK  %+v", 200, o.Payload)
}

func (o *RedirectUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *RedirectUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRedirectUsingGETUnauthorized creates a RedirectUsingGETUnauthorized with default headers values
func NewRedirectUsingGETUnauthorized() *RedirectUsingGETUnauthorized {
	return &RedirectUsingGETUnauthorized{}
}

/*RedirectUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type RedirectUsingGETUnauthorized struct {
}

func (o *RedirectUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /lcm/cms/api/**][%d] redirectUsingGETUnauthorized ", 401)
}

func (o *RedirectUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRedirectUsingGETForbidden creates a RedirectUsingGETForbidden with default headers values
func NewRedirectUsingGETForbidden() *RedirectUsingGETForbidden {
	return &RedirectUsingGETForbidden{}
}

/*RedirectUsingGETForbidden handles this case with default header values.

Forbidden
*/
type RedirectUsingGETForbidden struct {
}

func (o *RedirectUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /lcm/cms/api/**][%d] redirectUsingGETForbidden ", 403)
}

func (o *RedirectUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRedirectUsingGETNotFound creates a RedirectUsingGETNotFound with default headers values
func NewRedirectUsingGETNotFound() *RedirectUsingGETNotFound {
	return &RedirectUsingGETNotFound{}
}

/*RedirectUsingGETNotFound handles this case with default header values.

Not Found
*/
type RedirectUsingGETNotFound struct {
}

func (o *RedirectUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /lcm/cms/api/**][%d] redirectUsingGETNotFound ", 404)
}

func (o *RedirectUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
