// Code generated by go-swagger; DO NOT EDIT.

package blackstone_proxy_service_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new blackstone proxy service controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for blackstone proxy service controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	RedirectUsingDELETE(params *RedirectUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingDELETEOK, *RedirectUsingDELETENoContent, error)

	RedirectUsingGET(params *RedirectUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingGETOK, error)

	RedirectUsingHEAD(params *RedirectUsingHEADParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingHEADOK, *RedirectUsingHEADNoContent, error)

	RedirectUsingOPTIONS(params *RedirectUsingOPTIONSParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingOPTIONSOK, *RedirectUsingOPTIONSNoContent, error)

	RedirectUsingPATCH(params *RedirectUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingPATCHOK, *RedirectUsingPATCHNoContent, error)

	RedirectUsingPOST(params *RedirectUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingPOSTOK, *RedirectUsingPOSTCreated, error)

	RedirectUsingPUT(params *RedirectUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingPUTOK, *RedirectUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RedirectUsingDELETE redirects
*/
func (a *Client) RedirectUsingDELETE(params *RedirectUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingDELETEOK, *RedirectUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/lcm/cms/api/**",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RedirectUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RedirectUsingDELETEOK:
		return value, nil, nil
	case *RedirectUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blackstone_proxy_service_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedirectUsingGET redirects
*/
func (a *Client) RedirectUsingGET(params *RedirectUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/cms/api/**",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RedirectUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedirectUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for redirectUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedirectUsingHEAD redirects
*/
func (a *Client) RedirectUsingHEAD(params *RedirectUsingHEADParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingHEADOK, *RedirectUsingHEADNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectUsingHEADParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectUsingHEAD",
		Method:             "HEAD",
		PathPattern:        "/lcm/cms/api/**",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RedirectUsingHEADReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RedirectUsingHEADOK:
		return value, nil, nil
	case *RedirectUsingHEADNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blackstone_proxy_service_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedirectUsingOPTIONS redirects
*/
func (a *Client) RedirectUsingOPTIONS(params *RedirectUsingOPTIONSParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingOPTIONSOK, *RedirectUsingOPTIONSNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectUsingOPTIONSParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectUsingOPTIONS",
		Method:             "OPTIONS",
		PathPattern:        "/lcm/cms/api/**",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RedirectUsingOPTIONSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RedirectUsingOPTIONSOK:
		return value, nil, nil
	case *RedirectUsingOPTIONSNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blackstone_proxy_service_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedirectUsingPATCH redirects
*/
func (a *Client) RedirectUsingPATCH(params *RedirectUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingPATCHOK, *RedirectUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/lcm/cms/api/**",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RedirectUsingPATCHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RedirectUsingPATCHOK:
		return value, nil, nil
	case *RedirectUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blackstone_proxy_service_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedirectUsingPOST redirects
*/
func (a *Client) RedirectUsingPOST(params *RedirectUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingPOSTOK, *RedirectUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/cms/api/**",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RedirectUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RedirectUsingPOSTOK:
		return value, nil, nil
	case *RedirectUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blackstone_proxy_service_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RedirectUsingPUT redirects
*/
func (a *Client) RedirectUsingPUT(params *RedirectUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*RedirectUsingPUTOK, *RedirectUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectUsingPUT",
		Method:             "PUT",
		PathPattern:        "/lcm/cms/api/**",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RedirectUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RedirectUsingPUTOK:
		return value, nil, nil
	case *RedirectUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for blackstone_proxy_service_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
