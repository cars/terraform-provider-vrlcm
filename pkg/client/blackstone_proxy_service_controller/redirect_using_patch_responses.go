// Code generated by go-swagger; DO NOT EDIT.

package blackstone_proxy_service_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RedirectUsingPATCHReader is a Reader for the RedirectUsingPATCH structure.
type RedirectUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RedirectUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRedirectUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRedirectUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRedirectUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRedirectUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRedirectUsingPATCHOK creates a RedirectUsingPATCHOK with default headers values
func NewRedirectUsingPATCHOK() *RedirectUsingPATCHOK {
	return &RedirectUsingPATCHOK{}
}

/*RedirectUsingPATCHOK handles this case with default header values.

OK
*/
type RedirectUsingPATCHOK struct {
	Payload string
}

func (o *RedirectUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /lcm/cms/api/**][%d] redirectUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *RedirectUsingPATCHOK) GetPayload() string {
	return o.Payload
}

func (o *RedirectUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRedirectUsingPATCHNoContent creates a RedirectUsingPATCHNoContent with default headers values
func NewRedirectUsingPATCHNoContent() *RedirectUsingPATCHNoContent {
	return &RedirectUsingPATCHNoContent{}
}

/*RedirectUsingPATCHNoContent handles this case with default header values.

No Content
*/
type RedirectUsingPATCHNoContent struct {
}

func (o *RedirectUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /lcm/cms/api/**][%d] redirectUsingPATCHNoContent ", 204)
}

func (o *RedirectUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRedirectUsingPATCHUnauthorized creates a RedirectUsingPATCHUnauthorized with default headers values
func NewRedirectUsingPATCHUnauthorized() *RedirectUsingPATCHUnauthorized {
	return &RedirectUsingPATCHUnauthorized{}
}

/*RedirectUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type RedirectUsingPATCHUnauthorized struct {
}

func (o *RedirectUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /lcm/cms/api/**][%d] redirectUsingPATCHUnauthorized ", 401)
}

func (o *RedirectUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRedirectUsingPATCHForbidden creates a RedirectUsingPATCHForbidden with default headers values
func NewRedirectUsingPATCHForbidden() *RedirectUsingPATCHForbidden {
	return &RedirectUsingPATCHForbidden{}
}

/*RedirectUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type RedirectUsingPATCHForbidden struct {
}

func (o *RedirectUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /lcm/cms/api/**][%d] redirectUsingPATCHForbidden ", 403)
}

func (o *RedirectUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
