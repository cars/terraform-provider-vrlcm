// Code generated by go-swagger; DO NOT EDIT.

package blackstone_proxy_service_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRedirectUsingPATCHParams creates a new RedirectUsingPATCHParams object
// with the default values initialized.
func NewRedirectUsingPATCHParams() *RedirectUsingPATCHParams {
	var ()
	return &RedirectUsingPATCHParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRedirectUsingPATCHParamsWithTimeout creates a new RedirectUsingPATCHParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRedirectUsingPATCHParamsWithTimeout(timeout time.Duration) *RedirectUsingPATCHParams {
	var ()
	return &RedirectUsingPATCHParams{

		timeout: timeout,
	}
}

// NewRedirectUsingPATCHParamsWithContext creates a new RedirectUsingPATCHParams object
// with the default values initialized, and the ability to set a context for a request
func NewRedirectUsingPATCHParamsWithContext(ctx context.Context) *RedirectUsingPATCHParams {
	var ()
	return &RedirectUsingPATCHParams{

		Context: ctx,
	}
}

// NewRedirectUsingPATCHParamsWithHTTPClient creates a new RedirectUsingPATCHParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRedirectUsingPATCHParamsWithHTTPClient(client *http.Client) *RedirectUsingPATCHParams {
	var ()
	return &RedirectUsingPATCHParams{
		HTTPClient: client,
	}
}

/*RedirectUsingPATCHParams contains all the parameters to send to the API endpoint
for the redirect using p a t c h operation typically these are written to a http.Request
*/
type RedirectUsingPATCHParams struct {

	/*Body
	  body

	*/
	Body string
	/*Method
	  method

	*/
	Method *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the redirect using p a t c h params
func (o *RedirectUsingPATCHParams) WithTimeout(timeout time.Duration) *RedirectUsingPATCHParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the redirect using p a t c h params
func (o *RedirectUsingPATCHParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the redirect using p a t c h params
func (o *RedirectUsingPATCHParams) WithContext(ctx context.Context) *RedirectUsingPATCHParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the redirect using p a t c h params
func (o *RedirectUsingPATCHParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the redirect using p a t c h params
func (o *RedirectUsingPATCHParams) WithHTTPClient(client *http.Client) *RedirectUsingPATCHParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the redirect using p a t c h params
func (o *RedirectUsingPATCHParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the redirect using p a t c h params
func (o *RedirectUsingPATCHParams) WithBody(body string) *RedirectUsingPATCHParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the redirect using p a t c h params
func (o *RedirectUsingPATCHParams) SetBody(body string) {
	o.Body = body
}

// WithMethod adds the method to the redirect using p a t c h params
func (o *RedirectUsingPATCHParams) WithMethod(method *string) *RedirectUsingPATCHParams {
	o.SetMethod(method)
	return o
}

// SetMethod adds the method to the redirect using p a t c h params
func (o *RedirectUsingPATCHParams) SetMethod(method *string) {
	o.Method = method
}

// WriteToRequest writes these params to a swagger request
func (o *RedirectUsingPATCHParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Method != nil {

		// query param method
		var qrMethod string
		if o.Method != nil {
			qrMethod = *o.Method
		}
		qMethod := qrMethod
		if qMethod != "" {
			if err := r.SetQueryParam("method", qMethod); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
