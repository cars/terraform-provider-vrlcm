// Code generated by go-swagger; DO NOT EDIT.

package configuration_parameter_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateConfigUsingPATCHReader is a Reader for the UpdateConfigUsingPATCH structure.
type UpdateConfigUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateConfigUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateConfigUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateConfigUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateConfigUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateConfigUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateConfigUsingPATCHOK creates a UpdateConfigUsingPATCHOK with default headers values
func NewUpdateConfigUsingPATCHOK() *UpdateConfigUsingPATCHOK {
	return &UpdateConfigUsingPATCHOK{}
}

/*UpdateConfigUsingPATCHOK handles this case with default header values.

OK
*/
type UpdateConfigUsingPATCHOK struct {
	Payload interface{}
}

func (o *UpdateConfigUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /lcm/authzn/api/configparams/{name}][%d] updateConfigUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *UpdateConfigUsingPATCHOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateConfigUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConfigUsingPATCHNoContent creates a UpdateConfigUsingPATCHNoContent with default headers values
func NewUpdateConfigUsingPATCHNoContent() *UpdateConfigUsingPATCHNoContent {
	return &UpdateConfigUsingPATCHNoContent{}
}

/*UpdateConfigUsingPATCHNoContent handles this case with default header values.

No Content
*/
type UpdateConfigUsingPATCHNoContent struct {
}

func (o *UpdateConfigUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /lcm/authzn/api/configparams/{name}][%d] updateConfigUsingPATCHNoContent ", 204)
}

func (o *UpdateConfigUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateConfigUsingPATCHUnauthorized creates a UpdateConfigUsingPATCHUnauthorized with default headers values
func NewUpdateConfigUsingPATCHUnauthorized() *UpdateConfigUsingPATCHUnauthorized {
	return &UpdateConfigUsingPATCHUnauthorized{}
}

/*UpdateConfigUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateConfigUsingPATCHUnauthorized struct {
}

func (o *UpdateConfigUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /lcm/authzn/api/configparams/{name}][%d] updateConfigUsingPATCHUnauthorized ", 401)
}

func (o *UpdateConfigUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateConfigUsingPATCHForbidden creates a UpdateConfigUsingPATCHForbidden with default headers values
func NewUpdateConfigUsingPATCHForbidden() *UpdateConfigUsingPATCHForbidden {
	return &UpdateConfigUsingPATCHForbidden{}
}

/*UpdateConfigUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type UpdateConfigUsingPATCHForbidden struct {
}

func (o *UpdateConfigUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /lcm/authzn/api/configparams/{name}][%d] updateConfigUsingPATCHForbidden ", 403)
}

func (o *UpdateConfigUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
