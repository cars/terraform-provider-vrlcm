// Code generated by go-swagger; DO NOT EDIT.

package configuration_parameter_a_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new configuration parameter a p is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for configuration parameter a p is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	BuilImportConfigsUsingPOST(params *BuilImportConfigsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*BuilImportConfigsUsingPOSTOK, *BuilImportConfigsUsingPOSTCreated, error)

	CreateConfigUsingPOST(params *CreateConfigUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateConfigUsingPOSTOK, *CreateConfigUsingPOSTCreated, error)

	GetAllCofigsUsingGET(params *GetAllCofigsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllCofigsUsingGETOK, error)

	GetConfigByNameUsingGET(params *GetConfigByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigByNameUsingGETOK, error)

	GetLoginConfigsUsingGET(params *GetLoginConfigsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetLoginConfigsUsingGETOK, error)

	IsVidmRegisteredUsingGET(params *IsVidmRegisteredUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsVidmRegisteredUsingGETOK, error)

	UpdateConfigUsingPATCH(params *UpdateConfigUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConfigUsingPATCHOK, *UpdateConfigUsingPATCHNoContent, error)

	UpdateConfigUsingPUT(params *UpdateConfigUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConfigUsingPUTOK, *UpdateConfigUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BuilImportConfigsUsingPOST buils import configs
*/
func (a *Client) BuilImportConfigsUsingPOST(params *BuilImportConfigsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*BuilImportConfigsUsingPOSTOK, *BuilImportConfigsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBuilImportConfigsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "builImportConfigsUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/configparams/bulkimport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BuilImportConfigsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *BuilImportConfigsUsingPOSTOK:
		return value, nil, nil
	case *BuilImportConfigsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for configuration_parameter_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateConfigUsingPOST creates config
*/
func (a *Client) CreateConfigUsingPOST(params *CreateConfigUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*CreateConfigUsingPOSTOK, *CreateConfigUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConfigUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createConfigUsingPOST",
		Method:             "POST",
		PathPattern:        "/lcm/authzn/api/configparams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConfigUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateConfigUsingPOSTOK:
		return value, nil, nil
	case *CreateConfigUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for configuration_parameter_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllCofigsUsingGET gets all cofigs
*/
func (a *Client) GetAllCofigsUsingGET(params *GetAllCofigsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllCofigsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCofigsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllCofigsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/configparams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllCofigsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllCofigsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllCofigsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConfigByNameUsingGET gets config by name
*/
func (a *Client) GetConfigByNameUsingGET(params *GetConfigByNameUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigByNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfigByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/configparams/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigByNameUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfigByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLoginConfigsUsingGET gets login configs
*/
func (a *Client) GetLoginConfigsUsingGET(params *GetLoginConfigsUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*GetLoginConfigsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoginConfigsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLoginConfigsUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/loginconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLoginConfigsUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoginConfigsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLoginConfigsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IsVidmRegisteredUsingGET is vidm registered
*/
func (a *Client) IsVidmRegisteredUsingGET(params *IsVidmRegisteredUsingGETParams, authInfo runtime.ClientAuthInfoWriter) (*IsVidmRegisteredUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsVidmRegisteredUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isVidmRegisteredUsingGET",
		Method:             "GET",
		PathPattern:        "/lcm/authzn/api/isvidmregistered",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsVidmRegisteredUsingGETReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsVidmRegisteredUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for isVidmRegisteredUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateConfigUsingPATCH updates config
*/
func (a *Client) UpdateConfigUsingPATCH(params *UpdateConfigUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConfigUsingPATCHOK, *UpdateConfigUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConfigUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateConfigUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/lcm/authzn/api/configparams/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConfigUsingPATCHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateConfigUsingPATCHOK:
		return value, nil, nil
	case *UpdateConfigUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for configuration_parameter_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateConfigUsingPUT updates config
*/
func (a *Client) UpdateConfigUsingPUT(params *UpdateConfigUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConfigUsingPUTOK, *UpdateConfigUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConfigUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateConfigUsingPUT",
		Method:             "PUT",
		PathPattern:        "/lcm/authzn/api/configparams/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConfigUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateConfigUsingPUTOK:
		return value, nil, nil
	case *UpdateConfigUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for configuration_parameter_a_p_is: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
