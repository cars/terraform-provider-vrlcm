// Code generated by go-swagger; DO NOT EDIT.

package command_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new command controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for command controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAllCommandsUsingDELETE(params *DeleteAllCommandsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllCommandsUsingDELETEOK, *DeleteAllCommandsUsingDELETENoContent, error)

	DeleteCommandUsingDELETE(params *DeleteCommandUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCommandUsingDELETEOK, *DeleteCommandUsingDELETENoContent, error)

	GetAllCommandsUsingPOST(params *GetAllCommandsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllCommandsUsingPOSTOK, *GetAllCommandsUsingPOSTCreated, error)

	GetChildCommandsUsingPOST(params *GetChildCommandsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetChildCommandsUsingPOSTOK, *GetChildCommandsUsingPOSTCreated, error)

	GetCommandUsingPOST(params *GetCommandUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommandUsingPOSTOK, *GetCommandUsingPOSTCreated, error)

	GetCommandsForEnvironmentUsingPOST(params *GetCommandsForEnvironmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommandsForEnvironmentUsingPOSTOK, *GetCommandsForEnvironmentUsingPOSTCreated, error)

	GetNextCommandUsingPOST(params *GetNextCommandUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetNextCommandUsingPOSTOK, *GetNextCommandUsingPOSTCreated, error)

	QueueCommandUsingPOST(params *QueueCommandUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*QueueCommandUsingPOSTOK, *QueueCommandUsingPOSTCreated, error)

	UpdateCommandUsingPATCH(params *UpdateCommandUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommandUsingPATCHOK, *UpdateCommandUsingPATCHNoContent, error)

	UpdateCommandUsingPUT(params *UpdateCommandUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommandUsingPUTOK, *UpdateCommandUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAllCommandsUsingDELETE deletes all commands
*/
func (a *Client) DeleteAllCommandsUsingDELETE(params *DeleteAllCommandsUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAllCommandsUsingDELETEOK, *DeleteAllCommandsUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllCommandsUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllCommandsUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/command/delete/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllCommandsUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAllCommandsUsingDELETEOK:
		return value, nil, nil
	case *DeleteAllCommandsUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for command_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCommandUsingDELETE deletes command
*/
func (a *Client) DeleteCommandUsingDELETE(params *DeleteCommandUsingDELETEParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCommandUsingDELETEOK, *DeleteCommandUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCommandUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCommandUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/command/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCommandUsingDELETEReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCommandUsingDELETEOK:
		return value, nil, nil
	case *DeleteCommandUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for command_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllCommandsUsingPOST gets all commands
*/
func (a *Client) GetAllCommandsUsingPOST(params *GetAllCommandsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllCommandsUsingPOSTOK, *GetAllCommandsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCommandsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllCommandsUsingPOST",
		Method:             "POST",
		PathPattern:        "/command/get/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllCommandsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllCommandsUsingPOSTOK:
		return value, nil, nil
	case *GetAllCommandsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for command_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChildCommandsUsingPOST gets child commands
*/
func (a *Client) GetChildCommandsUsingPOST(params *GetChildCommandsUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetChildCommandsUsingPOSTOK, *GetChildCommandsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChildCommandsUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChildCommandsUsingPOST",
		Method:             "POST",
		PathPattern:        "/command/get/childs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChildCommandsUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetChildCommandsUsingPOSTOK:
		return value, nil, nil
	case *GetChildCommandsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for command_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCommandUsingPOST gets command
*/
func (a *Client) GetCommandUsingPOST(params *GetCommandUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommandUsingPOSTOK, *GetCommandUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommandUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCommandUsingPOST",
		Method:             "POST",
		PathPattern:        "/command/get",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCommandUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetCommandUsingPOSTOK:
		return value, nil, nil
	case *GetCommandUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for command_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCommandsForEnvironmentUsingPOST gets commands for environment
*/
func (a *Client) GetCommandsForEnvironmentUsingPOST(params *GetCommandsForEnvironmentUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommandsForEnvironmentUsingPOSTOK, *GetCommandsForEnvironmentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommandsForEnvironmentUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCommandsForEnvironmentUsingPOST",
		Method:             "POST",
		PathPattern:        "/command/get/by-environment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCommandsForEnvironmentUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetCommandsForEnvironmentUsingPOSTOK:
		return value, nil, nil
	case *GetCommandsForEnvironmentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for command_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNextCommandUsingPOST gets next command
*/
func (a *Client) GetNextCommandUsingPOST(params *GetNextCommandUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*GetNextCommandUsingPOSTOK, *GetNextCommandUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNextCommandUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNextCommandUsingPOST",
		Method:             "POST",
		PathPattern:        "/command/get/next-node-command",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNextCommandUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetNextCommandUsingPOSTOK:
		return value, nil, nil
	case *GetNextCommandUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for command_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueueCommandUsingPOST queues command
*/
func (a *Client) QueueCommandUsingPOST(params *QueueCommandUsingPOSTParams, authInfo runtime.ClientAuthInfoWriter) (*QueueCommandUsingPOSTOK, *QueueCommandUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueueCommandUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queueCommandUsingPOST",
		Method:             "POST",
		PathPattern:        "/command/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueueCommandUsingPOSTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueueCommandUsingPOSTOK:
		return value, nil, nil
	case *QueueCommandUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for command_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCommandUsingPATCH updates command
*/
func (a *Client) UpdateCommandUsingPATCH(params *UpdateCommandUsingPATCHParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommandUsingPATCHOK, *UpdateCommandUsingPATCHNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCommandUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCommandUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/command/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCommandUsingPATCHReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateCommandUsingPATCHOK:
		return value, nil, nil
	case *UpdateCommandUsingPATCHNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for command_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCommandUsingPUT updates command
*/
func (a *Client) UpdateCommandUsingPUT(params *UpdateCommandUsingPUTParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCommandUsingPUTOK, *UpdateCommandUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCommandUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCommandUsingPUT",
		Method:             "PUT",
		PathPattern:        "/command/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCommandUsingPUTReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateCommandUsingPUTOK:
		return value, nil, nil
	case *UpdateCommandUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for command_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
