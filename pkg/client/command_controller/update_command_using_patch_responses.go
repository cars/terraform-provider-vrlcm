// Code generated by go-swagger; DO NOT EDIT.

package command_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cars/terraform-provider-vrlcm/models"
)

// UpdateCommandUsingPATCHReader is a Reader for the UpdateCommandUsingPATCH structure.
type UpdateCommandUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCommandUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCommandUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateCommandUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateCommandUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCommandUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateCommandUsingPATCHOK creates a UpdateCommandUsingPATCHOK with default headers values
func NewUpdateCommandUsingPATCHOK() *UpdateCommandUsingPATCHOK {
	return &UpdateCommandUsingPATCHOK{}
}

/*UpdateCommandUsingPATCHOK handles this case with default header values.

OK
*/
type UpdateCommandUsingPATCHOK struct {
	Payload *models.Status
}

func (o *UpdateCommandUsingPATCHOK) Error() string {
	return fmt.Sprintf("[PATCH /command/update][%d] updateCommandUsingPATCHOK  %+v", 200, o.Payload)
}

func (o *UpdateCommandUsingPATCHOK) GetPayload() *models.Status {
	return o.Payload
}

func (o *UpdateCommandUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCommandUsingPATCHNoContent creates a UpdateCommandUsingPATCHNoContent with default headers values
func NewUpdateCommandUsingPATCHNoContent() *UpdateCommandUsingPATCHNoContent {
	return &UpdateCommandUsingPATCHNoContent{}
}

/*UpdateCommandUsingPATCHNoContent handles this case with default header values.

No Content
*/
type UpdateCommandUsingPATCHNoContent struct {
}

func (o *UpdateCommandUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /command/update][%d] updateCommandUsingPATCHNoContent ", 204)
}

func (o *UpdateCommandUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCommandUsingPATCHUnauthorized creates a UpdateCommandUsingPATCHUnauthorized with default headers values
func NewUpdateCommandUsingPATCHUnauthorized() *UpdateCommandUsingPATCHUnauthorized {
	return &UpdateCommandUsingPATCHUnauthorized{}
}

/*UpdateCommandUsingPATCHUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateCommandUsingPATCHUnauthorized struct {
}

func (o *UpdateCommandUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /command/update][%d] updateCommandUsingPATCHUnauthorized ", 401)
}

func (o *UpdateCommandUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCommandUsingPATCHForbidden creates a UpdateCommandUsingPATCHForbidden with default headers values
func NewUpdateCommandUsingPATCHForbidden() *UpdateCommandUsingPATCHForbidden {
	return &UpdateCommandUsingPATCHForbidden{}
}

/*UpdateCommandUsingPATCHForbidden handles this case with default header values.

Forbidden
*/
type UpdateCommandUsingPATCHForbidden struct {
}

func (o *UpdateCommandUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /command/update][%d] updateCommandUsingPATCHForbidden ", 403)
}

func (o *UpdateCommandUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
