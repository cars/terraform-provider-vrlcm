// Code generated by go-swagger; DO NOT EDIT.

package i_market_place_app_metadata_controller_impl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllMarketPlaceAppsByFilterUsingGETParams creates a new GetAllMarketPlaceAppsByFilterUsingGETParams object
// with the default values initialized.
func NewGetAllMarketPlaceAppsByFilterUsingGETParams() *GetAllMarketPlaceAppsByFilterUsingGETParams {
	var ()
	return &GetAllMarketPlaceAppsByFilterUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllMarketPlaceAppsByFilterUsingGETParamsWithTimeout creates a new GetAllMarketPlaceAppsByFilterUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllMarketPlaceAppsByFilterUsingGETParamsWithTimeout(timeout time.Duration) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	var ()
	return &GetAllMarketPlaceAppsByFilterUsingGETParams{

		timeout: timeout,
	}
}

// NewGetAllMarketPlaceAppsByFilterUsingGETParamsWithContext creates a new GetAllMarketPlaceAppsByFilterUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllMarketPlaceAppsByFilterUsingGETParamsWithContext(ctx context.Context) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	var ()
	return &GetAllMarketPlaceAppsByFilterUsingGETParams{

		Context: ctx,
	}
}

// NewGetAllMarketPlaceAppsByFilterUsingGETParamsWithHTTPClient creates a new GetAllMarketPlaceAppsByFilterUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllMarketPlaceAppsByFilterUsingGETParamsWithHTTPClient(client *http.Client) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	var ()
	return &GetAllMarketPlaceAppsByFilterUsingGETParams{
		HTTPClient: client,
	}
}

/*GetAllMarketPlaceAppsByFilterUsingGETParams contains all the parameters to send to the API endpoint
for the get all market place apps by filter using g e t operation typically these are written to a http.Request
*/
type GetAllMarketPlaceAppsByFilterUsingGETParams struct {

	/*Categories
	  categories

	*/
	Categories []string
	/*IsDownloaded
	  isDownloaded

	*/
	IsDownloaded *string
	/*Page
	  page

	*/
	Page *int32
	/*Products
	  products

	*/
	Products []string
	/*Publishers
	  publishers

	*/
	Publishers []string
	/*Search
	  search

	*/
	Search *string
	/*Size
	  size

	*/
	Size *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WithTimeout(timeout time.Duration) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WithContext(ctx context.Context) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WithHTTPClient(client *http.Client) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategories adds the categories to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WithCategories(categories []string) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	o.SetCategories(categories)
	return o
}

// SetCategories adds the categories to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) SetCategories(categories []string) {
	o.Categories = categories
}

// WithIsDownloaded adds the isDownloaded to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WithIsDownloaded(isDownloaded *string) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	o.SetIsDownloaded(isDownloaded)
	return o
}

// SetIsDownloaded adds the isDownloaded to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) SetIsDownloaded(isDownloaded *string) {
	o.IsDownloaded = isDownloaded
}

// WithPage adds the page to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WithPage(page *int32) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) SetPage(page *int32) {
	o.Page = page
}

// WithProducts adds the products to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WithProducts(products []string) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	o.SetProducts(products)
	return o
}

// SetProducts adds the products to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) SetProducts(products []string) {
	o.Products = products
}

// WithPublishers adds the publishers to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WithPublishers(publishers []string) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	o.SetPublishers(publishers)
	return o
}

// SetPublishers adds the publishers to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) SetPublishers(publishers []string) {
	o.Publishers = publishers
}

// WithSearch adds the search to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WithSearch(search *string) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) SetSearch(search *string) {
	o.Search = search
}

// WithSize adds the size to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WithSize(size *int32) *GetAllMarketPlaceAppsByFilterUsingGETParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get all market place apps by filter using g e t params
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) SetSize(size *int32) {
	o.Size = size
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllMarketPlaceAppsByFilterUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesCategories := o.Categories

	joinedCategories := swag.JoinByFormat(valuesCategories, "multi")
	// query array param categories
	if err := r.SetQueryParam("categories", joinedCategories...); err != nil {
		return err
	}

	if o.IsDownloaded != nil {

		// query param isDownloaded
		var qrIsDownloaded string
		if o.IsDownloaded != nil {
			qrIsDownloaded = *o.IsDownloaded
		}
		qIsDownloaded := qrIsDownloaded
		if qIsDownloaded != "" {
			if err := r.SetQueryParam("isDownloaded", qIsDownloaded); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	valuesProducts := o.Products

	joinedProducts := swag.JoinByFormat(valuesProducts, "multi")
	// query array param products
	if err := r.SetQueryParam("products", joinedProducts...); err != nil {
		return err
	}

	valuesPublishers := o.Publishers

	joinedPublishers := swag.JoinByFormat(valuesPublishers, "multi")
	// query array param publishers
	if err := r.SetQueryParam("publishers", joinedPublishers...); err != nil {
		return err
	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize int32
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
